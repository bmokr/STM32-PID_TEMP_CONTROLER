
L10_FIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08009778  08009778  00019778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a10  08009a10  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009a10  08009a10  00019a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a18  08009a18  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a18  08009a18  00019a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a1c  08009a1c  00019a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  200001dc  08009bfc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08009bfc  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017160  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000310d  00000000  00000000  0003736c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a0  00000000  00000000  0003a480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  0003b820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000262dc  00000000  00000000  0003ca18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e0e  00000000  00000000  00062cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1a72  00000000  00000000  00073b02  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00165574  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ba8  00000000  00000000  001655f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009760 	.word	0x08009760

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08009760 	.word	0x08009760

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <arm_pid_init_f32>:
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	edc3 7a00 	vstr	s15, [r3]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fb8:	eeb1 7a67 	vneg.f32	s14, s15
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	edc3 7a01 	vstr	s15, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1a      	ldr	r2, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d006      	beq.n	8000fec <arm_pid_init_f32+0x64>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	330c      	adds	r3, #12
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f006 fb74 	bl	80076d4 <memset>
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 f94b 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f806 	bl	8001010 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f006 f822 	bl	800704c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x54>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x58>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f965 	bl	80012fe <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f000 f92d 	bl	80012aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <HAL_InitTick+0x5c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000008 	.word	0x20000008
 8001068:	20000004 	.word	0x20000004
 800106c:	20000000 	.word	0x20000000

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000004 	.word	0x20000004
 8001094:	2000020c 	.word	0x2000020c

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	2000020c 	.word	0x2000020c

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff ffee 	bl	8001098 <HAL_GetTick>
 80010bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c8:	d005      	beq.n	80010d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_Delay+0x40>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d6:	bf00      	nop
 80010d8:	f7ff ffde 	bl	8001098 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <HAL_Delay+0x28>
  {
  }
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000004 	.word	0x20000004

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <__NVIC_SetPriorityGrouping+0x40>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	4313      	orrs	r3, r2
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <__NVIC_SetPriorityGrouping+0x40>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	05fa0000 	.word	0x05fa0000

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4907      	ldr	r1, [pc, #28]	; (8001190 <__NVIC_EnableIRQ+0x38>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	; (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f7ff ff8e 	bl	8001194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff29 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff3e 	bl	800113c <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff8e 	bl	80011e8 <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5d 	bl	8001194 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff31 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffa2 	bl	8001250 <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d004      	beq.n	8001334 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e00c      	b.n	800134e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2205      	movs	r2, #5
 8001338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e175      	b.n	8001668 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	429a      	cmp	r2, r3
 8001396:	f040 8164 	bne.w	8001662 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x4e>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b12      	cmp	r3, #18
 80013a8:	d123      	bne.n	80013f2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	08da      	lsrs	r2, r3, #3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3208      	adds	r2, #8
 80013b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	69b9      	ldr	r1, [r7, #24]
 80013ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0203 	and.w	r2, r3, #3
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d00b      	beq.n	8001446 <HAL_GPIO_Init+0xea>
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d007      	beq.n	8001446 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800143a:	2b11      	cmp	r3, #17
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b12      	cmp	r3, #18
 8001444:	d130      	bne.n	80014a8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f003 0201 	and.w	r2, r3, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80be 	beq.w	8001662 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	4b65      	ldr	r3, [pc, #404]	; (800167c <HAL_GPIO_Init+0x320>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a64      	ldr	r2, [pc, #400]	; (800167c <HAL_GPIO_Init+0x320>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b62      	ldr	r3, [pc, #392]	; (800167c <HAL_GPIO_Init+0x320>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014fe:	4a60      	ldr	r2, [pc, #384]	; (8001680 <HAL_GPIO_Init+0x324>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a57      	ldr	r2, [pc, #348]	; (8001684 <HAL_GPIO_Init+0x328>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d037      	beq.n	800159a <HAL_GPIO_Init+0x23e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a56      	ldr	r2, [pc, #344]	; (8001688 <HAL_GPIO_Init+0x32c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d031      	beq.n	8001596 <HAL_GPIO_Init+0x23a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a55      	ldr	r2, [pc, #340]	; (800168c <HAL_GPIO_Init+0x330>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d02b      	beq.n	8001592 <HAL_GPIO_Init+0x236>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a54      	ldr	r2, [pc, #336]	; (8001690 <HAL_GPIO_Init+0x334>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d025      	beq.n	800158e <HAL_GPIO_Init+0x232>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a53      	ldr	r2, [pc, #332]	; (8001694 <HAL_GPIO_Init+0x338>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d01f      	beq.n	800158a <HAL_GPIO_Init+0x22e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a52      	ldr	r2, [pc, #328]	; (8001698 <HAL_GPIO_Init+0x33c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d019      	beq.n	8001586 <HAL_GPIO_Init+0x22a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a51      	ldr	r2, [pc, #324]	; (800169c <HAL_GPIO_Init+0x340>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d013      	beq.n	8001582 <HAL_GPIO_Init+0x226>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a50      	ldr	r2, [pc, #320]	; (80016a0 <HAL_GPIO_Init+0x344>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d00d      	beq.n	800157e <HAL_GPIO_Init+0x222>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4f      	ldr	r2, [pc, #316]	; (80016a4 <HAL_GPIO_Init+0x348>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d007      	beq.n	800157a <HAL_GPIO_Init+0x21e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4e      	ldr	r2, [pc, #312]	; (80016a8 <HAL_GPIO_Init+0x34c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d101      	bne.n	8001576 <HAL_GPIO_Init+0x21a>
 8001572:	2309      	movs	r3, #9
 8001574:	e012      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001576:	230a      	movs	r3, #10
 8001578:	e010      	b.n	800159c <HAL_GPIO_Init+0x240>
 800157a:	2308      	movs	r3, #8
 800157c:	e00e      	b.n	800159c <HAL_GPIO_Init+0x240>
 800157e:	2307      	movs	r3, #7
 8001580:	e00c      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001582:	2306      	movs	r3, #6
 8001584:	e00a      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001586:	2305      	movs	r3, #5
 8001588:	e008      	b.n	800159c <HAL_GPIO_Init+0x240>
 800158a:	2304      	movs	r3, #4
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x240>
 800158e:	2303      	movs	r3, #3
 8001590:	e004      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001592:	2302      	movs	r3, #2
 8001594:	e002      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_GPIO_Init+0x240>
 800159a:	2300      	movs	r3, #0
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	f002 0203 	and.w	r2, r2, #3
 80015a2:	0092      	lsls	r2, r2, #2
 80015a4:	4093      	lsls	r3, r2
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015ac:	4934      	ldr	r1, [pc, #208]	; (8001680 <HAL_GPIO_Init+0x324>)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ba:	4b3c      	ldr	r3, [pc, #240]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015de:	4a33      	ldr	r2, [pc, #204]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015e4:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001608:	4a28      	ldr	r2, [pc, #160]	; (80016ac <HAL_GPIO_Init+0x350>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_GPIO_Init+0x350>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001632:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <HAL_GPIO_Init+0x350>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_GPIO_Init+0x350>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <HAL_GPIO_Init+0x350>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3301      	adds	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	2b0f      	cmp	r3, #15
 800166c:	f67f ae86 	bls.w	800137c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001670:	bf00      	nop
 8001672:	3724      	adds	r7, #36	; 0x24
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40021400 	.word	0x40021400
 800169c:	40021800 	.word	0x40021800
 80016a0:	40021c00 	.word	0x40021c00
 80016a4:	40022000 	.word	0x40022000
 80016a8:	40022400 	.word	0x40022400
 80016ac:	40013c00 	.word	0x40013c00

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80016cc:	e003      	b.n	80016d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016ce:	887b      	ldrh	r3, [r7, #2]
 80016d0:	041a      	lsls	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	619a      	str	r2, [r3, #24]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	401a      	ands	r2, r3
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d104      	bne.n	8001706 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016fc:	887b      	ldrh	r3, [r7, #2]
 80016fe:	041a      	lsls	r2, r3, #16
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001704:	e002      	b.n	800170c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001724:	695a      	ldr	r2, [r3, #20]
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	4013      	ands	r3, r2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f806 	bl	8001748 <HAL_GPIO_EXTI_Callback>
  }
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40013c00 	.word	0x40013c00

08001748 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800175e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001760:	b08f      	sub	sp, #60	; 0x3c
 8001762:	af0a      	add	r7, sp, #40	; 0x28
 8001764:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e10a      	b.n	8001986 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d106      	bne.n	800178a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f005 fef5 	bl	8007574 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2203      	movs	r2, #3
 800178e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f003 ff84 	bl	80056a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	687e      	ldr	r6, [r7, #4]
 80017a4:	466d      	mov	r5, sp
 80017a6:	f106 0410 	add.w	r4, r6, #16
 80017aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80017ba:	1d33      	adds	r3, r6, #4
 80017bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017be:	6838      	ldr	r0, [r7, #0]
 80017c0:	f003 ff18 	bl	80055f4 <USB_CoreInit>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2202      	movs	r2, #2
 80017ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e0d7      	b.n	8001986 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f003 ff72 	bl	80056c6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]
 80017e6:	e04a      	b.n	800187e <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	333d      	adds	r3, #61	; 0x3d
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	333c      	adds	r3, #60	; 0x3c
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	b298      	uxth	r0, r3
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	3342      	adds	r3, #66	; 0x42
 8001824:	4602      	mov	r2, r0
 8001826:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	333f      	adds	r3, #63	; 0x3f
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	3344      	adds	r3, #68	; 0x44
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	1a9b      	subs	r3, r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	3348      	adds	r3, #72	; 0x48
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	1a9b      	subs	r3, r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	3350      	adds	r3, #80	; 0x50
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	3301      	adds	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	d3af      	bcc.n	80017e8 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001888:	2300      	movs	r3, #0
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e044      	b.n	8001918 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	3301      	adds	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	d3b5      	bcc.n	800188e <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	687e      	ldr	r6, [r7, #4]
 800192a:	466d      	mov	r5, sp
 800192c:	f106 0410 	add.w	r4, r6, #16
 8001930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001938:	e894 0003 	ldmia.w	r4, {r0, r1}
 800193c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001940:	1d33      	adds	r3, r6, #4
 8001942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001944:	6838      	ldr	r0, [r7, #0]
 8001946:	f003 fee9 	bl	800571c <USB_DevInit>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e014      	b.n	8001986 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	2b01      	cmp	r3, #1
 8001972:	d102      	bne.n	800197a <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f80b 	bl	8001990 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f004 f8a9 	bl	8005ad6 <USB_DevDisconnect>

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001990 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	10000003 	.word	0x10000003

080019d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40007000 	.word	0x40007000

080019f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001a00:	2300      	movs	r3, #0
 8001a02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e25c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8087 	beq.w	8001b2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a1c:	4b96      	ldr	r3, [pc, #600]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d00c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a28:	4b93      	ldr	r3, [pc, #588]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d112      	bne.n	8001a5a <HAL_RCC_OscConfig+0x62>
 8001a34:	4b90      	ldr	r3, [pc, #576]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a40:	d10b      	bne.n	8001a5a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a42:	4b8d      	ldr	r3, [pc, #564]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d06c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x130>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d168      	bne.n	8001b28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e236      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x7a>
 8001a64:	4b84      	ldr	r3, [pc, #528]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a83      	ldr	r2, [pc, #524]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e02e      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd8>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x9c>
 8001a7a:	4b7f      	ldr	r3, [pc, #508]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a7e      	ldr	r2, [pc, #504]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b7c      	ldr	r3, [pc, #496]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a7b      	ldr	r2, [pc, #492]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e01d      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0xc0>
 8001a9e:	4b76      	ldr	r3, [pc, #472]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a75      	ldr	r2, [pc, #468]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b73      	ldr	r3, [pc, #460]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a72      	ldr	r2, [pc, #456]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd8>
 8001ab8:	4b6f      	ldr	r3, [pc, #444]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a6e      	ldr	r2, [pc, #440]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b6c      	ldr	r3, [pc, #432]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a6b      	ldr	r2, [pc, #428]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d013      	beq.n	8001b00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fade 	bl	8001098 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fada 	bl	8001098 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1ea      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b61      	ldr	r3, [pc, #388]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xe8>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff faca 	bl	8001098 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fac6 	bl	8001098 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e1d6      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1a:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x110>
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d069      	beq.n	8001c0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b36:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b42:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d11c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x190>
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d116      	bne.n	8001b88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x17a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e1aa      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	493d      	ldr	r1, [pc, #244]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	e040      	b.n	8001c0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d023      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b90:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a38      	ldr	r2, [pc, #224]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fa7c 	bl	8001098 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fa78 	bl	8001098 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e188      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb6:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4929      	ldr	r1, [pc, #164]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]
 8001bd6:	e018      	b.n	8001c0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a26      	ldr	r2, [pc, #152]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff fa58 	bl	8001098 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bec:	f7ff fa54 	bl	8001098 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e164      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d038      	beq.n	8001c88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d019      	beq.n	8001c52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c22:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fa35 	bl	8001098 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c32:	f7ff fa31 	bl	8001098 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e141      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x23a>
 8001c50:	e01a      	b.n	8001c88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5e:	f7ff fa1b 	bl	8001098 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	e00a      	b.n	8001c7c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c66:	f7ff fa17 	bl	8001098 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d903      	bls.n	8001c7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e127      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
 8001c78:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7c:	4b94      	ldr	r3, [pc, #592]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1ee      	bne.n	8001c66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a4 	beq.w	8001dde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c96:	4b8e      	ldr	r3, [pc, #568]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10d      	bne.n	8001cbe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	4b8b      	ldr	r3, [pc, #556]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a8a      	ldr	r2, [pc, #552]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
 8001cae:	4b88      	ldr	r3, [pc, #544]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cbe:	4b85      	ldr	r3, [pc, #532]	; (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001cca:	4b82      	ldr	r3, [pc, #520]	; (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a81      	ldr	r2, [pc, #516]	; (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd6:	f7ff f9df 	bl	8001098 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001cde:	f7ff f9db 	bl	8001098 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b64      	cmp	r3, #100	; 0x64
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e0eb      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf0:	4b78      	ldr	r3, [pc, #480]	; (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x31a>
 8001d04:	4b72      	ldr	r3, [pc, #456]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d08:	4a71      	ldr	r2, [pc, #452]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d10:	e02d      	b.n	8001d6e <HAL_RCC_OscConfig+0x376>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x33c>
 8001d1a:	4b6d      	ldr	r3, [pc, #436]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	4a6c      	ldr	r2, [pc, #432]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6713      	str	r3, [r2, #112]	; 0x70
 8001d26:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	4a69      	ldr	r2, [pc, #420]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d2c:	f023 0304 	bic.w	r3, r3, #4
 8001d30:	6713      	str	r3, [r2, #112]	; 0x70
 8001d32:	e01c      	b.n	8001d6e <HAL_RCC_OscConfig+0x376>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d10c      	bne.n	8001d56 <HAL_RCC_OscConfig+0x35e>
 8001d3c:	4b64      	ldr	r3, [pc, #400]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	4a63      	ldr	r2, [pc, #396]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6713      	str	r3, [r2, #112]	; 0x70
 8001d48:	4b61      	ldr	r3, [pc, #388]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	4a60      	ldr	r2, [pc, #384]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6713      	str	r3, [r2, #112]	; 0x70
 8001d54:	e00b      	b.n	8001d6e <HAL_RCC_OscConfig+0x376>
 8001d56:	4b5e      	ldr	r3, [pc, #376]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	4a5d      	ldr	r2, [pc, #372]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6713      	str	r3, [r2, #112]	; 0x70
 8001d62:	4b5b      	ldr	r3, [pc, #364]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d66:	4a5a      	ldr	r2, [pc, #360]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d015      	beq.n	8001da2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d76:	f7ff f98f 	bl	8001098 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7ff f98b 	bl	8001098 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e099      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	4b4e      	ldr	r3, [pc, #312]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ee      	beq.n	8001d7e <HAL_RCC_OscConfig+0x386>
 8001da0:	e014      	b.n	8001dcc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da2:	f7ff f979 	bl	8001098 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7ff f975 	bl	8001098 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e083      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc0:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1ee      	bne.n	8001daa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d105      	bne.n	8001dde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd2:	4b3f      	ldr	r3, [pc, #252]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a3e      	ldr	r2, [pc, #248]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d06f      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de6:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d067      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d149      	bne.n	8001e8e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a34      	ldr	r2, [pc, #208]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001e00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff f947 	bl	8001098 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff f943 	bl	8001098 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e053      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e20:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69da      	ldr	r2, [r3, #28]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	019b      	lsls	r3, r3, #6
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	3b01      	subs	r3, #1
 8001e46:	041b      	lsls	r3, r3, #16
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	061b      	lsls	r3, r3, #24
 8001e50:	4313      	orrs	r3, r2
 8001e52:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001e54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e58:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7ff f917 	bl	8001098 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff f913 	bl	8001098 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e023      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x476>
 8001e8c:	e01b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff f8fd 	bl	8001098 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff f8f9 	bl	8001098 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e009      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_OscConfig+0x4d8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x4aa>
 8001ec0:	e001      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0ce      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b69      	ldr	r3, [pc, #420]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d910      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b66      	ldr	r3, [pc, #408]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 020f 	bic.w	r2, r3, #15
 8001f06:	4964      	ldr	r1, [pc, #400]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b62      	ldr	r3, [pc, #392]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0b6      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f38:	4b58      	ldr	r3, [pc, #352]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a57      	ldr	r2, [pc, #348]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f50:	4b52      	ldr	r3, [pc, #328]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a51      	ldr	r2, [pc, #324]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b4f      	ldr	r3, [pc, #316]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	494c      	ldr	r1, [pc, #304]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d040      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	4b46      	ldr	r3, [pc, #280]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d115      	bne.n	8001fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e07d      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9a:	4b40      	ldr	r3, [pc, #256]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e071      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	4b3c      	ldr	r3, [pc, #240]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e069      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fba:	4b38      	ldr	r3, [pc, #224]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4935      	ldr	r1, [pc, #212]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fcc:	f7ff f864 	bl	8001098 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7ff f860 	bl	8001098 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e051      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	4b2c      	ldr	r3, [pc, #176]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 020c 	and.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1eb      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b26      	ldr	r3, [pc, #152]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d210      	bcs.n	800202c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b23      	ldr	r3, [pc, #140]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 020f 	bic.w	r2, r3, #15
 8002012:	4921      	ldr	r1, [pc, #132]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e030      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4915      	ldr	r1, [pc, #84]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	490d      	ldr	r1, [pc, #52]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800206a:	f000 f81d 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 800206e:	4601      	mov	r1, r0
 8002070:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 800207c:	5cd3      	ldrb	r3, [r2, r3]
 800207e:	fa21 f303 	lsr.w	r3, r1, r3
 8002082:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002086:	2000      	movs	r0, #0
 8002088:	f7fe ffc2 	bl	8001010 <HAL_InitTick>

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023c00 	.word	0x40023c00
 800209c:	40023800 	.word	0x40023800
 80020a0:	0800979c 	.word	0x0800979c
 80020a4:	20000008 	.word	0x20000008

080020a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	2300      	movs	r3, #0
 80020b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020be:	4b63      	ldr	r3, [pc, #396]	; (800224c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d007      	beq.n	80020da <HAL_RCC_GetSysClockFreq+0x32>
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d008      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x38>
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 80b4 	bne.w	800223c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d4:	4b5e      	ldr	r3, [pc, #376]	; (8002250 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020d6:	60bb      	str	r3, [r7, #8]
       break;
 80020d8:	e0b3      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020da:	4b5e      	ldr	r3, [pc, #376]	; (8002254 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80020dc:	60bb      	str	r3, [r7, #8]
      break;
 80020de:	e0b0      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e0:	4b5a      	ldr	r3, [pc, #360]	; (800224c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020e8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020ea:	4b58      	ldr	r3, [pc, #352]	; (800224c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d04a      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f6:	4b55      	ldr	r3, [pc, #340]	; (800224c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	099b      	lsrs	r3, r3, #6
 80020fc:	f04f 0400 	mov.w	r4, #0
 8002100:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	ea03 0501 	and.w	r5, r3, r1
 800210c:	ea04 0602 	and.w	r6, r4, r2
 8002110:	4629      	mov	r1, r5
 8002112:	4632      	mov	r2, r6
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	f04f 0400 	mov.w	r4, #0
 800211c:	0154      	lsls	r4, r2, #5
 800211e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002122:	014b      	lsls	r3, r1, #5
 8002124:	4619      	mov	r1, r3
 8002126:	4622      	mov	r2, r4
 8002128:	1b49      	subs	r1, r1, r5
 800212a:	eb62 0206 	sbc.w	r2, r2, r6
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	f04f 0400 	mov.w	r4, #0
 8002136:	0194      	lsls	r4, r2, #6
 8002138:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800213c:	018b      	lsls	r3, r1, #6
 800213e:	1a5b      	subs	r3, r3, r1
 8002140:	eb64 0402 	sbc.w	r4, r4, r2
 8002144:	f04f 0100 	mov.w	r1, #0
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	00e2      	lsls	r2, r4, #3
 800214e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002152:	00d9      	lsls	r1, r3, #3
 8002154:	460b      	mov	r3, r1
 8002156:	4614      	mov	r4, r2
 8002158:	195b      	adds	r3, r3, r5
 800215a:	eb44 0406 	adc.w	r4, r4, r6
 800215e:	f04f 0100 	mov.w	r1, #0
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	0262      	lsls	r2, r4, #9
 8002168:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800216c:	0259      	lsls	r1, r3, #9
 800216e:	460b      	mov	r3, r1
 8002170:	4614      	mov	r4, r2
 8002172:	4618      	mov	r0, r3
 8002174:	4621      	mov	r1, r4
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f04f 0400 	mov.w	r4, #0
 800217c:	461a      	mov	r2, r3
 800217e:	4623      	mov	r3, r4
 8002180:	f7fe fd82 	bl	8000c88 <__aeabi_uldivmod>
 8002184:	4603      	mov	r3, r0
 8002186:	460c      	mov	r4, r1
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e049      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800218c:	4b2f      	ldr	r3, [pc, #188]	; (800224c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	099b      	lsrs	r3, r3, #6
 8002192:	f04f 0400 	mov.w	r4, #0
 8002196:	f240 11ff 	movw	r1, #511	; 0x1ff
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	ea03 0501 	and.w	r5, r3, r1
 80021a2:	ea04 0602 	and.w	r6, r4, r2
 80021a6:	4629      	mov	r1, r5
 80021a8:	4632      	mov	r2, r6
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	f04f 0400 	mov.w	r4, #0
 80021b2:	0154      	lsls	r4, r2, #5
 80021b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021b8:	014b      	lsls	r3, r1, #5
 80021ba:	4619      	mov	r1, r3
 80021bc:	4622      	mov	r2, r4
 80021be:	1b49      	subs	r1, r1, r5
 80021c0:	eb62 0206 	sbc.w	r2, r2, r6
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	f04f 0400 	mov.w	r4, #0
 80021cc:	0194      	lsls	r4, r2, #6
 80021ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021d2:	018b      	lsls	r3, r1, #6
 80021d4:	1a5b      	subs	r3, r3, r1
 80021d6:	eb64 0402 	sbc.w	r4, r4, r2
 80021da:	f04f 0100 	mov.w	r1, #0
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	00e2      	lsls	r2, r4, #3
 80021e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021e8:	00d9      	lsls	r1, r3, #3
 80021ea:	460b      	mov	r3, r1
 80021ec:	4614      	mov	r4, r2
 80021ee:	195b      	adds	r3, r3, r5
 80021f0:	eb44 0406 	adc.w	r4, r4, r6
 80021f4:	f04f 0100 	mov.w	r1, #0
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	02a2      	lsls	r2, r4, #10
 80021fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002202:	0299      	lsls	r1, r3, #10
 8002204:	460b      	mov	r3, r1
 8002206:	4614      	mov	r4, r2
 8002208:	4618      	mov	r0, r3
 800220a:	4621      	mov	r1, r4
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f04f 0400 	mov.w	r4, #0
 8002212:	461a      	mov	r2, r3
 8002214:	4623      	mov	r3, r4
 8002216:	f7fe fd37 	bl	8000c88 <__aeabi_uldivmod>
 800221a:	4603      	mov	r3, r0
 800221c:	460c      	mov	r4, r1
 800221e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	3301      	adds	r3, #1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	fbb2 f3f3 	udiv	r3, r2, r3
 8002238:	60bb      	str	r3, [r7, #8]
      break;
 800223a:	e002      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800223e:	60bb      	str	r3, [r7, #8]
      break;
 8002240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002242:	68bb      	ldr	r3, [r7, #8]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	00f42400 	.word	0x00f42400
 8002254:	007a1200 	.word	0x007a1200

08002258 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_RCC_GetHCLKFreq+0x14>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000008 	.word	0x20000008

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002274:	f7ff fff0 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 8002278:	4601      	mov	r1, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	0a9b      	lsrs	r3, r3, #10
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4a03      	ldr	r2, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	fa21 f303 	lsr.w	r3, r1, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	080097ac 	.word	0x080097ac

08002298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800229c:	f7ff ffdc 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 80022a0:	4601      	mov	r1, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	0b5b      	lsrs	r3, r3, #13
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4a03      	ldr	r2, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	080097ac 	.word	0x080097ac

080022c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d012      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022e8:	4b69      	ldr	r3, [pc, #420]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a68      	ldr	r2, [pc, #416]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022f2:	6093      	str	r3, [r2, #8]
 80022f4:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fc:	4964      	ldr	r1, [pc, #400]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800230a:	2301      	movs	r3, #1
 800230c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d017      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800231a:	4b5d      	ldr	r3, [pc, #372]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002328:	4959      	ldr	r1, [pc, #356]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002338:	d101      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800233a:	2301      	movs	r3, #1
 800233c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002346:	2301      	movs	r3, #1
 8002348:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d017      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002356:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800235c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	494a      	ldr	r1, [pc, #296]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002374:	d101      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002376:	2301      	movs	r3, #1
 8002378:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002382:	2301      	movs	r3, #1
 8002384:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002392:	2301      	movs	r3, #1
 8002394:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 808b 	beq.w	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	4a39      	ldr	r2, [pc, #228]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	6413      	str	r3, [r2, #64]	; 0x40
 80023b0:	4b37      	ldr	r3, [pc, #220]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023bc:	4b35      	ldr	r3, [pc, #212]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a34      	ldr	r2, [pc, #208]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c8:	f7fe fe66 	bl	8001098 <HAL_GetTick>
 80023cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d0:	f7fe fe62 	bl	8001098 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e355      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023e2:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023ee:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d035      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d02e      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800240c:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002414:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002416:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241a:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002420:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002422:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800242e:	4a18      	ldr	r2, [pc, #96]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002434:	4b16      	ldr	r3, [pc, #88]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d114      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe fe2a 	bl	8001098 <HAL_GetTick>
 8002444:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002446:	e00a      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002448:	f7fe fe26 	bl	8001098 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e317      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0ee      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002476:	d111      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002486:	400b      	ands	r3, r1
 8002488:	4901      	ldr	r1, [pc, #4]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
 800248e:	e00b      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002490:	40023800 	.word	0x40023800
 8002494:	40007000 	.word	0x40007000
 8002498:	0ffffcff 	.word	0x0ffffcff
 800249c:	4bb0      	ldr	r3, [pc, #704]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4aaf      	ldr	r2, [pc, #700]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024a6:	6093      	str	r3, [r2, #8]
 80024a8:	4bad      	ldr	r3, [pc, #692]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b4:	49aa      	ldr	r1, [pc, #680]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d010      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024c6:	4ba6      	ldr	r3, [pc, #664]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024cc:	4aa4      	ldr	r2, [pc, #656]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024d6:	4ba2      	ldr	r3, [pc, #648]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	499f      	ldr	r1, [pc, #636]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024f4:	4b9a      	ldr	r3, [pc, #616]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002502:	4997      	ldr	r1, [pc, #604]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002516:	4b92      	ldr	r3, [pc, #584]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002524:	498e      	ldr	r1, [pc, #568]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002538:	4b89      	ldr	r3, [pc, #548]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002546:	4986      	ldr	r1, [pc, #536]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800255a:	4b81      	ldr	r3, [pc, #516]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	497d      	ldr	r1, [pc, #500]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800257c:	4b78      	ldr	r3, [pc, #480]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f023 0203 	bic.w	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	4975      	ldr	r1, [pc, #468]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800259e:	4b70      	ldr	r3, [pc, #448]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a4:	f023 020c 	bic.w	r2, r3, #12
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	496c      	ldr	r1, [pc, #432]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025c0:	4b67      	ldr	r3, [pc, #412]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	4964      	ldr	r1, [pc, #400]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025e2:	4b5f      	ldr	r3, [pc, #380]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f0:	495b      	ldr	r1, [pc, #364]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002604:	4b56      	ldr	r3, [pc, #344]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002612:	4953      	ldr	r1, [pc, #332]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002626:	4b4e      	ldr	r3, [pc, #312]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	494a      	ldr	r1, [pc, #296]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002648:	4b45      	ldr	r3, [pc, #276]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	4942      	ldr	r1, [pc, #264]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800266a:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002670:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002678:	4939      	ldr	r1, [pc, #228]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800268c:	4b34      	ldr	r3, [pc, #208]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800269a:	4931      	ldr	r1, [pc, #196]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d011      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026ae:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026bc:	4928      	ldr	r1, [pc, #160]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026cc:	d101      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026de:	2301      	movs	r3, #1
 80026e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fc:	4918      	ldr	r1, [pc, #96]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00b      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002710:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002720:	490f      	ldr	r1, [pc, #60]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d005      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002736:	f040 80d8 	bne.w	80028ea <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a08      	ldr	r2, [pc, #32]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002740:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002746:	f7fe fca7 	bl	8001098 <HAL_GetTick>
 800274a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800274e:	f7fe fca3 	bl	8001098 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b64      	cmp	r3, #100	; 0x64
 800275a:	d903      	bls.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e196      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002760:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002764:	4b6c      	ldr	r3, [pc, #432]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1ee      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d021      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002780:	2b00      	cmp	r3, #0
 8002782:	d11d      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002784:	4b64      	ldr	r3, [pc, #400]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800278a:	0c1b      	lsrs	r3, r3, #16
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002792:	4b61      	ldr	r3, [pc, #388]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002798:	0e1b      	lsrs	r3, r3, #24
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	019a      	lsls	r2, r3, #6
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	041b      	lsls	r3, r3, #16
 80027aa:	431a      	orrs	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	061b      	lsls	r3, r3, #24
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	071b      	lsls	r3, r3, #28
 80027b8:	4957      	ldr	r1, [pc, #348]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d4:	d00a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d02e      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ea:	d129      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027ec:	4b4a      	ldr	r3, [pc, #296]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027fa:	4b47      	ldr	r3, [pc, #284]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002800:	0f1b      	lsrs	r3, r3, #28
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	019a      	lsls	r2, r3, #6
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	041b      	lsls	r3, r3, #16
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	431a      	orrs	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	071b      	lsls	r3, r3, #28
 8002820:	493d      	ldr	r1, [pc, #244]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002828:	4b3b      	ldr	r3, [pc, #236]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800282a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800282e:	f023 021f 	bic.w	r2, r3, #31
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	3b01      	subs	r3, #1
 8002838:	4937      	ldr	r1, [pc, #220]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d01d      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800284c:	4b32      	ldr	r3, [pc, #200]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800284e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002852:	0e1b      	lsrs	r3, r3, #24
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800285a:	4b2f      	ldr	r3, [pc, #188]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800285c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002860:	0f1b      	lsrs	r3, r3, #28
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	019a      	lsls	r2, r3, #6
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	041b      	lsls	r3, r3, #16
 8002874:	431a      	orrs	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	431a      	orrs	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	071b      	lsls	r3, r3, #28
 8002880:	4925      	ldr	r1, [pc, #148]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d011      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	019a      	lsls	r2, r3, #6
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	041b      	lsls	r3, r3, #16
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	061b      	lsls	r3, r3, #24
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	071b      	lsls	r3, r3, #28
 80028b0:	4919      	ldr	r1, [pc, #100]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028b8:	4b17      	ldr	r3, [pc, #92]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a16      	ldr	r2, [pc, #88]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c4:	f7fe fbe8 	bl	8001098 <HAL_GetTick>
 80028c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028cc:	f7fe fbe4 	bl	8001098 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0d7      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	f040 80cd 	bne.w	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a08      	ldr	r2, [pc, #32]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fe:	f7fe fbcb 	bl	8001098 <HAL_GetTick>
 8002902:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002904:	e00a      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002906:	f7fe fbc7 	bl	8001098 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b64      	cmp	r3, #100	; 0x64
 8002912:	d903      	bls.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e0ba      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002918:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800291c:	4b5e      	ldr	r3, [pc, #376]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002928:	d0ed      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002946:	2b00      	cmp	r3, #0
 8002948:	d02e      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d12a      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002952:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002960:	4b4d      	ldr	r3, [pc, #308]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	0f1b      	lsrs	r3, r3, #28
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	019a      	lsls	r2, r3, #6
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	041b      	lsls	r3, r3, #16
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	061b      	lsls	r3, r3, #24
 8002980:	431a      	orrs	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	071b      	lsls	r3, r3, #28
 8002986:	4944      	ldr	r1, [pc, #272]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800298e:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002994:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	3b01      	subs	r3, #1
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	493d      	ldr	r1, [pc, #244]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d022      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029bc:	d11d      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029be:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c4:	0e1b      	lsrs	r3, r3, #24
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029cc:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	0f1b      	lsrs	r3, r3, #28
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	019a      	lsls	r2, r3, #6
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	041b      	lsls	r3, r3, #16
 80029e6:	431a      	orrs	r2, r3
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	061b      	lsls	r3, r3, #24
 80029ec:	431a      	orrs	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	071b      	lsls	r3, r3, #28
 80029f2:	4929      	ldr	r1, [pc, #164]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d028      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a06:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	0e1b      	lsrs	r3, r3, #24
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a14:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	0c1b      	lsrs	r3, r3, #16
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	019a      	lsls	r2, r3, #6
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	041b      	lsls	r3, r3, #16
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	071b      	lsls	r3, r3, #28
 8002a3a:	4917      	ldr	r1, [pc, #92]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	4911      	ldr	r1, [pc, #68]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a58:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0e      	ldr	r2, [pc, #56]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a64:	f7fe fb18 	bl	8001098 <HAL_GetTick>
 8002a68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a6c:	f7fe fb14 	bl	8001098 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e007      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a8a:	d1ef      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800

08002a9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e084      	b.n	8002bb8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d106      	bne.n	8002ace <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f004 fa73 	bl	8006fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ae4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002aee:	d902      	bls.n	8002af6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	e002      	b.n	8002afc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002afa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b04:	d007      	beq.n	8002b16 <HAL_SPI_Init+0x7a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b0e:	d002      	beq.n	8002b16 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10b      	bne.n	8002b36 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b26:	d903      	bls.n	8002b30 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b2e:	e002      	b.n	8002b36 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	ea42 0103 	orr.w	r1, r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 0204 	and.w	r2, r3, #4
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	ea42 0103 	orr.w	r1, r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_SPI_Transmit+0x22>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e150      	b.n	8002e84 <HAL_SPI_Transmit+0x2c4>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bea:	f7fe fa55 	bl	8001098 <HAL_GetTick>
 8002bee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d002      	beq.n	8002c06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
 8002c02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c04:	e135      	b.n	8002e72 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_SPI_Transmit+0x52>
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c16:	e12c      	b.n	8002e72 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	88fa      	ldrh	r2, [r7, #6]
 8002c30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c62:	d107      	bne.n	8002c74 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d007      	beq.n	8002c92 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c9a:	d94b      	bls.n	8002d34 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_SPI_Transmit+0xea>
 8002ca4:	8afb      	ldrh	r3, [r7, #22]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d13e      	bne.n	8002d28 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	881a      	ldrh	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	1c9a      	adds	r2, r3, #2
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cce:	e02b      	b.n	8002d28 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d112      	bne.n	8002d04 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	881a      	ldrh	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	1c9a      	adds	r2, r3, #2
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d02:	e011      	b.n	8002d28 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d04:	f7fe f9c8 	bl	8001098 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d803      	bhi.n	8002d1c <HAL_SPI_Transmit+0x15c>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d102      	bne.n	8002d22 <HAL_SPI_Transmit+0x162>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d26:	e0a4      	b.n	8002e72 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ce      	bne.n	8002cd0 <HAL_SPI_Transmit+0x110>
 8002d32:	e07c      	b.n	8002e2e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_SPI_Transmit+0x182>
 8002d3c:	8afb      	ldrh	r3, [r7, #22]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d170      	bne.n	8002e24 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d912      	bls.n	8002d72 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	881a      	ldrh	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	1c9a      	adds	r2, r3, #2
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b02      	subs	r3, #2
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d70:	e058      	b.n	8002e24 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	330c      	adds	r3, #12
 8002d7c:	7812      	ldrb	r2, [r2, #0]
 8002d7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d98:	e044      	b.n	8002e24 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d12b      	bne.n	8002e00 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d912      	bls.n	8002dd8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db6:	881a      	ldrh	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	1c9a      	adds	r2, r3, #2
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b02      	subs	r3, #2
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dd6:	e025      	b.n	8002e24 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	7812      	ldrb	r2, [r2, #0]
 8002de4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dfe:	e011      	b.n	8002e24 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e00:	f7fe f94a 	bl	8001098 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d803      	bhi.n	8002e18 <HAL_SPI_Transmit+0x258>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	d102      	bne.n	8002e1e <HAL_SPI_Transmit+0x25e>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e22:	e026      	b.n	8002e72 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1b5      	bne.n	8002d9a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	6839      	ldr	r1, [r7, #0]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fc34 	bl	80036a0 <SPI_EndRxTxTransaction>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10a      	bne.n	8002e62 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	77fb      	strb	r3, [r7, #31]
 8002e6e:	e000      	b.n	8002e72 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002e70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e82:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_SPI_TransmitReceive+0x26>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e1fb      	b.n	80032aa <HAL_SPI_TransmitReceive+0x41e>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eba:	f7fe f8ed 	bl	8001098 <HAL_GetTick>
 8002ebe:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ec6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002ed2:	887b      	ldrh	r3, [r7, #2]
 8002ed4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ed6:	7efb      	ldrb	r3, [r7, #27]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d00e      	beq.n	8002efa <HAL_SPI_TransmitReceive+0x6e>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ee2:	d106      	bne.n	8002ef2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <HAL_SPI_TransmitReceive+0x66>
 8002eec:	7efb      	ldrb	r3, [r7, #27]
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d003      	beq.n	8002efa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ef8:	e1cd      	b.n	8003296 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_SPI_TransmitReceive+0x80>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_SPI_TransmitReceive+0x80>
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d103      	bne.n	8002f14 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f12:	e1c0      	b.n	8003296 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d003      	beq.n	8002f28 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2205      	movs	r2, #5
 8002f24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	887a      	ldrh	r2, [r7, #2]
 8002f38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	887a      	ldrh	r2, [r7, #2]
 8002f40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	887a      	ldrh	r2, [r7, #2]
 8002f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f6a:	d802      	bhi.n	8002f72 <HAL_SPI_TransmitReceive+0xe6>
 8002f6c:	8a3b      	ldrh	r3, [r7, #16]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d908      	bls.n	8002f84 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	e007      	b.n	8002f94 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f92:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d007      	beq.n	8002fb2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fba:	d97c      	bls.n	80030b6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_SPI_TransmitReceive+0x13e>
 8002fc4:	8a7b      	ldrh	r3, [r7, #18]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d169      	bne.n	800309e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	881a      	ldrh	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	1c9a      	adds	r2, r3, #2
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fee:	e056      	b.n	800309e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d11b      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x1aa>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d016      	beq.n	8003036 <HAL_SPI_TransmitReceive+0x1aa>
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	2b01      	cmp	r3, #1
 800300c:	d113      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	881a      	ldrh	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	1c9a      	adds	r2, r3, #2
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d11c      	bne.n	800307e <HAL_SPI_TransmitReceive+0x1f2>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d016      	beq.n	800307e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	b292      	uxth	r2, r2
 800305c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	1c9a      	adds	r2, r3, #2
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800307a:	2301      	movs	r3, #1
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800307e:	f7fe f80b 	bl	8001098 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800308a:	429a      	cmp	r2, r3
 800308c:	d807      	bhi.n	800309e <HAL_SPI_TransmitReceive+0x212>
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003094:	d003      	beq.n	800309e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800309c:	e0fb      	b.n	8003296 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1a3      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x164>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d19d      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x164>
 80030b4:	e0df      	b.n	8003276 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_SPI_TransmitReceive+0x23a>
 80030be:	8a7b      	ldrh	r3, [r7, #18]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	f040 80cb 	bne.w	800325c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d912      	bls.n	80030f6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	881a      	ldrh	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	1c9a      	adds	r2, r3, #2
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b02      	subs	r3, #2
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030f4:	e0b2      	b.n	800325c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	330c      	adds	r3, #12
 8003100:	7812      	ldrb	r2, [r2, #0]
 8003102:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800311c:	e09e      	b.n	800325c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b02      	cmp	r3, #2
 800312a:	d134      	bne.n	8003196 <HAL_SPI_TransmitReceive+0x30a>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d02f      	beq.n	8003196 <HAL_SPI_TransmitReceive+0x30a>
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	2b01      	cmp	r3, #1
 800313a:	d12c      	bne.n	8003196 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b01      	cmp	r3, #1
 8003144:	d912      	bls.n	800316c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	881a      	ldrh	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	1c9a      	adds	r2, r3, #2
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b02      	subs	r3, #2
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	87da      	strh	r2, [r3, #62]	; 0x3e
 800316a:	e012      	b.n	8003192 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	330c      	adds	r3, #12
 8003176:	7812      	ldrb	r2, [r2, #0]
 8003178:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d148      	bne.n	8003236 <HAL_SPI_TransmitReceive+0x3aa>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d042      	beq.n	8003236 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d923      	bls.n	8003204 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	b292      	uxth	r2, r2
 80031c8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	1c9a      	adds	r2, r3, #2
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b02      	subs	r3, #2
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d81f      	bhi.n	8003232 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	e016      	b.n	8003232 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f103 020c 	add.w	r2, r3, #12
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	7812      	ldrb	r2, [r2, #0]
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003232:	2301      	movs	r3, #1
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003236:	f7fd ff2f 	bl	8001098 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003242:	429a      	cmp	r2, r3
 8003244:	d803      	bhi.n	800324e <HAL_SPI_TransmitReceive+0x3c2>
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d102      	bne.n	8003254 <HAL_SPI_TransmitReceive+0x3c8>
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	2b00      	cmp	r3, #0
 8003252:	d103      	bne.n	800325c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800325a:	e01c      	b.n	8003296 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	f47f af5b 	bne.w	800311e <HAL_SPI_TransmitReceive+0x292>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800326e:	b29b      	uxth	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	f47f af54 	bne.w	800311e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fa10 	bl	80036a0 <SPI_EndRxTxTransaction>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d006      	beq.n	8003294 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	661a      	str	r2, [r3, #96]	; 0x60
 8003292:	e000      	b.n	8003296 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003294:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3728      	adds	r7, #40	; 0x28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	099b      	lsrs	r3, r3, #6
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10f      	bne.n	80032f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d004      	beq.n	80032f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	4798      	blx	r3
    return;
 80032f6:	e0d8      	b.n	80034aa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_SPI_IRQHandler+0x66>
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	09db      	lsrs	r3, r3, #7
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
    return;
 8003318:	e0c7      	b.n	80034aa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10c      	bne.n	8003340 <HAL_SPI_IRQHandler+0x8c>
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	099b      	lsrs	r3, r3, #6
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <HAL_SPI_IRQHandler+0x8c>
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80b5 	beq.w	80034aa <HAL_SPI_IRQHandler+0x1f6>
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80ae 	beq.w	80034aa <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d023      	beq.n	80033a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b03      	cmp	r3, #3
 8003364:	d011      	beq.n	800338a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336a:	f043 0204 	orr.w	r2, r3, #4
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	e00b      	b.n	80033a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	693b      	ldr	r3, [r7, #16]
        return;
 80033a0:	e083      	b.n	80034aa <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d014      	beq.n	80033d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	0a1b      	lsrs	r3, r3, #8
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00c      	beq.n	80033fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e8:	f043 0208 	orr.w	r2, r3, #8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80033f0:	2300      	movs	r3, #0
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003402:	2b00      	cmp	r3, #0
 8003404:	d050      	beq.n	80034a8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003414:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d104      	bne.n	8003432 <HAL_SPI_IRQHandler+0x17e>
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d034      	beq.n	800349c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0203 	bic.w	r2, r2, #3
 8003440:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	2b00      	cmp	r3, #0
 8003448:	d011      	beq.n	800346e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344e:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <HAL_SPI_IRQHandler+0x1fc>)
 8003450:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd ff5d 	bl	8001316 <HAL_DMA_Abort_IT>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003466:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	2b00      	cmp	r3, #0
 8003474:	d016      	beq.n	80034a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347a:	4a0d      	ldr	r2, [pc, #52]	; (80034b0 <HAL_SPI_IRQHandler+0x1fc>)
 800347c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd ff47 	bl	8001316 <HAL_DMA_Abort_IT>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003492:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800349a:	e003      	b.n	80034a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f809 	bl	80034b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80034a2:	e000      	b.n	80034a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80034a4:	bf00      	nop
    return;
 80034a6:	bf00      	nop
 80034a8:	bf00      	nop
  }
}
 80034aa:	3720      	adds	r7, #32
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	080034c9 	.word	0x080034c9

080034b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f7ff ffe5 	bl	80034b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80034ea:	bf00      	nop
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4613      	mov	r3, r2
 8003500:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003502:	e04c      	b.n	800359e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350a:	d048      	beq.n	800359e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800350c:	f7fd fdc4 	bl	8001098 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d902      	bls.n	8003522 <SPI_WaitFlagStateUntilTimeout+0x30>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d13d      	bne.n	800359e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800353a:	d111      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003544:	d004      	beq.n	8003550 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354e:	d107      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003568:	d10f      	bne.n	800358a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e00f      	b.n	80035be <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1a3      	bne.n	8003504 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80035d4:	e057      	b.n	8003686 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035dc:	d106      	bne.n	80035ec <SPI_WaitFifoStateUntilTimeout+0x26>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	330c      	adds	r3, #12
 80035ea:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d048      	beq.n	8003686 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80035f4:	f7fd fd50 	bl	8001098 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d902      	bls.n	800360a <SPI_WaitFifoStateUntilTimeout+0x44>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d13d      	bne.n	8003686 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003618:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003622:	d111      	bne.n	8003648 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800362c:	d004      	beq.n	8003638 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d107      	bne.n	8003648 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003646:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003650:	d10f      	bne.n	8003672 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003670:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e008      	b.n	8003698 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4013      	ands	r3, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	429a      	cmp	r2, r3
 8003694:	d19f      	bne.n	80035d6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f7ff ff84 	bl	80035c6 <SPI_WaitFifoStateUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d007      	beq.n	80036d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e027      	b.n	8003724 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2200      	movs	r2, #0
 80036dc:	2180      	movs	r1, #128	; 0x80
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f7ff ff07 	bl	80034f2 <SPI_WaitFlagStateUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ee:	f043 0220 	orr.w	r2, r3, #32
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e014      	b.n	8003724 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2200      	movs	r2, #0
 8003702:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7ff ff5d 	bl	80035c6 <SPI_WaitFifoStateUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e000      	b.n	8003724 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e01d      	b.n	800377a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f003 fde8 	bl	8007328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f000 fba6 	bl	8003ebc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e01d      	b.n	80037d0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d106      	bne.n	80037ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f815 	bl	80037d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3304      	adds	r3, #4
 80037be:	4619      	mov	r1, r3
 80037c0:	4610      	mov	r0, r2
 80037c2:	f000 fb7b 	bl	8003ebc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2201      	movs	r2, #1
 80037fc:	6839      	ldr	r1, [r7, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fef4 	bl	80045ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a17      	ldr	r2, [pc, #92]	; (8003868 <HAL_TIM_PWM_Start+0x7c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d004      	beq.n	8003818 <HAL_TIM_PWM_Start+0x2c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a16      	ldr	r2, [pc, #88]	; (800386c <HAL_TIM_PWM_Start+0x80>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_TIM_PWM_Start+0x30>
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <HAL_TIM_PWM_Start+0x32>
 800381c:	2300      	movs	r3, #0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <HAL_TIM_PWM_Start+0x84>)
 800383a:	4013      	ands	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b06      	cmp	r3, #6
 8003842:	d00b      	beq.n	800385c <HAL_TIM_PWM_Start+0x70>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384a:	d007      	beq.n	800385c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40010000 	.word	0x40010000
 800386c:	40010400 	.word	0x40010400
 8003870:	00010007 	.word	0x00010007

08003874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b02      	cmp	r3, #2
 8003888:	d122      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b02      	cmp	r3, #2
 8003896:	d11b      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0202 	mvn.w	r2, #2
 80038a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fae2 	bl	8003e80 <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fad4 	bl	8003e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fae5 	bl	8003e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d122      	bne.n	8003924 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d11b      	bne.n	8003924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0204 	mvn.w	r2, #4
 80038f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fab8 	bl	8003e80 <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 faaa 	bl	8003e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fabb 	bl	8003e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b08      	cmp	r3, #8
 8003930:	d122      	bne.n	8003978 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b08      	cmp	r3, #8
 800393e:	d11b      	bne.n	8003978 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0208 	mvn.w	r2, #8
 8003948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2204      	movs	r2, #4
 800394e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa8e 	bl	8003e80 <HAL_TIM_IC_CaptureCallback>
 8003964:	e005      	b.n	8003972 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fa80 	bl	8003e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fa91 	bl	8003e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b10      	cmp	r3, #16
 8003984:	d122      	bne.n	80039cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b10      	cmp	r3, #16
 8003992:	d11b      	bne.n	80039cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0210 	mvn.w	r2, #16
 800399c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2208      	movs	r2, #8
 80039a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fa64 	bl	8003e80 <HAL_TIM_IC_CaptureCallback>
 80039b8:	e005      	b.n	80039c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa56 	bl	8003e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fa67 	bl	8003e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10e      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d107      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0201 	mvn.w	r2, #1
 80039f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fa30 	bl	8003e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	d10e      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a10:	2b80      	cmp	r3, #128	; 0x80
 8003a12:	d107      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fe70 	bl	8004704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a32:	d10e      	bne.n	8003a52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	2b80      	cmp	r3, #128	; 0x80
 8003a40:	d107      	bne.n	8003a52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fe63 	bl	8004718 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5c:	2b40      	cmp	r3, #64	; 0x40
 8003a5e:	d10e      	bne.n	8003a7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b40      	cmp	r3, #64	; 0x40
 8003a6c:	d107      	bne.n	8003a7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fa15 	bl	8003ea8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d10e      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d107      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f06f 0220 	mvn.w	r2, #32
 8003aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fe23 	bl	80046f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e105      	b.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x226>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b14      	cmp	r3, #20
 8003ae2:	f200 80f0 	bhi.w	8003cc6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003ae6:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aec:	08003b41 	.word	0x08003b41
 8003af0:	08003cc7 	.word	0x08003cc7
 8003af4:	08003cc7 	.word	0x08003cc7
 8003af8:	08003cc7 	.word	0x08003cc7
 8003afc:	08003b81 	.word	0x08003b81
 8003b00:	08003cc7 	.word	0x08003cc7
 8003b04:	08003cc7 	.word	0x08003cc7
 8003b08:	08003cc7 	.word	0x08003cc7
 8003b0c:	08003bc3 	.word	0x08003bc3
 8003b10:	08003cc7 	.word	0x08003cc7
 8003b14:	08003cc7 	.word	0x08003cc7
 8003b18:	08003cc7 	.word	0x08003cc7
 8003b1c:	08003c03 	.word	0x08003c03
 8003b20:	08003cc7 	.word	0x08003cc7
 8003b24:	08003cc7 	.word	0x08003cc7
 8003b28:	08003cc7 	.word	0x08003cc7
 8003b2c:	08003c45 	.word	0x08003c45
 8003b30:	08003cc7 	.word	0x08003cc7
 8003b34:	08003cc7 	.word	0x08003cc7
 8003b38:	08003cc7 	.word	0x08003cc7
 8003b3c:	08003c85 	.word	0x08003c85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fa58 	bl	8003ffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0208 	orr.w	r2, r2, #8
 8003b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699a      	ldr	r2, [r3, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0204 	bic.w	r2, r2, #4
 8003b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6999      	ldr	r1, [r3, #24]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	619a      	str	r2, [r3, #24]
      break;
 8003b7e:	e0a3      	b.n	8003cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 faaa 	bl	80040e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6999      	ldr	r1, [r3, #24]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	021a      	lsls	r2, r3, #8
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	619a      	str	r2, [r3, #24]
      break;
 8003bc0:	e082      	b.n	8003cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fb01 	bl	80041d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69da      	ldr	r2, [r3, #28]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0208 	orr.w	r2, r2, #8
 8003bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0204 	bic.w	r2, r2, #4
 8003bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69d9      	ldr	r1, [r3, #28]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	61da      	str	r2, [r3, #28]
      break;
 8003c00:	e062      	b.n	8003cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fb57 	bl	80042bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69da      	ldr	r2, [r3, #28]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69d9      	ldr	r1, [r3, #28]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	021a      	lsls	r2, r3, #8
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	61da      	str	r2, [r3, #28]
      break;
 8003c42:	e041      	b.n	8003cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fb8e 	bl	800436c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0208 	orr.w	r2, r2, #8
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0204 	bic.w	r2, r2, #4
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c82:	e021      	b.n	8003cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fbc0 	bl	8004410 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	021a      	lsls	r2, r3, #8
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003cc4:	e000      	b.n	8003cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003cc6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop

08003ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_TIM_ConfigClockSource+0x18>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e0a6      	b.n	8003e4a <HAL_TIM_ConfigClockSource+0x166>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4b4f      	ldr	r3, [pc, #316]	; (8003e54 <HAL_TIM_ConfigClockSource+0x170>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b40      	cmp	r3, #64	; 0x40
 8003d32:	d067      	beq.n	8003e04 <HAL_TIM_ConfigClockSource+0x120>
 8003d34:	2b40      	cmp	r3, #64	; 0x40
 8003d36:	d80b      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x6c>
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d073      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0x140>
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d802      	bhi.n	8003d46 <HAL_TIM_ConfigClockSource+0x62>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d06f      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d44:	e078      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	d06c      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0x140>
 8003d4a:	2b30      	cmp	r3, #48	; 0x30
 8003d4c:	d06a      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d4e:	e073      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d50:	2b70      	cmp	r3, #112	; 0x70
 8003d52:	d00d      	beq.n	8003d70 <HAL_TIM_ConfigClockSource+0x8c>
 8003d54:	2b70      	cmp	r3, #112	; 0x70
 8003d56:	d804      	bhi.n	8003d62 <HAL_TIM_ConfigClockSource+0x7e>
 8003d58:	2b50      	cmp	r3, #80	; 0x50
 8003d5a:	d033      	beq.n	8003dc4 <HAL_TIM_ConfigClockSource+0xe0>
 8003d5c:	2b60      	cmp	r3, #96	; 0x60
 8003d5e:	d041      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d60:	e06a      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d66:	d066      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0x152>
 8003d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6c:	d017      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d6e:	e063      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	6899      	ldr	r1, [r3, #8]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f000 fc14 	bl	80045ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	609a      	str	r2, [r3, #8]
      break;
 8003d9c:	e04c      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6899      	ldr	r1, [r3, #8]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f000 fbfd 	bl	80045ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dc0:	609a      	str	r2, [r3, #8]
      break;
 8003dc2:	e039      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f000 fb71 	bl	80044b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2150      	movs	r1, #80	; 0x50
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fbca 	bl	8004576 <TIM_ITRx_SetConfig>
      break;
 8003de2:	e029      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6859      	ldr	r1, [r3, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	461a      	mov	r2, r3
 8003df2:	f000 fb90 	bl	8004516 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2160      	movs	r1, #96	; 0x60
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fbba 	bl	8004576 <TIM_ITRx_SetConfig>
      break;
 8003e02:	e019      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	461a      	mov	r2, r3
 8003e12:	f000 fb51 	bl	80044b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2140      	movs	r1, #64	; 0x40
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fbaa 	bl	8004576 <TIM_ITRx_SetConfig>
      break;
 8003e22:	e009      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	f000 fba1 	bl	8004576 <TIM_ITRx_SetConfig>
      break;
 8003e34:	e000      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	fffeff88 	.word	0xfffeff88

08003e58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a40      	ldr	r2, [pc, #256]	; (8003fd0 <TIM_Base_SetConfig+0x114>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eda:	d00f      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a3d      	ldr	r2, [pc, #244]	; (8003fd4 <TIM_Base_SetConfig+0x118>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00b      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a3c      	ldr	r2, [pc, #240]	; (8003fd8 <TIM_Base_SetConfig+0x11c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d007      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a3b      	ldr	r2, [pc, #236]	; (8003fdc <TIM_Base_SetConfig+0x120>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a3a      	ldr	r2, [pc, #232]	; (8003fe0 <TIM_Base_SetConfig+0x124>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d108      	bne.n	8003f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2f      	ldr	r2, [pc, #188]	; (8003fd0 <TIM_Base_SetConfig+0x114>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d02b      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1c:	d027      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a2c      	ldr	r2, [pc, #176]	; (8003fd4 <TIM_Base_SetConfig+0x118>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d023      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a2b      	ldr	r2, [pc, #172]	; (8003fd8 <TIM_Base_SetConfig+0x11c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d01f      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a2a      	ldr	r2, [pc, #168]	; (8003fdc <TIM_Base_SetConfig+0x120>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d01b      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a29      	ldr	r2, [pc, #164]	; (8003fe0 <TIM_Base_SetConfig+0x124>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d017      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a28      	ldr	r2, [pc, #160]	; (8003fe4 <TIM_Base_SetConfig+0x128>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a27      	ldr	r2, [pc, #156]	; (8003fe8 <TIM_Base_SetConfig+0x12c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00f      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a26      	ldr	r2, [pc, #152]	; (8003fec <TIM_Base_SetConfig+0x130>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00b      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a25      	ldr	r2, [pc, #148]	; (8003ff0 <TIM_Base_SetConfig+0x134>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d007      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a24      	ldr	r2, [pc, #144]	; (8003ff4 <TIM_Base_SetConfig+0x138>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d003      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a23      	ldr	r2, [pc, #140]	; (8003ff8 <TIM_Base_SetConfig+0x13c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d108      	bne.n	8003f80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <TIM_Base_SetConfig+0x114>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_Base_SetConfig+0xf8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a0c      	ldr	r2, [pc, #48]	; (8003fe0 <TIM_Base_SetConfig+0x124>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d103      	bne.n	8003fbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	615a      	str	r2, [r3, #20]
}
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40000400 	.word	0x40000400
 8003fd8:	40000800 	.word	0x40000800
 8003fdc:	40000c00 	.word	0x40000c00
 8003fe0:	40010400 	.word	0x40010400
 8003fe4:	40014000 	.word	0x40014000
 8003fe8:	40014400 	.word	0x40014400
 8003fec:	40014800 	.word	0x40014800
 8003ff0:	40001800 	.word	0x40001800
 8003ff4:	40001c00 	.word	0x40001c00
 8003ff8:	40002000 	.word	0x40002000

08003ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f023 0201 	bic.w	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4b2b      	ldr	r3, [pc, #172]	; (80040d4 <TIM_OC1_SetConfig+0xd8>)
 8004028:	4013      	ands	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f023 0302 	bic.w	r3, r3, #2
 8004044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a21      	ldr	r2, [pc, #132]	; (80040d8 <TIM_OC1_SetConfig+0xdc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_OC1_SetConfig+0x64>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a20      	ldr	r2, [pc, #128]	; (80040dc <TIM_OC1_SetConfig+0xe0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d10c      	bne.n	800407a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0308 	bic.w	r3, r3, #8
 8004066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f023 0304 	bic.w	r3, r3, #4
 8004078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a16      	ldr	r2, [pc, #88]	; (80040d8 <TIM_OC1_SetConfig+0xdc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d003      	beq.n	800408a <TIM_OC1_SetConfig+0x8e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a15      	ldr	r2, [pc, #84]	; (80040dc <TIM_OC1_SetConfig+0xe0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d111      	bne.n	80040ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	621a      	str	r2, [r3, #32]
}
 80040c8:	bf00      	nop
 80040ca:	371c      	adds	r7, #28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	fffeff8f 	.word	0xfffeff8f
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40010400 	.word	0x40010400

080040e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f023 0210 	bic.w	r2, r3, #16
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4b2e      	ldr	r3, [pc, #184]	; (80041c4 <TIM_OC2_SetConfig+0xe4>)
 800410c:	4013      	ands	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f023 0320 	bic.w	r3, r3, #32
 800412a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a23      	ldr	r2, [pc, #140]	; (80041c8 <TIM_OC2_SetConfig+0xe8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_OC2_SetConfig+0x68>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a22      	ldr	r2, [pc, #136]	; (80041cc <TIM_OC2_SetConfig+0xec>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d10d      	bne.n	8004164 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004162:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a18      	ldr	r2, [pc, #96]	; (80041c8 <TIM_OC2_SetConfig+0xe8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d003      	beq.n	8004174 <TIM_OC2_SetConfig+0x94>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a17      	ldr	r2, [pc, #92]	; (80041cc <TIM_OC2_SetConfig+0xec>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d113      	bne.n	800419c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800417a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	feff8fff 	.word	0xfeff8fff
 80041c8:	40010000 	.word	0x40010000
 80041cc:	40010400 	.word	0x40010400

080041d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <TIM_OC3_SetConfig+0xe0>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0303 	bic.w	r3, r3, #3
 8004206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <TIM_OC3_SetConfig+0xe4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d003      	beq.n	8004236 <TIM_OC3_SetConfig+0x66>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a21      	ldr	r2, [pc, #132]	; (80042b8 <TIM_OC3_SetConfig+0xe8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d10d      	bne.n	8004252 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800423c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <TIM_OC3_SetConfig+0xe4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d003      	beq.n	8004262 <TIM_OC3_SetConfig+0x92>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a16      	ldr	r2, [pc, #88]	; (80042b8 <TIM_OC3_SetConfig+0xe8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d113      	bne.n	800428a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	621a      	str	r2, [r3, #32]
}
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	fffeff8f 	.word	0xfffeff8f
 80042b4:	40010000 	.word	0x40010000
 80042b8:	40010400 	.word	0x40010400

080042bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4b1e      	ldr	r3, [pc, #120]	; (8004360 <TIM_OC4_SetConfig+0xa4>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	031b      	lsls	r3, r3, #12
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a13      	ldr	r2, [pc, #76]	; (8004364 <TIM_OC4_SetConfig+0xa8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_OC4_SetConfig+0x68>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a12      	ldr	r2, [pc, #72]	; (8004368 <TIM_OC4_SetConfig+0xac>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d109      	bne.n	8004338 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800432a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	019b      	lsls	r3, r3, #6
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	feff8fff 	.word	0xfeff8fff
 8004364:	40010000 	.word	0x40010000
 8004368:	40010400 	.word	0x40010400

0800436c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <TIM_OC5_SetConfig+0x98>)
 8004398:	4013      	ands	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80043ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	041b      	lsls	r3, r3, #16
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a12      	ldr	r2, [pc, #72]	; (8004408 <TIM_OC5_SetConfig+0x9c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d003      	beq.n	80043ca <TIM_OC5_SetConfig+0x5e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a11      	ldr	r2, [pc, #68]	; (800440c <TIM_OC5_SetConfig+0xa0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d109      	bne.n	80043de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	621a      	str	r2, [r3, #32]
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	fffeff8f 	.word	0xfffeff8f
 8004408:	40010000 	.word	0x40010000
 800440c:	40010400 	.word	0x40010400

08004410 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <TIM_OC6_SetConfig+0x9c>)
 800443c:	4013      	ands	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	051b      	lsls	r3, r3, #20
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <TIM_OC6_SetConfig+0xa0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d003      	beq.n	8004470 <TIM_OC6_SetConfig+0x60>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a12      	ldr	r2, [pc, #72]	; (80044b4 <TIM_OC6_SetConfig+0xa4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d109      	bne.n	8004484 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004476:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	029b      	lsls	r3, r3, #10
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	feff8fff 	.word	0xfeff8fff
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40010400 	.word	0x40010400

080044b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	f023 0201 	bic.w	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f023 030a 	bic.w	r3, r3, #10
 80044f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004516:	b480      	push	{r7}
 8004518:	b087      	sub	sp, #28
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	f023 0210 	bic.w	r2, r3, #16
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	031b      	lsls	r3, r3, #12
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004552:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	f043 0307 	orr.w	r3, r3, #7
 8004598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	609a      	str	r2, [r3, #8]
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	021a      	lsls	r2, r3, #8
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	609a      	str	r2, [r3, #8]
}
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	2201      	movs	r2, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1a      	ldr	r2, [r3, #32]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	43db      	mvns	r3, r3
 800460e:	401a      	ands	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a1a      	ldr	r2, [r3, #32]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	fa01 f303 	lsl.w	r3, r1, r3
 8004624:	431a      	orrs	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
	...

08004638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800464c:	2302      	movs	r3, #2
 800464e:	e045      	b.n	80046dc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d004      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1b      	ldr	r2, [pc, #108]	; (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d108      	bne.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800468a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ae:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40010400 	.word	0x40010400

080046f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e040      	b.n	80047c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f002 fe96 	bl	8007480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2224      	movs	r2, #36	; 0x24
 8004758:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0201 	bic.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fa90 	bl	8004c90 <UART_SetConfig>
 8004770:	4603      	mov	r3, r0
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e022      	b.n	80047c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fd28 	bl	80051d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047a6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fdaf 	bl	800531c <UART_CheckIdleState>
 80047be:	4603      	mov	r3, r0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	; 0x28
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d17f      	bne.n	80048e0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_UART_Transmit+0x24>
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e078      	b.n	80048e2 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_UART_Transmit+0x36>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e071      	b.n	80048e2 <HAL_UART_Transmit+0x11a>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2221      	movs	r2, #33	; 0x21
 8004810:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004812:	f7fc fc41 	bl	8001098 <HAL_GetTick>
 8004816:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	88fa      	ldrh	r2, [r7, #6]
 800481c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	88fa      	ldrh	r2, [r7, #6]
 8004824:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004830:	d108      	bne.n	8004844 <HAL_UART_Transmit+0x7c>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e003      	b.n	800484c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004848:	2300      	movs	r3, #0
 800484a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800484c:	e02c      	b.n	80048a8 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2200      	movs	r2, #0
 8004856:	2180      	movs	r1, #128	; 0x80
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fd8e 	bl	800537a <UART_WaitOnFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e03c      	b.n	80048e2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10b      	bne.n	8004886 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800487c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	3302      	adds	r3, #2
 8004882:	61bb      	str	r3, [r7, #24]
 8004884:	e007      	b.n	8004896 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	781a      	ldrb	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	3301      	adds	r3, #1
 8004894:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1cc      	bne.n	800484e <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2200      	movs	r2, #0
 80048bc:	2140      	movs	r1, #64	; 0x40
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fd5b 	bl	800537a <UART_WaitOnFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e009      	b.n	80048e2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	e000      	b.n	80048e2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
  }
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	4613      	mov	r3, r2
 80048f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048fe:	2b20      	cmp	r3, #32
 8004900:	f040 808a 	bne.w	8004a18 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_UART_Receive_IT+0x24>
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e082      	b.n	8004a1a <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_UART_Receive_IT+0x36>
 800491e:	2302      	movs	r3, #2
 8004920:	e07b      	b.n	8004a1a <HAL_UART_Receive_IT+0x12e>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	88fa      	ldrh	r2, [r7, #6]
 8004934:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494e:	d10e      	bne.n	800496e <HAL_UART_Receive_IT+0x82>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d105      	bne.n	8004964 <HAL_UART_Receive_IT+0x78>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800495e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004962:	e02d      	b.n	80049c0 <HAL_UART_Receive_IT+0xd4>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	22ff      	movs	r2, #255	; 0xff
 8004968:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800496c:	e028      	b.n	80049c0 <HAL_UART_Receive_IT+0xd4>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <HAL_UART_Receive_IT+0xa6>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <HAL_UART_Receive_IT+0x9c>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	22ff      	movs	r2, #255	; 0xff
 8004982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004986:	e01b      	b.n	80049c0 <HAL_UART_Receive_IT+0xd4>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	227f      	movs	r2, #127	; 0x7f
 800498c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004990:	e016      	b.n	80049c0 <HAL_UART_Receive_IT+0xd4>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800499a:	d10d      	bne.n	80049b8 <HAL_UART_Receive_IT+0xcc>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d104      	bne.n	80049ae <HAL_UART_Receive_IT+0xc2>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	227f      	movs	r2, #127	; 0x7f
 80049a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049ac:	e008      	b.n	80049c0 <HAL_UART_Receive_IT+0xd4>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	223f      	movs	r2, #63	; 0x3f
 80049b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049b6:	e003      	b.n	80049c0 <HAL_UART_Receive_IT+0xd4>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2222      	movs	r2, #34	; 0x22
 80049ca:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e4:	d107      	bne.n	80049f6 <HAL_UART_Receive_IT+0x10a>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d103      	bne.n	80049f6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <HAL_UART_Receive_IT+0x13c>)
 80049f2:	661a      	str	r2, [r3, #96]	; 0x60
 80049f4:	e002      	b.n	80049fc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4a0c      	ldr	r2, [pc, #48]	; (8004a2c <HAL_UART_Receive_IT+0x140>)
 80049fa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004a12:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	e000      	b.n	8004a1a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004a18:	2302      	movs	r3, #2
  }
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	0800554f 	.word	0x0800554f
 8004a2c:	080054a9 	.word	0x080054a9

08004a30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d113      	bne.n	8004a86 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00e      	beq.n	8004a86 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d009      	beq.n	8004a86 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 80eb 	beq.w	8004c52 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	4798      	blx	r3
      }
      return;
 8004a84:	e0e5      	b.n	8004c52 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80c0 	beq.w	8004c0e <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d105      	bne.n	8004aa4 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 80b5 	beq.w	8004c0e <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00e      	beq.n	8004acc <HAL_UART_IRQHandler+0x9c>
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d009      	beq.n	8004acc <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2201      	movs	r2, #1
 8004abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac4:	f043 0201 	orr.w	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00e      	beq.n	8004af4 <HAL_UART_IRQHandler+0xc4>
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d009      	beq.n	8004af4 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aec:	f043 0204 	orr.w	r2, r3, #4
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00e      	beq.n	8004b1c <HAL_UART_IRQHandler+0xec>
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d009      	beq.n	8004b1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b14:	f043 0202 	orr.w	r2, r3, #2
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d013      	beq.n	8004b4e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d104      	bne.n	8004b3a <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2208      	movs	r2, #8
 8004b40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b46:	f043 0208 	orr.w	r2, r3, #8
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d07f      	beq.n	8004c56 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00c      	beq.n	8004b7a <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b7e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8a:	2b40      	cmp	r3, #64	; 0x40
 8004b8c:	d004      	beq.n	8004b98 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d031      	beq.n	8004bfc <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fc36 	bl	800540a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d123      	bne.n	8004bf4 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bba:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d013      	beq.n	8004bec <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc8:	4a26      	ldr	r2, [pc, #152]	; (8004c64 <HAL_UART_IRQHandler+0x234>)
 8004bca:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fc fba0 	bl	8001316 <HAL_DMA_Abort_IT>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d016      	beq.n	8004c0a <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004be6:	4610      	mov	r0, r2
 8004be8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bea:	e00e      	b.n	8004c0a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f845 	bl	8004c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf2:	e00a      	b.n	8004c0a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f841 	bl	8004c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfa:	e006      	b.n	8004c0a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f83d 	bl	8004c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004c08:	e025      	b.n	8004c56 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0a:	bf00      	nop
    return;
 8004c0c:	e023      	b.n	8004c56 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00d      	beq.n	8004c34 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d008      	beq.n	8004c34 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d017      	beq.n	8004c5a <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
    }
    return;
 8004c32:	e012      	b.n	8004c5a <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00e      	beq.n	8004c5c <HAL_UART_IRQHandler+0x22c>
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d009      	beq.n	8004c5c <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fc14 	bl	8005476 <UART_EndTransmit_IT>
    return;
 8004c4e:	bf00      	nop
 8004c50:	e004      	b.n	8004c5c <HAL_UART_IRQHandler+0x22c>
      return;
 8004c52:	bf00      	nop
 8004c54:	e002      	b.n	8004c5c <HAL_UART_IRQHandler+0x22c>
    return;
 8004c56:	bf00      	nop
 8004c58:	e000      	b.n	8004c5c <HAL_UART_IRQHandler+0x22c>
    return;
 8004c5a:	bf00      	nop
  }

}
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	0800544b 	.word	0x0800544b

08004c68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4bb1      	ldr	r3, [pc, #708]	; (8004f84 <UART_SetConfig+0x2f4>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	6939      	ldr	r1, [r7, #16]
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a9f      	ldr	r2, [pc, #636]	; (8004f88 <UART_SetConfig+0x2f8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d121      	bne.n	8004d54 <UART_SetConfig+0xc4>
 8004d10:	4b9e      	ldr	r3, [pc, #632]	; (8004f8c <UART_SetConfig+0x2fc>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d816      	bhi.n	8004d4c <UART_SetConfig+0xbc>
 8004d1e:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <UART_SetConfig+0x94>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004d35 	.word	0x08004d35
 8004d28:	08004d41 	.word	0x08004d41
 8004d2c:	08004d3b 	.word	0x08004d3b
 8004d30:	08004d47 	.word	0x08004d47
 8004d34:	2301      	movs	r3, #1
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e151      	b.n	8004fde <UART_SetConfig+0x34e>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	77fb      	strb	r3, [r7, #31]
 8004d3e:	e14e      	b.n	8004fde <UART_SetConfig+0x34e>
 8004d40:	2304      	movs	r3, #4
 8004d42:	77fb      	strb	r3, [r7, #31]
 8004d44:	e14b      	b.n	8004fde <UART_SetConfig+0x34e>
 8004d46:	2308      	movs	r3, #8
 8004d48:	77fb      	strb	r3, [r7, #31]
 8004d4a:	e148      	b.n	8004fde <UART_SetConfig+0x34e>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	bf00      	nop
 8004d52:	e144      	b.n	8004fde <UART_SetConfig+0x34e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a8d      	ldr	r2, [pc, #564]	; (8004f90 <UART_SetConfig+0x300>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d134      	bne.n	8004dc8 <UART_SetConfig+0x138>
 8004d5e:	4b8b      	ldr	r3, [pc, #556]	; (8004f8c <UART_SetConfig+0x2fc>)
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d64:	f003 030c 	and.w	r3, r3, #12
 8004d68:	2b0c      	cmp	r3, #12
 8004d6a:	d829      	bhi.n	8004dc0 <UART_SetConfig+0x130>
 8004d6c:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <UART_SetConfig+0xe4>)
 8004d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d72:	bf00      	nop
 8004d74:	08004da9 	.word	0x08004da9
 8004d78:	08004dc1 	.word	0x08004dc1
 8004d7c:	08004dc1 	.word	0x08004dc1
 8004d80:	08004dc1 	.word	0x08004dc1
 8004d84:	08004db5 	.word	0x08004db5
 8004d88:	08004dc1 	.word	0x08004dc1
 8004d8c:	08004dc1 	.word	0x08004dc1
 8004d90:	08004dc1 	.word	0x08004dc1
 8004d94:	08004daf 	.word	0x08004daf
 8004d98:	08004dc1 	.word	0x08004dc1
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004dc1 	.word	0x08004dc1
 8004da4:	08004dbb 	.word	0x08004dbb
 8004da8:	2300      	movs	r3, #0
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e117      	b.n	8004fde <UART_SetConfig+0x34e>
 8004dae:	2302      	movs	r3, #2
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e114      	b.n	8004fde <UART_SetConfig+0x34e>
 8004db4:	2304      	movs	r3, #4
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e111      	b.n	8004fde <UART_SetConfig+0x34e>
 8004dba:	2308      	movs	r3, #8
 8004dbc:	77fb      	strb	r3, [r7, #31]
 8004dbe:	e10e      	b.n	8004fde <UART_SetConfig+0x34e>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	77fb      	strb	r3, [r7, #31]
 8004dc4:	bf00      	nop
 8004dc6:	e10a      	b.n	8004fde <UART_SetConfig+0x34e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a71      	ldr	r2, [pc, #452]	; (8004f94 <UART_SetConfig+0x304>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d120      	bne.n	8004e14 <UART_SetConfig+0x184>
 8004dd2:	4b6e      	ldr	r3, [pc, #440]	; (8004f8c <UART_SetConfig+0x2fc>)
 8004dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d00f      	beq.n	8004e00 <UART_SetConfig+0x170>
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d802      	bhi.n	8004dea <UART_SetConfig+0x15a>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <UART_SetConfig+0x164>
 8004de8:	e010      	b.n	8004e0c <UART_SetConfig+0x17c>
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d005      	beq.n	8004dfa <UART_SetConfig+0x16a>
 8004dee:	2b30      	cmp	r3, #48	; 0x30
 8004df0:	d009      	beq.n	8004e06 <UART_SetConfig+0x176>
 8004df2:	e00b      	b.n	8004e0c <UART_SetConfig+0x17c>
 8004df4:	2300      	movs	r3, #0
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e0f1      	b.n	8004fde <UART_SetConfig+0x34e>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	77fb      	strb	r3, [r7, #31]
 8004dfe:	e0ee      	b.n	8004fde <UART_SetConfig+0x34e>
 8004e00:	2304      	movs	r3, #4
 8004e02:	77fb      	strb	r3, [r7, #31]
 8004e04:	e0eb      	b.n	8004fde <UART_SetConfig+0x34e>
 8004e06:	2308      	movs	r3, #8
 8004e08:	77fb      	strb	r3, [r7, #31]
 8004e0a:	e0e8      	b.n	8004fde <UART_SetConfig+0x34e>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	77fb      	strb	r3, [r7, #31]
 8004e10:	bf00      	nop
 8004e12:	e0e4      	b.n	8004fde <UART_SetConfig+0x34e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a5f      	ldr	r2, [pc, #380]	; (8004f98 <UART_SetConfig+0x308>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d120      	bne.n	8004e60 <UART_SetConfig+0x1d0>
 8004e1e:	4b5b      	ldr	r3, [pc, #364]	; (8004f8c <UART_SetConfig+0x2fc>)
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e28:	2b40      	cmp	r3, #64	; 0x40
 8004e2a:	d00f      	beq.n	8004e4c <UART_SetConfig+0x1bc>
 8004e2c:	2b40      	cmp	r3, #64	; 0x40
 8004e2e:	d802      	bhi.n	8004e36 <UART_SetConfig+0x1a6>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <UART_SetConfig+0x1b0>
 8004e34:	e010      	b.n	8004e58 <UART_SetConfig+0x1c8>
 8004e36:	2b80      	cmp	r3, #128	; 0x80
 8004e38:	d005      	beq.n	8004e46 <UART_SetConfig+0x1b6>
 8004e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e3c:	d009      	beq.n	8004e52 <UART_SetConfig+0x1c2>
 8004e3e:	e00b      	b.n	8004e58 <UART_SetConfig+0x1c8>
 8004e40:	2300      	movs	r3, #0
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e0cb      	b.n	8004fde <UART_SetConfig+0x34e>
 8004e46:	2302      	movs	r3, #2
 8004e48:	77fb      	strb	r3, [r7, #31]
 8004e4a:	e0c8      	b.n	8004fde <UART_SetConfig+0x34e>
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	e0c5      	b.n	8004fde <UART_SetConfig+0x34e>
 8004e52:	2308      	movs	r3, #8
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e0c2      	b.n	8004fde <UART_SetConfig+0x34e>
 8004e58:	2310      	movs	r3, #16
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	bf00      	nop
 8004e5e:	e0be      	b.n	8004fde <UART_SetConfig+0x34e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a4d      	ldr	r2, [pc, #308]	; (8004f9c <UART_SetConfig+0x30c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d124      	bne.n	8004eb4 <UART_SetConfig+0x224>
 8004e6a:	4b48      	ldr	r3, [pc, #288]	; (8004f8c <UART_SetConfig+0x2fc>)
 8004e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e78:	d012      	beq.n	8004ea0 <UART_SetConfig+0x210>
 8004e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e7e:	d802      	bhi.n	8004e86 <UART_SetConfig+0x1f6>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d007      	beq.n	8004e94 <UART_SetConfig+0x204>
 8004e84:	e012      	b.n	8004eac <UART_SetConfig+0x21c>
 8004e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e8a:	d006      	beq.n	8004e9a <UART_SetConfig+0x20a>
 8004e8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e90:	d009      	beq.n	8004ea6 <UART_SetConfig+0x216>
 8004e92:	e00b      	b.n	8004eac <UART_SetConfig+0x21c>
 8004e94:	2300      	movs	r3, #0
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e0a1      	b.n	8004fde <UART_SetConfig+0x34e>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	77fb      	strb	r3, [r7, #31]
 8004e9e:	e09e      	b.n	8004fde <UART_SetConfig+0x34e>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e09b      	b.n	8004fde <UART_SetConfig+0x34e>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e098      	b.n	8004fde <UART_SetConfig+0x34e>
 8004eac:	2310      	movs	r3, #16
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	bf00      	nop
 8004eb2:	e094      	b.n	8004fde <UART_SetConfig+0x34e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a39      	ldr	r2, [pc, #228]	; (8004fa0 <UART_SetConfig+0x310>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d124      	bne.n	8004f08 <UART_SetConfig+0x278>
 8004ebe:	4b33      	ldr	r3, [pc, #204]	; (8004f8c <UART_SetConfig+0x2fc>)
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ecc:	d012      	beq.n	8004ef4 <UART_SetConfig+0x264>
 8004ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed2:	d802      	bhi.n	8004eda <UART_SetConfig+0x24a>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <UART_SetConfig+0x258>
 8004ed8:	e012      	b.n	8004f00 <UART_SetConfig+0x270>
 8004eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ede:	d006      	beq.n	8004eee <UART_SetConfig+0x25e>
 8004ee0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ee4:	d009      	beq.n	8004efa <UART_SetConfig+0x26a>
 8004ee6:	e00b      	b.n	8004f00 <UART_SetConfig+0x270>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e077      	b.n	8004fde <UART_SetConfig+0x34e>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e074      	b.n	8004fde <UART_SetConfig+0x34e>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	e071      	b.n	8004fde <UART_SetConfig+0x34e>
 8004efa:	2308      	movs	r3, #8
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e06e      	b.n	8004fde <UART_SetConfig+0x34e>
 8004f00:	2310      	movs	r3, #16
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	bf00      	nop
 8004f06:	e06a      	b.n	8004fde <UART_SetConfig+0x34e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a25      	ldr	r2, [pc, #148]	; (8004fa4 <UART_SetConfig+0x314>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d124      	bne.n	8004f5c <UART_SetConfig+0x2cc>
 8004f12:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <UART_SetConfig+0x2fc>)
 8004f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f18:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f20:	d012      	beq.n	8004f48 <UART_SetConfig+0x2b8>
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f26:	d802      	bhi.n	8004f2e <UART_SetConfig+0x29e>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <UART_SetConfig+0x2ac>
 8004f2c:	e012      	b.n	8004f54 <UART_SetConfig+0x2c4>
 8004f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f32:	d006      	beq.n	8004f42 <UART_SetConfig+0x2b2>
 8004f34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f38:	d009      	beq.n	8004f4e <UART_SetConfig+0x2be>
 8004f3a:	e00b      	b.n	8004f54 <UART_SetConfig+0x2c4>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e04d      	b.n	8004fde <UART_SetConfig+0x34e>
 8004f42:	2302      	movs	r3, #2
 8004f44:	77fb      	strb	r3, [r7, #31]
 8004f46:	e04a      	b.n	8004fde <UART_SetConfig+0x34e>
 8004f48:	2304      	movs	r3, #4
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e047      	b.n	8004fde <UART_SetConfig+0x34e>
 8004f4e:	2308      	movs	r3, #8
 8004f50:	77fb      	strb	r3, [r7, #31]
 8004f52:	e044      	b.n	8004fde <UART_SetConfig+0x34e>
 8004f54:	2310      	movs	r3, #16
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	bf00      	nop
 8004f5a:	e040      	b.n	8004fde <UART_SetConfig+0x34e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a11      	ldr	r2, [pc, #68]	; (8004fa8 <UART_SetConfig+0x318>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d139      	bne.n	8004fda <UART_SetConfig+0x34a>
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <UART_SetConfig+0x2fc>)
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f74:	d027      	beq.n	8004fc6 <UART_SetConfig+0x336>
 8004f76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f7a:	d817      	bhi.n	8004fac <UART_SetConfig+0x31c>
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01c      	beq.n	8004fba <UART_SetConfig+0x32a>
 8004f80:	e027      	b.n	8004fd2 <UART_SetConfig+0x342>
 8004f82:	bf00      	nop
 8004f84:	efff69f3 	.word	0xefff69f3
 8004f88:	40011000 	.word	0x40011000
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	40004400 	.word	0x40004400
 8004f94:	40004800 	.word	0x40004800
 8004f98:	40004c00 	.word	0x40004c00
 8004f9c:	40005000 	.word	0x40005000
 8004fa0:	40011400 	.word	0x40011400
 8004fa4:	40007800 	.word	0x40007800
 8004fa8:	40007c00 	.word	0x40007c00
 8004fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb0:	d006      	beq.n	8004fc0 <UART_SetConfig+0x330>
 8004fb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004fb6:	d009      	beq.n	8004fcc <UART_SetConfig+0x33c>
 8004fb8:	e00b      	b.n	8004fd2 <UART_SetConfig+0x342>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	77fb      	strb	r3, [r7, #31]
 8004fbe:	e00e      	b.n	8004fde <UART_SetConfig+0x34e>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	77fb      	strb	r3, [r7, #31]
 8004fc4:	e00b      	b.n	8004fde <UART_SetConfig+0x34e>
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	77fb      	strb	r3, [r7, #31]
 8004fca:	e008      	b.n	8004fde <UART_SetConfig+0x34e>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e005      	b.n	8004fde <UART_SetConfig+0x34e>
 8004fd2:	2310      	movs	r3, #16
 8004fd4:	77fb      	strb	r3, [r7, #31]
 8004fd6:	bf00      	nop
 8004fd8:	e001      	b.n	8004fde <UART_SetConfig+0x34e>
 8004fda:	2310      	movs	r3, #16
 8004fdc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe6:	d17c      	bne.n	80050e2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004fe8:	7ffb      	ldrb	r3, [r7, #31]
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d859      	bhi.n	80050a2 <UART_SetConfig+0x412>
 8004fee:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <UART_SetConfig+0x364>)
 8004ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005037 	.word	0x08005037
 8004ffc:	08005055 	.word	0x08005055
 8005000:	080050a3 	.word	0x080050a3
 8005004:	0800506d 	.word	0x0800506d
 8005008:	080050a3 	.word	0x080050a3
 800500c:	080050a3 	.word	0x080050a3
 8005010:	080050a3 	.word	0x080050a3
 8005014:	0800508b 	.word	0x0800508b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005018:	f7fd f92a 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 800501c:	4603      	mov	r3, r0
 800501e:	005a      	lsls	r2, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	441a      	add	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	b29b      	uxth	r3, r3
 8005032:	61bb      	str	r3, [r7, #24]
        break;
 8005034:	e038      	b.n	80050a8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005036:	f7fd f92f 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 800503a:	4603      	mov	r3, r0
 800503c:	005a      	lsls	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	085b      	lsrs	r3, r3, #1
 8005044:	441a      	add	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	fbb2 f3f3 	udiv	r3, r2, r3
 800504e:	b29b      	uxth	r3, r3
 8005050:	61bb      	str	r3, [r7, #24]
        break;
 8005052:	e029      	b.n	80050a8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	085a      	lsrs	r2, r3, #1
 800505a:	4b5d      	ldr	r3, [pc, #372]	; (80051d0 <UART_SetConfig+0x540>)
 800505c:	4413      	add	r3, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6852      	ldr	r2, [r2, #4]
 8005062:	fbb3 f3f2 	udiv	r3, r3, r2
 8005066:	b29b      	uxth	r3, r3
 8005068:	61bb      	str	r3, [r7, #24]
        break;
 800506a:	e01d      	b.n	80050a8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800506c:	f7fd f81c 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8005070:	4603      	mov	r3, r0
 8005072:	005a      	lsls	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	085b      	lsrs	r3, r3, #1
 800507a:	441a      	add	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	b29b      	uxth	r3, r3
 8005086:	61bb      	str	r3, [r7, #24]
        break;
 8005088:	e00e      	b.n	80050a8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	085b      	lsrs	r3, r3, #1
 8005090:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	b29b      	uxth	r3, r3
 800509e:	61bb      	str	r3, [r7, #24]
        break;
 80050a0:	e002      	b.n	80050a8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
        break;
 80050a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b0f      	cmp	r3, #15
 80050ac:	d916      	bls.n	80050dc <UART_SetConfig+0x44c>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b4:	d212      	bcs.n	80050dc <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f023 030f 	bic.w	r3, r3, #15
 80050be:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	085b      	lsrs	r3, r3, #1
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	89fb      	ldrh	r3, [r7, #14]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	89fa      	ldrh	r2, [r7, #14]
 80050d8:	60da      	str	r2, [r3, #12]
 80050da:	e06e      	b.n	80051ba <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	75fb      	strb	r3, [r7, #23]
 80050e0:	e06b      	b.n	80051ba <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80050e2:	7ffb      	ldrb	r3, [r7, #31]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d857      	bhi.n	8005198 <UART_SetConfig+0x508>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <UART_SetConfig+0x460>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005115 	.word	0x08005115
 80050f4:	08005131 	.word	0x08005131
 80050f8:	0800514d 	.word	0x0800514d
 80050fc:	08005199 	.word	0x08005199
 8005100:	08005165 	.word	0x08005165
 8005104:	08005199 	.word	0x08005199
 8005108:	08005199 	.word	0x08005199
 800510c:	08005199 	.word	0x08005199
 8005110:	08005181 	.word	0x08005181
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005114:	f7fd f8ac 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8005118:	4602      	mov	r2, r0
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	441a      	add	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	fbb2 f3f3 	udiv	r3, r2, r3
 800512a:	b29b      	uxth	r3, r3
 800512c:	61bb      	str	r3, [r7, #24]
        break;
 800512e:	e036      	b.n	800519e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005130:	f7fd f8b2 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 8005134:	4602      	mov	r2, r0
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	441a      	add	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	fbb2 f3f3 	udiv	r3, r2, r3
 8005146:	b29b      	uxth	r3, r3
 8005148:	61bb      	str	r3, [r7, #24]
        break;
 800514a:	e028      	b.n	800519e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	085a      	lsrs	r2, r3, #1
 8005152:	4b20      	ldr	r3, [pc, #128]	; (80051d4 <UART_SetConfig+0x544>)
 8005154:	4413      	add	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6852      	ldr	r2, [r2, #4]
 800515a:	fbb3 f3f2 	udiv	r3, r3, r2
 800515e:	b29b      	uxth	r3, r3
 8005160:	61bb      	str	r3, [r7, #24]
        break;
 8005162:	e01c      	b.n	800519e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005164:	f7fc ffa0 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8005168:	4602      	mov	r2, r0
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	441a      	add	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	fbb2 f3f3 	udiv	r3, r2, r3
 800517a:	b29b      	uxth	r3, r3
 800517c:	61bb      	str	r3, [r7, #24]
        break;
 800517e:	e00e      	b.n	800519e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005192:	b29b      	uxth	r3, r3
 8005194:	61bb      	str	r3, [r7, #24]
        break;
 8005196:	e002      	b.n	800519e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	75fb      	strb	r3, [r7, #23]
        break;
 800519c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2b0f      	cmp	r3, #15
 80051a2:	d908      	bls.n	80051b6 <UART_SetConfig+0x526>
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051aa:	d204      	bcs.n	80051b6 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	60da      	str	r2, [r3, #12]
 80051b4:	e001      	b.n	80051ba <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3720      	adds	r7, #32
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	01e84800 	.word	0x01e84800
 80051d4:	00f42400 	.word	0x00f42400

080051d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01a      	beq.n	80052ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052d6:	d10a      	bne.n	80052ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	605a      	str	r2, [r3, #4]
  }
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af02      	add	r7, sp, #8
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800532a:	f7fb feb5 	bl	8001098 <HAL_GetTick>
 800532e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b08      	cmp	r3, #8
 800533c:	d10e      	bne.n	800535c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800533e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f814 	bl	800537a <UART_WaitOnFlagUntilTimeout>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e00a      	b.n	8005372 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	603b      	str	r3, [r7, #0]
 8005386:	4613      	mov	r3, r2
 8005388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538a:	e02a      	b.n	80053e2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005392:	d026      	beq.n	80053e2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005394:	f7fb fe80 	bl	8001098 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d302      	bcc.n	80053aa <UART_WaitOnFlagUntilTimeout+0x30>
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d11b      	bne.n	80053e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0201 	bic.w	r2, r2, #1
 80053c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e00f      	b.n	8005402 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4013      	ands	r3, r2
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	bf0c      	ite	eq
 80053f2:	2301      	moveq	r3, #1
 80053f4:	2300      	movne	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d0c5      	beq.n	800538c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005420:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f7ff fc07 	bl	8004c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800548c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff fbe4 	bl	8004c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054b6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054bc:	2b22      	cmp	r3, #34	; 0x22
 80054be:	d13a      	bne.n	8005536 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054c8:	89bb      	ldrh	r3, [r7, #12]
 80054ca:	b2d9      	uxtb	r1, r3
 80054cc:	89fb      	ldrh	r3, [r7, #14]
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d4:	400a      	ands	r2, r1
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d121      	bne.n	8005546 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005510:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0201 	bic.w	r2, r2, #1
 8005520:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f001 fc56 	bl	8006de0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005534:	e007      	b.n	8005546 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699a      	ldr	r2, [r3, #24]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0208 	orr.w	r2, r2, #8
 8005544:	619a      	str	r2, [r3, #24]
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800555c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005562:	2b22      	cmp	r3, #34	; 0x22
 8005564:	d13a      	bne.n	80055dc <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005572:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005574:	89ba      	ldrh	r2, [r7, #12]
 8005576:	89fb      	ldrh	r3, [r7, #14]
 8005578:	4013      	ands	r3, r2
 800557a:	b29a      	uxth	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005584:	1c9a      	adds	r2, r3, #2
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005590:	b29b      	uxth	r3, r3
 8005592:	3b01      	subs	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d121      	bne.n	80055ec <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80055b6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0201 	bic.w	r2, r2, #1
 80055c6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f001 fc03 	bl	8006de0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055da:	e007      	b.n	80055ec <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0208 	orr.w	r2, r2, #8
 80055ea:	619a      	str	r2, [r3, #24]
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055f4:	b084      	sub	sp, #16
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	f107 001c 	add.w	r0, r7, #28
 8005602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	2b01      	cmp	r3, #1
 800560a:	d120      	bne.n	800564e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	4b20      	ldr	r3, [pc, #128]	; (80056a0 <USB_CoreInit+0xac>)
 800561e:	4013      	ands	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005632:	2b01      	cmp	r3, #1
 8005634:	d105      	bne.n	8005642 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fa60 	bl	8005b08 <USB_CoreReset>
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]
 800564c:	e010      	b.n	8005670 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fa54 	bl	8005b08 <USB_CoreReset>
 8005660:	4603      	mov	r3, r0
 8005662:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	2b01      	cmp	r3, #1
 8005674:	d10b      	bne.n	800568e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f043 0206 	orr.w	r2, r3, #6
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800568e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800569a:	b004      	add	sp, #16
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	ffbdffbf 	.word	0xffbdffbf

080056a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f023 0201 	bic.w	r2, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d106      	bne.n	80056f2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60da      	str	r2, [r3, #12]
 80056f0:	e00b      	b.n	800570a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d106      	bne.n	8005706 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	60da      	str	r2, [r3, #12]
 8005704:	e001      	b.n	800570a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e003      	b.n	8005712 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800570a:	2032      	movs	r0, #50	; 0x32
 800570c:	f7fb fcd0 	bl	80010b0 <HAL_Delay>

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800571c:	b084      	sub	sp, #16
 800571e:	b580      	push	{r7, lr}
 8005720:	b086      	sub	sp, #24
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800572a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	e009      	b.n	8005750 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	3340      	adds	r3, #64	; 0x40
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	2200      	movs	r2, #0
 8005748:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	3301      	adds	r3, #1
 800574e:	613b      	str	r3, [r7, #16]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b0e      	cmp	r3, #14
 8005754:	d9f2      	bls.n	800573c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005758:	2b00      	cmp	r3, #0
 800575a:	d112      	bne.n	8005782 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	e005      	b.n	800578e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005794:	461a      	mov	r2, r3
 8005796:	2300      	movs	r3, #0
 8005798:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a0:	4619      	mov	r1, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a8:	461a      	mov	r2, r3
 80057aa:	680b      	ldr	r3, [r1, #0]
 80057ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d10c      	bne.n	80057ce <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80057b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d104      	bne.n	80057c4 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057ba:	2100      	movs	r1, #0
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f971 	bl	8005aa4 <USB_SetDevSpeed>
 80057c2:	e018      	b.n	80057f6 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057c4:	2101      	movs	r1, #1
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f96c 	bl	8005aa4 <USB_SetDevSpeed>
 80057cc:	e013      	b.n	80057f6 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80057ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d10c      	bne.n	80057ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d104      	bne.n	80057e4 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057da:	2100      	movs	r1, #0
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f961 	bl	8005aa4 <USB_SetDevSpeed>
 80057e2:	e008      	b.n	80057f6 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057e4:	2101      	movs	r1, #1
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f95c 	bl	8005aa4 <USB_SetDevSpeed>
 80057ec:	e003      	b.n	80057f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057ee:	2103      	movs	r1, #3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f957 	bl	8005aa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057f6:	2110      	movs	r1, #16
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f90b 	bl	8005a14 <USB_FlushTxFifo>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f929 	bl	8005a60 <USB_FlushRxFifo>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581e:	461a      	mov	r2, r3
 8005820:	2300      	movs	r3, #0
 8005822:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582a:	461a      	mov	r2, r3
 800582c:	2300      	movs	r3, #0
 800582e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005836:	461a      	mov	r2, r3
 8005838:	2300      	movs	r3, #0
 800583a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800583c:	2300      	movs	r3, #0
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	e043      	b.n	80058ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005858:	d118      	bne.n	800588c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586c:	461a      	mov	r2, r3
 800586e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	e013      	b.n	800589e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	461a      	mov	r2, r3
 8005884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	e008      	b.n	800589e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	461a      	mov	r2, r3
 800589a:	2300      	movs	r3, #0
 800589c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058aa:	461a      	mov	r2, r3
 80058ac:	2300      	movs	r3, #0
 80058ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	461a      	mov	r2, r3
 80058be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	3301      	adds	r3, #1
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d3b7      	bcc.n	8005842 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058d2:	2300      	movs	r3, #0
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	e043      	b.n	8005960 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ee:	d118      	bne.n	8005922 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10a      	bne.n	800590c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005902:	461a      	mov	r2, r3
 8005904:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	e013      	b.n	8005934 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005918:	461a      	mov	r2, r3
 800591a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	e008      	b.n	8005934 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592e:	461a      	mov	r2, r3
 8005930:	2300      	movs	r3, #0
 8005932:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	461a      	mov	r2, r3
 8005942:	2300      	movs	r3, #0
 8005944:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	461a      	mov	r2, r3
 8005954:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005958:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	3301      	adds	r3, #1
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	429a      	cmp	r2, r3
 8005966:	d3b7      	bcc.n	80058d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800597a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	2b01      	cmp	r3, #1
 8005980:	d110      	bne.n	80059a4 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005988:	461a      	mov	r2, r3
 800598a:	4b1e      	ldr	r3, [pc, #120]	; (8005a04 <USB_DevInit+0x2e8>)
 800598c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599c:	4619      	mov	r1, r3
 800599e:	4b1a      	ldr	r3, [pc, #104]	; (8005a08 <USB_DevInit+0x2ec>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80059b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d105      	bne.n	80059c4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	f043 0210 	orr.w	r2, r3, #16
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699a      	ldr	r2, [r3, #24]
 80059c8:	4b10      	ldr	r3, [pc, #64]	; (8005a0c <USB_DevInit+0x2f0>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f043 0208 	orr.w	r2, r3, #8
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d105      	bne.n	80059f4 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699a      	ldr	r2, [r3, #24]
 80059ec:	4b08      	ldr	r3, [pc, #32]	; (8005a10 <USB_DevInit+0x2f4>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a00:	b004      	add	sp, #16
 8005a02:	4770      	bx	lr
 8005a04:	00800100 	.word	0x00800100
 8005a08:	00010003 	.word	0x00010003
 8005a0c:	803c3800 	.word	0x803c3800
 8005a10:	40000004 	.word	0x40000004

08005a14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	019b      	lsls	r3, r3, #6
 8005a26:	f043 0220 	orr.w	r2, r3, #32
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3301      	adds	r3, #1
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4a09      	ldr	r2, [pc, #36]	; (8005a5c <USB_FlushTxFifo+0x48>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d901      	bls.n	8005a40 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e006      	b.n	8005a4e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	d0f0      	beq.n	8005a2e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	00030d40 	.word	0x00030d40

08005a60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2210      	movs	r2, #16
 8005a70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3301      	adds	r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <USB_FlushRxFifo+0x40>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d901      	bls.n	8005a84 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e006      	b.n	8005a92 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b10      	cmp	r3, #16
 8005a8e:	d0f0      	beq.n	8005a72 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	00030d40 	.word	0x00030d40

08005aa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	68f9      	ldr	r1, [r7, #12]
 8005ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af0:	f043 0302 	orr.w	r3, r3, #2
 8005af4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005af6:	2003      	movs	r0, #3
 8005af8:	f7fb fada 	bl	80010b0 <HAL_Delay>

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3301      	adds	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4a13      	ldr	r2, [pc, #76]	; (8005b6c <USB_CoreReset+0x64>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d901      	bls.n	8005b26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e01b      	b.n	8005b5e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	daf2      	bge.n	8005b14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f043 0201 	orr.w	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3301      	adds	r3, #1
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4a09      	ldr	r2, [pc, #36]	; (8005b6c <USB_CoreReset+0x64>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d901      	bls.n	8005b50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e006      	b.n	8005b5e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d0f0      	beq.n	8005b3e <USB_CoreReset+0x36>

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	00030d40 	.word	0x00030d40

08005b70 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607b      	str	r3, [r7, #4]
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	73fb      	strb	r3, [r7, #15]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 facc 	bl	8006120 <null_ptr_check>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8005b8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d11c      	bne.n	8005bce <bmp280_get_regs+0x5e>
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d019      	beq.n	8005bce <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	789b      	ldrb	r3, [r3, #2]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d103      	bne.n	8005baa <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ba8:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685c      	ldr	r4, [r3, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	7858      	ldrb	r0, [r3, #1]
 8005bb2:	7bbb      	ldrb	r3, [r7, #14]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	7bf9      	ldrb	r1, [r7, #15]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	47a0      	blx	r4
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8005bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d004      	beq.n	8005bd2 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8005bc8:	23fc      	movs	r3, #252	; 0xfc
 8005bca:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8005bcc:	e001      	b.n	8005bd2 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8005bce:	23ff      	movs	r3, #255	; 0xff
 8005bd0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8005bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd90      	pop	{r4, r7, pc}

08005bde <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8005bde:	b590      	push	{r4, r7, lr}
 8005be0:	b089      	sub	sp, #36	; 0x24
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	603b      	str	r3, [r7, #0]
 8005bea:	4613      	mov	r3, r2
 8005bec:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d901      	bls.n	8005bf8 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8005bf4:	2304      	movs	r3, #4
 8005bf6:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8005bf8:	6838      	ldr	r0, [r7, #0]
 8005bfa:	f000 fa91 	bl	8006120 <null_ptr_check>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8005c02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d14d      	bne.n	8005ca6 <bmp280_set_regs+0xc8>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d04a      	beq.n	8005ca6 <bmp280_set_regs+0xc8>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d047      	beq.n	8005ca6 <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 8005c16:	79fb      	ldrb	r3, [r7, #7]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d041      	beq.n	8005ca0 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	789b      	ldrb	r3, [r3, #2]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d114      	bne.n	8005c54 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	76fb      	strb	r3, [r7, #27]
 8005c2e:	e00d      	b.n	8005c4c <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8005c30:	7efb      	ldrb	r3, [r7, #27]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4413      	add	r3, r2
 8005c36:	781a      	ldrb	r2, [r3, #0]
 8005c38:	7efb      	ldrb	r3, [r7, #27]
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	440b      	add	r3, r1
 8005c3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005c46:	7efb      	ldrb	r3, [r7, #27]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	76fb      	strb	r3, [r7, #27]
 8005c4c:	7efa      	ldrb	r2, [r7, #27]
 8005c4e:	79fb      	ldrb	r3, [r7, #7]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d3ed      	bcc.n	8005c30 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8005c54:	79fb      	ldrb	r3, [r7, #7]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d90d      	bls.n	8005c76 <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	f107 0110 	add.w	r1, r7, #16
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fa7c 	bl	8006160 <interleave_data>
                temp_len = ((len * 2) - 1);
 8005c68:	79fb      	ldrb	r3, [r7, #7]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	83bb      	strh	r3, [r7, #28]
 8005c74:	e001      	b.n	8005c7a <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 8005c76:	79fb      	ldrb	r3, [r7, #7]
 8005c78:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	689c      	ldr	r4, [r3, #8]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	7858      	ldrb	r0, [r3, #1]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	7819      	ldrb	r1, [r3, #0]
 8005c86:	8bbb      	ldrh	r3, [r7, #28]
 8005c88:	f107 0210 	add.w	r2, r7, #16
 8005c8c:	47a0      	blx	r4
 8005c8e:	4603      	mov	r3, r0
 8005c90:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8005c92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 8005c9a:	23fc      	movs	r3, #252	; 0xfc
 8005c9c:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8005c9e:	e005      	b.n	8005cac <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8005ca0:	23fd      	movs	r3, #253	; 0xfd
 8005ca2:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8005ca4:	e002      	b.n	8005cac <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8005ca6:	23ff      	movs	r3, #255	; 0xff
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e000      	b.n	8005cae <bmp280_set_regs+0xd0>
        if (len != 0)
 8005cac:	bf00      	nop
    }

    return rslt;
 8005cae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3724      	adds	r7, #36	; 0x24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd90      	pop	{r4, r7, pc}

08005cba <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8005cc2:	23e0      	movs	r3, #224	; 0xe0
 8005cc4:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8005cc6:	23b6      	movs	r3, #182	; 0xb6
 8005cc8:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fa28 	bl	8006120 <null_ptr_check>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8005cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10d      	bne.n	8005cf8 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8005cdc:	f107 010d 	add.w	r1, r7, #13
 8005ce0:	f107 000e 	add.w	r0, r7, #14
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f7ff ff79 	bl	8005bde <bmp280_set_regs>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	2002      	movs	r0, #2
 8005cf6:	4798      	blx	r3
    }

    return rslt;
 8005cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8005d0c:	2305      	movs	r3, #5
 8005d0e:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fa05 	bl	8006120 <null_ptr_check>
 8005d16:	4603      	mov	r3, r0
 8005d18:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8005d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d150      	bne.n	8005dc4 <bmp280_init+0xc0>
    {
        while (try_count)
 8005d22:	e02d      	b.n	8005d80 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	20d0      	movs	r0, #208	; 0xd0
 8005d2c:	f7ff ff20 	bl	8005b70 <bmp280_get_regs>
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8005d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d11a      	bne.n	8005d72 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8005d40:	2b56      	cmp	r3, #86	; 0x56
 8005d42:	d007      	beq.n	8005d54 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b57      	cmp	r3, #87	; 0x57
 8005d4a:	d003      	beq.n	8005d54 <bmp280_init+0x50>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b58      	cmp	r3, #88	; 0x58
 8005d52:	d10e      	bne.n	8005d72 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff ffb0 	bl	8005cba <bmp280_soft_reset>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 8005d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d110      	bne.n	8005d88 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa25 	bl	80061b6 <get_calib_param>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8005d70:	e00a      	b.n	8005d88 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	200a      	movs	r0, #10
 8005d78:	4798      	blx	r3
            --try_count;
 8005d7a:	7bbb      	ldrb	r3, [r7, #14]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8005d80:	7bbb      	ldrb	r3, [r7, #14]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1ce      	bne.n	8005d24 <bmp280_init+0x20>
 8005d86:	e000      	b.n	8005d8a <bmp280_init+0x86>
                break;
 8005d88:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 8005d8a:	7bbb      	ldrb	r3, [r7, #14]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8005d90:	23fe      	movs	r3, #254	; 0xfe
 8005d92:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8005d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d113      	bne.n	8005dc4 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8005dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8005dda:	2300      	movs	r3, #0
 8005ddc:	733b      	strb	r3, [r7, #12]
 8005dde:	2300      	movs	r3, #0
 8005de0:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8005de2:	6838      	ldr	r0, [r7, #0]
 8005de4:	f000 f99c 	bl	8006120 <null_ptr_check>
 8005de8:	4603      	mov	r3, r0
 8005dea:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8005dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d137      	bne.n	8005e64 <bmp280_get_config+0x94>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d034      	beq.n	8005e64 <bmp280_get_config+0x94>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8005dfa:	f107 010c 	add.w	r1, r7, #12
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2202      	movs	r2, #2
 8005e02:	20f4      	movs	r0, #244	; 0xf4
 8005e04:	f7ff feb4 	bl	8005b70 <bmp280_get_regs>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8005e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d129      	bne.n	8005e68 <bmp280_get_config+0x98>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8005e14:	7b3b      	ldrb	r3, [r7, #12]
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 8005e1e:	7b3b      	ldrb	r3, [r7, #12]
 8005e20:	109b      	asrs	r3, r3, #2
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 8005e2e:	7b7b      	ldrb	r3, [r7, #13]
 8005e30:	095b      	lsrs	r3, r3, #5
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 8005e38:	7b7b      	ldrb	r3, [r7, #13]
 8005e3a:	109b      	asrs	r3, r3, #2
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 8005e48:	7b7b      	ldrb	r3, [r7, #13]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	332c      	adds	r3, #44	; 0x2c
 8005e5a:	6810      	ldr	r0, [r2, #0]
 8005e5c:	6018      	str	r0, [r3, #0]
 8005e5e:	7912      	ldrb	r2, [r2, #4]
 8005e60:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 8005e62:	e001      	b.n	8005e68 <bmp280_get_config+0x98>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8005e64:	23ff      	movs	r3, #255	; 0xff
 8005e66:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	2000      	movs	r0, #0
 8005e84:	f000 fa34 	bl	80062f0 <conf_sensor>
 8005e88:	4603      	mov	r3, r0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	4603      	mov	r3, r0
 8005e9a:	6039      	str	r1, [r7, #0]
 8005e9c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8005e9e:	6838      	ldr	r0, [r7, #0]
 8005ea0:	f000 f93e 	bl	8006120 <null_ptr_check>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8005ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d109      	bne.n	8005ec4 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fa18 	bl	80062f0 <conf_sensor>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8005eda:	f107 0308 	add.w	r3, r7, #8
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev);
 8005ee4:	6838      	ldr	r0, [r7, #0]
 8005ee6:	f000 f91b 	bl	8006120 <null_ptr_check>
 8005eea:	4603      	mov	r3, r0
 8005eec:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8005eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d133      	bne.n	8005f5e <bmp280_get_uncomp_data+0x8e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d030      	beq.n	8005f5e <bmp280_get_uncomp_data+0x8e>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8005efc:	f107 0108 	add.w	r1, r7, #8
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2206      	movs	r2, #6
 8005f04:	20f7      	movs	r0, #247	; 0xf7
 8005f06:	f7ff fe33 	bl	8005b70 <bmp280_get_regs>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8005f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d120      	bne.n	8005f58 <bmp280_get_uncomp_data+0x88>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 8005f16:	7a3b      	ldrb	r3, [r7, #8]
 8005f18:	031a      	lsls	r2, r3, #12
 8005f1a:	7a7b      	ldrb	r3, [r7, #9]
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	7aba      	ldrb	r2, [r7, #10]
 8005f22:	0912      	lsrs	r2, r2, #4
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 8005f2c:	7afb      	ldrb	r3, [r7, #11]
 8005f2e:	031a      	lsls	r2, r3, #12
 8005f30:	7b3b      	ldrb	r3, [r7, #12]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	4313      	orrs	r3, r2
 8005f36:	7b7a      	ldrb	r2, [r7, #13]
 8005f38:	0912      	lsrs	r2, r2, #4
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	f000 fa89 	bl	8006464 <st_check_boundaries>
 8005f52:	4603      	mov	r3, r0
 8005f54:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8005f56:	e004      	b.n	8005f62 <bmp280_get_uncomp_data+0x92>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 8005f58:	23f3      	movs	r3, #243	; 0xf3
 8005f5a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8005f5c:	e001      	b.n	8005f62 <bmp280_get_uncomp_data+0x92>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8005f5e:	23ff      	movs	r3, #255	; 0xff
 8005f60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 8005f70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f74:	b08a      	sub	sp, #40	; 0x28
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f8ce 	bl	8006120 <null_ptr_check>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8005f8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 80ac 	bne.w	80060ec <bmp280_get_comp_temp_double+0x17c>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8005f94:	68b8      	ldr	r0, [r7, #8]
 8005f96:	f7fa fae5 	bl	8000564 <__aeabi_i2d>
 8005f9a:	f04f 0200 	mov.w	r2, #0
 8005f9e:	4b5c      	ldr	r3, [pc, #368]	; (8006110 <bmp280_get_comp_temp_double+0x1a0>)
 8005fa0:	f7fa fc74 	bl	800088c <__aeabi_ddiv>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	4625      	mov	r5, r4
 8005faa:	461c      	mov	r4, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	8a1b      	ldrh	r3, [r3, #16]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fa fac7 	bl	8000544 <__aeabi_ui2d>
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	4b56      	ldr	r3, [pc, #344]	; (8006114 <bmp280_get_comp_temp_double+0x1a4>)
 8005fbc:	f7fa fc66 	bl	800088c <__aeabi_ddiv>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f7fa f97e 	bl	80002c8 <__aeabi_dsub>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	4625      	mov	r5, r4
 8005fd2:	461c      	mov	r4, r3
               ((double) dev->calib_param.dig_t2);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fa fac2 	bl	8000564 <__aeabi_i2d>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	f7fa fb26 	bl	8000638 <__aeabi_dmul>
 8005fec:	4603      	mov	r3, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8005ff4:	68b8      	ldr	r0, [r7, #8]
 8005ff6:	f7fa fab5 	bl	8000564 <__aeabi_i2d>
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8006002:	f7fa fc43 	bl	800088c <__aeabi_ddiv>
 8006006:	4603      	mov	r3, r0
 8006008:	460c      	mov	r4, r1
 800600a:	4625      	mov	r5, r4
 800600c:	461c      	mov	r4, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	8a1b      	ldrh	r3, [r3, #16]
 8006012:	4618      	mov	r0, r3
 8006014:	f7fa fa96 	bl	8000544 <__aeabi_ui2d>
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	4b3e      	ldr	r3, [pc, #248]	; (8006118 <bmp280_get_comp_temp_double+0x1a8>)
 800601e:	f7fa fc35 	bl	800088c <__aeabi_ddiv>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4620      	mov	r0, r4
 8006028:	4629      	mov	r1, r5
 800602a:	f7fa f94d 	bl	80002c8 <__aeabi_dsub>
 800602e:	4603      	mov	r3, r0
 8006030:	460c      	mov	r4, r1
 8006032:	4625      	mov	r5, r4
 8006034:	461c      	mov	r4, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8006036:	68b8      	ldr	r0, [r7, #8]
 8006038:	f7fa fa94 	bl	8000564 <__aeabi_i2d>
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8006044:	f7fa fc22 	bl	800088c <__aeabi_ddiv>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	4690      	mov	r8, r2
 800604e:	4699      	mov	r9, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8a1b      	ldrh	r3, [r3, #16]
 8006054:	4618      	mov	r0, r3
 8006056:	f7fa fa75 	bl	8000544 <__aeabi_ui2d>
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	4b2e      	ldr	r3, [pc, #184]	; (8006118 <bmp280_get_comp_temp_double+0x1a8>)
 8006060:	f7fa fc14 	bl	800088c <__aeabi_ddiv>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4640      	mov	r0, r8
 800606a:	4649      	mov	r1, r9
 800606c:	f7fa f92c 	bl	80002c8 <__aeabi_dsub>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8006074:	4620      	mov	r0, r4
 8006076:	4629      	mov	r1, r5
 8006078:	f7fa fade 	bl	8000638 <__aeabi_dmul>
 800607c:	4603      	mov	r3, r0
 800607e:	460c      	mov	r4, r1
 8006080:	4625      	mov	r5, r4
 8006082:	461c      	mov	r4, r3
            ((double) dev->calib_param.dig_t3);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800608a:	4618      	mov	r0, r3
 800608c:	f7fa fa6a 	bl	8000564 <__aeabi_i2d>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
        var2 =
 8006094:	4620      	mov	r0, r4
 8006096:	4629      	mov	r1, r5
 8006098:	f7fa face 	bl	8000638 <__aeabi_dmul>
 800609c:	4603      	mov	r3, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	e9c7 3404 	strd	r3, r4, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80060a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80060ac:	f7fa f90e 	bl	80002cc <__adddf3>
 80060b0:	4603      	mov	r3, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	4618      	mov	r0, r3
 80060b6:	4621      	mov	r1, r4
 80060b8:	f7fa fd6e 	bl	8000b98 <__aeabi_d2iz>
 80060bc:	4602      	mov	r2, r0
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 80060c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80060ca:	f7fa f8ff 	bl	80002cc <__adddf3>
 80060ce:	4603      	mov	r3, r0
 80060d0:	460c      	mov	r4, r1
 80060d2:	4618      	mov	r0, r3
 80060d4:	4621      	mov	r1, r4
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	4b10      	ldr	r3, [pc, #64]	; (800611c <bmp280_get_comp_temp_double+0x1ac>)
 80060dc:	f7fa fbd6 	bl	800088c <__aeabi_ddiv>
 80060e0:	4603      	mov	r3, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	e9c2 3400 	strd	r3, r4, [r2]
 80060ea:	e009      	b.n	8006100 <bmp280_get_comp_temp_double+0x190>
    }
    else
    {
        *temperature = 0;
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	f04f 0400 	mov.w	r4, #0
 80060f6:	e9c2 3400 	strd	r3, r4, [r2]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 80060fa:	23ef      	movs	r3, #239	; 0xef
 80060fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8006100:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006104:	4618      	mov	r0, r3
 8006106:	3728      	adds	r7, #40	; 0x28
 8006108:	46bd      	mov	sp, r7
 800610a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800610e:	bf00      	nop
 8006110:	40d00000 	.word	0x40d00000
 8006114:	40900000 	.word	0x40900000
 8006118:	40c00000 	.word	0x40c00000
 800611c:	40b40000 	.word	0x40b40000

08006120 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00b      	beq.n	8006146 <null_ptr_check+0x26>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <null_ptr_check+0x26>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <null_ptr_check+0x26>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8006146:	23ff      	movs	r3, #255	; 0xff
 8006148:	73fb      	strb	r3, [r7, #15]
 800614a:	e001      	b.n	8006150 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006150:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 800616e:	2301      	movs	r3, #1
 8006170:	75fb      	strb	r3, [r7, #23]
 8006172:	e016      	b.n	80061a2 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	441a      	add	r2, r3
 800617a:	7dfb      	ldrb	r3, [r7, #23]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	3b01      	subs	r3, #1
 8006180:	68b9      	ldr	r1, [r7, #8]
 8006182:	440b      	add	r3, r1
 8006184:	7812      	ldrb	r2, [r2, #0]
 8006186:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8006188:	7dfb      	ldrb	r3, [r7, #23]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	441a      	add	r2, r3
 800618e:	7dfb      	ldrb	r3, [r7, #23]
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	4619      	mov	r1, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	440b      	add	r3, r1
 8006198:	7812      	ldrb	r2, [r2, #0]
 800619a:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	3301      	adds	r3, #1
 80061a0:	75fb      	strb	r3, [r7, #23]
 80061a2:	7dfa      	ldrb	r2, [r7, #23]
 80061a4:	78fb      	ldrb	r3, [r7, #3]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d3e4      	bcc.n	8006174 <interleave_data+0x14>
    }
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b08a      	sub	sp, #40	; 0x28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 80061be:	f107 030c 	add.w	r3, r7, #12
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	605a      	str	r2, [r3, #4]
 80061c8:	609a      	str	r2, [r3, #8]
 80061ca:	60da      	str	r2, [r3, #12]
 80061cc:	611a      	str	r2, [r3, #16]
 80061ce:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ffa5 	bl	8006120 <null_ptr_check>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 80061dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d17f      	bne.n	80062e4 <get_calib_param+0x12e>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 80061e4:	f107 010c 	add.w	r1, r7, #12
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2218      	movs	r2, #24
 80061ec:	2088      	movs	r0, #136	; 0x88
 80061ee:	f7ff fcbf 	bl	8005b70 <bmp280_get_regs>
 80061f2:	4603      	mov	r3, r0
 80061f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 80061f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d171      	bne.n	80062e4 <get_calib_param+0x12e>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8006200:	7b7b      	ldrb	r3, [r7, #13]
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	b21a      	sxth	r2, r3
 8006206:	7b3b      	ldrb	r3, [r7, #12]
 8006208:	b21b      	sxth	r3, r3
 800620a:	4313      	orrs	r3, r2
 800620c:	b21b      	sxth	r3, r3
 800620e:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	b21a      	sxth	r2, r3
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	b21b      	sxth	r3, r3
 800621e:	4313      	orrs	r3, r2
 8006220:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8006226:	7c7b      	ldrb	r3, [r7, #17]
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	b21a      	sxth	r2, r3
 800622c:	7c3b      	ldrb	r3, [r7, #16]
 800622e:	b21b      	sxth	r3, r3
 8006230:	4313      	orrs	r3, r2
 8006232:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8006238:	7cfb      	ldrb	r3, [r7, #19]
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	b21a      	sxth	r2, r3
 800623e:	7cbb      	ldrb	r3, [r7, #18]
 8006240:	b21b      	sxth	r3, r3
 8006242:	4313      	orrs	r3, r2
 8006244:	b21b      	sxth	r3, r3
 8006246:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 800624c:	7d7b      	ldrb	r3, [r7, #21]
 800624e:	021b      	lsls	r3, r3, #8
 8006250:	b21a      	sxth	r2, r3
 8006252:	7d3b      	ldrb	r3, [r7, #20]
 8006254:	b21b      	sxth	r3, r3
 8006256:	4313      	orrs	r3, r2
 8006258:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 800625e:	7dfb      	ldrb	r3, [r7, #23]
 8006260:	021b      	lsls	r3, r3, #8
 8006262:	b21a      	sxth	r2, r3
 8006264:	7dbb      	ldrb	r3, [r7, #22]
 8006266:	b21b      	sxth	r3, r3
 8006268:	4313      	orrs	r3, r2
 800626a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8006270:	7e7b      	ldrb	r3, [r7, #25]
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	b21a      	sxth	r2, r3
 8006276:	7e3b      	ldrb	r3, [r7, #24]
 8006278:	b21b      	sxth	r3, r3
 800627a:	4313      	orrs	r3, r2
 800627c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8006282:	7efb      	ldrb	r3, [r7, #27]
 8006284:	021b      	lsls	r3, r3, #8
 8006286:	b21a      	sxth	r2, r3
 8006288:	7ebb      	ldrb	r3, [r7, #26]
 800628a:	b21b      	sxth	r3, r3
 800628c:	4313      	orrs	r3, r2
 800628e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8006294:	7f7b      	ldrb	r3, [r7, #29]
 8006296:	021b      	lsls	r3, r3, #8
 8006298:	b21a      	sxth	r2, r3
 800629a:	7f3b      	ldrb	r3, [r7, #28]
 800629c:	b21b      	sxth	r3, r3
 800629e:	4313      	orrs	r3, r2
 80062a0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 80062a6:	7ffb      	ldrb	r3, [r7, #31]
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	b21a      	sxth	r2, r3
 80062ac:	7fbb      	ldrb	r3, [r7, #30]
 80062ae:	b21b      	sxth	r3, r3
 80062b0:	4313      	orrs	r3, r2
 80062b2:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 80062b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	b21a      	sxth	r2, r3
 80062c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80062c4:	b21b      	sxth	r3, r3
 80062c6:	4313      	orrs	r3, r2
 80062c8:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 80062ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062d2:	021b      	lsls	r3, r3, #8
 80062d4:	b21a      	sxth	r2, r3
 80062d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80062da:	b21b      	sxth	r3, r3
 80062dc:	4313      	orrs	r3, r2
 80062de:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 80062e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3728      	adds	r7, #40	; 0x28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	4603      	mov	r3, r0
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80062fe:	2300      	movs	r3, #0
 8006300:	753b      	strb	r3, [r7, #20]
 8006302:	2300      	movs	r3, #0
 8006304:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8006306:	4b56      	ldr	r3, [pc, #344]	; (8006460 <conf_sensor+0x170>)
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff ff07 	bl	8006120 <null_ptr_check>
 8006312:	4603      	mov	r3, r0
 8006314:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8006316:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f040 8095 	bne.w	800644a <conf_sensor+0x15a>
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 8091 	beq.w	800644a <conf_sensor+0x15a>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8006328:	f107 0114 	add.w	r1, r7, #20
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	20f4      	movs	r0, #244	; 0xf4
 8006332:	f7ff fc1d 	bl	8005b70 <bmp280_get_regs>
 8006336:	4603      	mov	r3, r0
 8006338:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 800633a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 8086 	bne.w	8006450 <conf_sensor+0x160>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff fcb8 	bl	8005cba <bmp280_soft_reset>
 800634a:	4603      	mov	r3, r0
 800634c:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 800634e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d17c      	bne.n	8006450 <conf_sensor+0x160>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8006356:	7d3b      	ldrb	r3, [r7, #20]
 8006358:	b25b      	sxtb	r3, r3
 800635a:	f003 031f 	and.w	r3, r3, #31
 800635e:	b25a      	sxtb	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	015b      	lsls	r3, r3, #5
 8006366:	b25b      	sxtb	r3, r3
 8006368:	4313      	orrs	r3, r2
 800636a:	b25b      	sxtb	r3, r3
 800636c:	b2db      	uxtb	r3, r3
 800636e:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8006370:	7d3b      	ldrb	r3, [r7, #20]
 8006372:	b25b      	sxtb	r3, r3
 8006374:	f023 031c 	bic.w	r3, r3, #28
 8006378:	b25a      	sxtb	r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	785b      	ldrb	r3, [r3, #1]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	b25b      	sxtb	r3, r3
 8006382:	f003 031c 	and.w	r3, r3, #28
 8006386:	b25b      	sxtb	r3, r3
 8006388:	4313      	orrs	r3, r2
 800638a:	b25b      	sxtb	r3, r3
 800638c:	b2db      	uxtb	r3, r3
 800638e:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8006390:	7d7b      	ldrb	r3, [r7, #21]
 8006392:	b25b      	sxtb	r3, r3
 8006394:	f003 031f 	and.w	r3, r3, #31
 8006398:	b25a      	sxtb	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	789b      	ldrb	r3, [r3, #2]
 800639e:	015b      	lsls	r3, r3, #5
 80063a0:	b25b      	sxtb	r3, r3
 80063a2:	4313      	orrs	r3, r2
 80063a4:	b25b      	sxtb	r3, r3
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 80063aa:	7d7b      	ldrb	r3, [r7, #21]
 80063ac:	b25b      	sxtb	r3, r3
 80063ae:	f023 031c 	bic.w	r3, r3, #28
 80063b2:	b25a      	sxtb	r2, r3
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	78db      	ldrb	r3, [r3, #3]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	b25b      	sxtb	r3, r3
 80063bc:	f003 031c 	and.w	r3, r3, #28
 80063c0:	b25b      	sxtb	r3, r3
 80063c2:	4313      	orrs	r3, r2
 80063c4:	b25b      	sxtb	r3, r3
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 80063ca:	7d7b      	ldrb	r3, [r7, #21]
 80063cc:	b25b      	sxtb	r3, r3
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	b25a      	sxtb	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	791b      	ldrb	r3, [r3, #4]
 80063d8:	b25b      	sxtb	r3, r3
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	b25b      	sxtb	r3, r3
 80063e0:	4313      	orrs	r3, r2
 80063e2:	b25b      	sxtb	r3, r3
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 80063e8:	f107 0114 	add.w	r1, r7, #20
 80063ec:	f107 0010 	add.w	r0, r7, #16
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f7ff fbf3 	bl	8005bde <bmp280_set_regs>
 80063f8:	4603      	mov	r3, r0
 80063fa:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 80063fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d125      	bne.n	8006450 <conf_sensor+0x160>
                {
                    dev->conf = *conf;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	332c      	adds	r3, #44	; 0x2c
 800640a:	6810      	ldr	r0, [r2, #0]
 800640c:	6018      	str	r0, [r3, #0]
 800640e:	7912      	ldrb	r2, [r2, #4]
 8006410:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01b      	beq.n	8006450 <conf_sensor+0x160>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8006418:	7d3b      	ldrb	r3, [r7, #20]
 800641a:	b25b      	sxtb	r3, r3
 800641c:	f023 0303 	bic.w	r3, r3, #3
 8006420:	b25a      	sxtb	r2, r3
 8006422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	b25b      	sxtb	r3, r3
 800642c:	4313      	orrs	r3, r2
 800642e:	b25b      	sxtb	r3, r3
 8006430:	b2db      	uxtb	r3, r3
 8006432:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8006434:	f107 0114 	add.w	r1, r7, #20
 8006438:	f107 0010 	add.w	r0, r7, #16
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f7ff fbcd 	bl	8005bde <bmp280_set_regs>
 8006444:	4603      	mov	r3, r0
 8006446:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8006448:	e002      	b.n	8006450 <conf_sensor+0x160>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800644a:	23ff      	movs	r3, #255	; 0xff
 800644c:	75fb      	strb	r3, [r7, #23]
 800644e:	e000      	b.n	8006452 <conf_sensor+0x162>
        if (rslt == BMP280_OK)
 8006450:	bf00      	nop
    }

    return rslt;
 8006452:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	08009778 	.word	0x08009778

08006464 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800646e:	2300      	movs	r3, #0
 8006470:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	dd03      	ble.n	8006480 <st_check_boundaries+0x1c>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <st_check_boundaries+0x6c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	dd09      	ble.n	8006494 <st_check_boundaries+0x30>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	dd03      	ble.n	800648e <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	4a11      	ldr	r2, [pc, #68]	; (80064d0 <st_check_boundaries+0x6c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	dd02      	ble.n	8006494 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 800648e:	23f4      	movs	r3, #244	; 0xf4
 8006490:	73fb      	strb	r3, [r7, #15]
 8006492:	e015      	b.n	80064c0 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	dd03      	ble.n	80064a2 <st_check_boundaries+0x3e>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a0c      	ldr	r2, [pc, #48]	; (80064d0 <st_check_boundaries+0x6c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	dd02      	ble.n	80064a8 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 80064a2:	23f6      	movs	r3, #246	; 0xf6
 80064a4:	73fb      	strb	r3, [r7, #15]
 80064a6:	e00b      	b.n	80064c0 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	dd03      	ble.n	80064b6 <st_check_boundaries+0x52>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	4a07      	ldr	r2, [pc, #28]	; (80064d0 <st_check_boundaries+0x6c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	dd02      	ble.n	80064bc <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 80064b6:	23f5      	movs	r3, #245	; 0xf5
 80064b8:	73fb      	strb	r3, [r7, #15]
 80064ba:	e001      	b.n	80064c0 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80064c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	000fffef 	.word	0x000fffef

080064d4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08e      	sub	sp, #56	; 0x38
 80064d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064de:	2200      	movs	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	605a      	str	r2, [r3, #4]
 80064e4:	609a      	str	r2, [r3, #8]
 80064e6:	60da      	str	r2, [r3, #12]
 80064e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80064ea:	4ba5      	ldr	r3, [pc, #660]	; (8006780 <MX_GPIO_Init+0x2ac>)
 80064ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ee:	4aa4      	ldr	r2, [pc, #656]	; (8006780 <MX_GPIO_Init+0x2ac>)
 80064f0:	f043 0310 	orr.w	r3, r3, #16
 80064f4:	6313      	str	r3, [r2, #48]	; 0x30
 80064f6:	4ba2      	ldr	r3, [pc, #648]	; (8006780 <MX_GPIO_Init+0x2ac>)
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	623b      	str	r3, [r7, #32]
 8006500:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006502:	4b9f      	ldr	r3, [pc, #636]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	4a9e      	ldr	r2, [pc, #632]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006508:	f043 0304 	orr.w	r3, r3, #4
 800650c:	6313      	str	r3, [r2, #48]	; 0x30
 800650e:	4b9c      	ldr	r3, [pc, #624]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	f003 0304 	and.w	r3, r3, #4
 8006516:	61fb      	str	r3, [r7, #28]
 8006518:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800651a:	4b99      	ldr	r3, [pc, #612]	; (8006780 <MX_GPIO_Init+0x2ac>)
 800651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651e:	4a98      	ldr	r2, [pc, #608]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006520:	f043 0320 	orr.w	r3, r3, #32
 8006524:	6313      	str	r3, [r2, #48]	; 0x30
 8006526:	4b96      	ldr	r3, [pc, #600]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	61bb      	str	r3, [r7, #24]
 8006530:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006532:	4b93      	ldr	r3, [pc, #588]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	4a92      	ldr	r2, [pc, #584]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653c:	6313      	str	r3, [r2, #48]	; 0x30
 800653e:	4b90      	ldr	r3, [pc, #576]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800654a:	4b8d      	ldr	r3, [pc, #564]	; (8006780 <MX_GPIO_Init+0x2ac>)
 800654c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654e:	4a8c      	ldr	r2, [pc, #560]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006550:	f043 0301 	orr.w	r3, r3, #1
 8006554:	6313      	str	r3, [r2, #48]	; 0x30
 8006556:	4b8a      	ldr	r3, [pc, #552]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006562:	4b87      	ldr	r3, [pc, #540]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	4a86      	ldr	r2, [pc, #536]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006568:	f043 0302 	orr.w	r3, r3, #2
 800656c:	6313      	str	r3, [r2, #48]	; 0x30
 800656e:	4b84      	ldr	r3, [pc, #528]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800657a:	4b81      	ldr	r3, [pc, #516]	; (8006780 <MX_GPIO_Init+0x2ac>)
 800657c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657e:	4a80      	ldr	r2, [pc, #512]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006580:	f043 0308 	orr.w	r3, r3, #8
 8006584:	6313      	str	r3, [r2, #48]	; 0x30
 8006586:	4b7e      	ldr	r3, [pc, #504]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	60bb      	str	r3, [r7, #8]
 8006590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006592:	4b7b      	ldr	r3, [pc, #492]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	4a7a      	ldr	r2, [pc, #488]	; (8006780 <MX_GPIO_Init+0x2ac>)
 8006598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800659c:	6313      	str	r3, [r2, #48]	; 0x30
 800659e:	4b78      	ldr	r3, [pc, #480]	; (8006780 <MX_GPIO_Init+0x2ac>)
 80065a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a6:	607b      	str	r3, [r7, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80065aa:	2200      	movs	r2, #0
 80065ac:	2190      	movs	r1, #144	; 0x90
 80065ae:	4875      	ldr	r0, [pc, #468]	; (8006784 <MX_GPIO_Init+0x2b0>)
 80065b0:	f7fb f87e 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_LED1_GPIO_Port, EXT_LED1_Pin, GPIO_PIN_RESET);
 80065b4:	2200      	movs	r2, #0
 80065b6:	2108      	movs	r1, #8
 80065b8:	4873      	ldr	r0, [pc, #460]	; (8006788 <MX_GPIO_Init+0x2b4>)
 80065ba:	f7fb f879 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80065be:	2200      	movs	r2, #0
 80065c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80065c4:	4871      	ldr	r0, [pc, #452]	; (800678c <MX_GPIO_Init+0x2b8>)
 80065c6:	f7fb f873 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80065ca:	2200      	movs	r2, #0
 80065cc:	2140      	movs	r1, #64	; 0x40
 80065ce:	4870      	ldr	r0, [pc, #448]	; (8006790 <MX_GPIO_Init+0x2bc>)
 80065d0:	f7fb f86e 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|LED_B_Pin;
 80065d4:	2390      	movs	r3, #144	; 0x90
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065d8:	2301      	movs	r3, #1
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065dc:	2300      	movs	r3, #0
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065e0:	2300      	movs	r3, #0
 80065e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065e8:	4619      	mov	r1, r3
 80065ea:	4866      	ldr	r0, [pc, #408]	; (8006784 <MX_GPIO_Init+0x2b0>)
 80065ec:	f7fa feb6 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|EXT_BTN2_Pin;
 80065f0:	f242 0308 	movw	r3, #8200	; 0x2008
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80065f6:	4b67      	ldr	r3, [pc, #412]	; (8006794 <MX_GPIO_Init+0x2c0>)
 80065f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006602:	4619      	mov	r1, r3
 8006604:	4864      	ldr	r0, [pc, #400]	; (8006798 <MX_GPIO_Init+0x2c4>)
 8006606:	f7fa fea9 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_DT_Pin;
 800660a:	2320      	movs	r3, #32
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800660e:	2300      	movs	r3, #0
 8006610:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006612:	2300      	movs	r3, #0
 8006614:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENCODER_DT_GPIO_Port, &GPIO_InitStruct);
 8006616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800661a:	4619      	mov	r1, r3
 800661c:	485f      	ldr	r0, [pc, #380]	; (800679c <MX_GPIO_Init+0x2c8>)
 800661e:	f7fa fe9d 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_CLK_Pin;
 8006622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006628:	4b5a      	ldr	r3, [pc, #360]	; (8006794 <MX_GPIO_Init+0x2c0>)
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662c:	2300      	movs	r3, #0
 800662e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENCODER_CLK_GPIO_Port, &GPIO_InitStruct);
 8006630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006634:	4619      	mov	r1, r3
 8006636:	4859      	ldr	r0, [pc, #356]	; (800679c <MX_GPIO_Init+0x2c8>)
 8006638:	f7fa fe90 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_BTN1_Pin;
 800663c:	2301      	movs	r3, #1
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006640:	4b57      	ldr	r3, [pc, #348]	; (80067a0 <MX_GPIO_Init+0x2cc>)
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006644:	2300      	movs	r3, #0
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXT_BTN1_GPIO_Port, &GPIO_InitStruct);
 8006648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800664c:	4619      	mov	r1, r3
 800664e:	4852      	ldr	r0, [pc, #328]	; (8006798 <MX_GPIO_Init+0x2c4>)
 8006650:	f7fa fe84 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006654:	2332      	movs	r3, #50	; 0x32
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006658:	2302      	movs	r3, #2
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665c:	2300      	movs	r3, #0
 800665e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006660:	2303      	movs	r3, #3
 8006662:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006664:	230b      	movs	r3, #11
 8006666:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800666c:	4619      	mov	r1, r3
 800666e:	484a      	ldr	r0, [pc, #296]	; (8006798 <MX_GPIO_Init+0x2c4>)
 8006670:	f7fa fe74 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006674:	2386      	movs	r3, #134	; 0x86
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006678:	2302      	movs	r3, #2
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800667c:	2300      	movs	r3, #0
 800667e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006680:	2303      	movs	r3, #3
 8006682:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006684:	230b      	movs	r3, #11
 8006686:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800668c:	4619      	mov	r1, r3
 800668e:	483e      	ldr	r0, [pc, #248]	; (8006788 <MX_GPIO_Init+0x2b4>)
 8006690:	f7fa fe64 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_LED1_Pin;
 8006694:	2308      	movs	r3, #8
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006698:	2301      	movs	r3, #1
 800669a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669c:	2300      	movs	r3, #0
 800669e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066a0:	2300      	movs	r3, #0
 80066a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EXT_LED1_GPIO_Port, &GPIO_InitStruct);
 80066a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066a8:	4619      	mov	r1, r3
 80066aa:	4837      	ldr	r0, [pc, #220]	; (8006788 <MX_GPIO_Init+0x2b4>)
 80066ac:	f7fa fe56 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80066b0:	f244 0381 	movw	r3, #16513	; 0x4081
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066b6:	2301      	movs	r3, #1
 80066b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066be:	2300      	movs	r3, #0
 80066c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066c6:	4619      	mov	r1, r3
 80066c8:	4830      	ldr	r0, [pc, #192]	; (800678c <MX_GPIO_Init+0x2b8>)
 80066ca:	f7fa fe47 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80066ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066d4:	2302      	movs	r3, #2
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066dc:	2303      	movs	r3, #3
 80066de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80066e0:	230b      	movs	r3, #11
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80066e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066e8:	4619      	mov	r1, r3
 80066ea:	4828      	ldr	r0, [pc, #160]	; (800678c <MX_GPIO_Init+0x2b8>)
 80066ec:	f7fa fe36 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80066f0:	2340      	movs	r3, #64	; 0x40
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066f4:	2301      	movs	r3, #1
 80066f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f8:	2300      	movs	r3, #0
 80066fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066fc:	2300      	movs	r3, #0
 80066fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8006700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006704:	4619      	mov	r1, r3
 8006706:	4822      	ldr	r0, [pc, #136]	; (8006790 <MX_GPIO_Init+0x2bc>)
 8006708:	f7fa fe28 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800670c:	2380      	movs	r3, #128	; 0x80
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006710:	2300      	movs	r3, #0
 8006712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006714:	2300      	movs	r3, #0
 8006716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800671c:	4619      	mov	r1, r3
 800671e:	481c      	ldr	r0, [pc, #112]	; (8006790 <MX_GPIO_Init+0x2bc>)
 8006720:	f7fa fe1c 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006724:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800672a:	2302      	movs	r3, #2
 800672c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672e:	2300      	movs	r3, #0
 8006730:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006732:	2303      	movs	r3, #3
 8006734:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006736:	230b      	movs	r3, #11
 8006738:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800673a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800673e:	4619      	mov	r1, r3
 8006740:	4813      	ldr	r0, [pc, #76]	; (8006790 <MX_GPIO_Init+0x2bc>)
 8006742:	f7fa fe0b 	bl	800135c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006746:	2200      	movs	r2, #0
 8006748:	2100      	movs	r1, #0
 800674a:	2006      	movs	r0, #6
 800674c:	f7fa fdad 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006750:	2006      	movs	r0, #6
 8006752:	f7fa fdc6 	bl	80012e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8006756:	2200      	movs	r2, #0
 8006758:	2100      	movs	r1, #0
 800675a:	2009      	movs	r0, #9
 800675c:	f7fa fda5 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006760:	2009      	movs	r0, #9
 8006762:	f7fa fdbe 	bl	80012e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006766:	2200      	movs	r2, #0
 8006768:	2100      	movs	r1, #0
 800676a:	2028      	movs	r0, #40	; 0x28
 800676c:	f7fa fd9d 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006770:	2028      	movs	r0, #40	; 0x28
 8006772:	f7fa fdb6 	bl	80012e2 <HAL_NVIC_EnableIRQ>

}
 8006776:	bf00      	nop
 8006778:	3738      	adds	r7, #56	; 0x38
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	40023800 	.word	0x40023800
 8006784:	40021000 	.word	0x40021000
 8006788:	40020000 	.word	0x40020000
 800678c:	40020400 	.word	0x40020400
 8006790:	40021800 	.word	0x40021800
 8006794:	10110000 	.word	0x10110000
 8006798:	40020800 	.word	0x40020800
 800679c:	40021400 	.word	0x40021400
 80067a0:	10210000 	.word	0x10210000

080067a4 <spi_reg_read>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int8_t spi_reg_read(uint8_t cs, uint8_t reg_addr , uint8_t *reg_data , uint16_t length)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b094      	sub	sp, #80	; 0x50
 80067a8:	af02      	add	r7, sp, #8
 80067aa:	603a      	str	r2, [r7, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	4603      	mov	r3, r0
 80067b0:	71fb      	strb	r3, [r7, #7]
 80067b2:	460b      	mov	r3, r1
 80067b4:	71bb      	strb	r3, [r7, #6]
 80067b6:	4613      	mov	r3, r2
 80067b8:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  int32_t iError = BMP280_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t txarray[SPI_BUFFER_LEN] = {0,};
 80067c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	605a      	str	r2, [r3, #4]
 80067ce:	609a      	str	r2, [r3, #8]
 80067d0:	60da      	str	r2, [r3, #12]
 80067d2:	611a      	str	r2, [r3, #16]
 80067d4:	615a      	str	r2, [r3, #20]
 80067d6:	619a      	str	r2, [r3, #24]
  uint8_t rxarray[SPI_BUFFER_LEN] = {0,};
 80067d8:	f107 0308 	add.w	r3, r7, #8
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	605a      	str	r2, [r3, #4]
 80067e2:	609a      	str	r2, [r3, #8]
 80067e4:	60da      	str	r2, [r3, #12]
 80067e6:	611a      	str	r2, [r3, #16]
 80067e8:	615a      	str	r2, [r3, #20]
 80067ea:	619a      	str	r2, [r3, #24]
  uint8_t stringpos;
 txarray[0] = reg_addr;
 80067ec:	79bb      	ldrb	r3, [r7, #6]
 80067ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 HAL_GPIO_WritePin( SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_RESET );
 80067f2:	2200      	movs	r2, #0
 80067f4:	2110      	movs	r1, #16
 80067f6:	4824      	ldr	r0, [pc, #144]	; (8006888 <spi_reg_read+0xe4>)
 80067f8:	f7fa ff5a 	bl	80016b0 <HAL_GPIO_WritePin>
 status = HAL_SPI_TransmitReceive( &hspi4 , (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+1, 5);
 80067fc:	88bb      	ldrh	r3, [r7, #4]
 80067fe:	3301      	adds	r3, #1
 8006800:	b298      	uxth	r0, r3
 8006802:	f107 0208 	add.w	r2, r7, #8
 8006806:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800680a:	2305      	movs	r3, #5
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	4603      	mov	r3, r0
 8006810:	481e      	ldr	r0, [pc, #120]	; (800688c <spi_reg_read+0xe8>)
 8006812:	f7fc fb3b 	bl	8002e8c <HAL_SPI_TransmitReceive>
 8006816:	4603      	mov	r3, r0
 8006818:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 while( hspi4.State == HAL_SPI_STATE_BUSY ) {};
 800681c:	bf00      	nop
 800681e:	4b1b      	ldr	r3, [pc, #108]	; (800688c <spi_reg_read+0xe8>)
 8006820:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d0f9      	beq.n	800681e <spi_reg_read+0x7a>
 HAL_GPIO_WritePin( SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_SET );
 800682a:	2201      	movs	r2, #1
 800682c:	2110      	movs	r1, #16
 800682e:	4816      	ldr	r0, [pc, #88]	; (8006888 <spi_reg_read+0xe4>)
 8006830:	f7fa ff3e 	bl	80016b0 <HAL_GPIO_WritePin>
 for (stringpos = 0; stringpos < length; stringpos++)
 8006834:	2300      	movs	r3, #0
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683a:	e011      	b.n	8006860 <spi_reg_read+0xbc>
 {
	 *(reg_data + stringpos) = rxarray[stringpos + BMP280_DATA_INDEX];
 800683c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	440b      	add	r3, r1
 800684a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800684e:	440a      	add	r2, r1
 8006850:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8006854:	701a      	strb	r2, [r3, #0]
 for (stringpos = 0; stringpos < length; stringpos++)
 8006856:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800685a:	3301      	adds	r3, #1
 800685c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006860:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006864:	b29b      	uxth	r3, r3
 8006866:	88ba      	ldrh	r2, [r7, #4]
 8006868:	429a      	cmp	r2, r3
 800686a:	d8e7      	bhi.n	800683c <spi_reg_read+0x98>
 }
 if (status != HAL_OK)
 800686c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <spi_reg_read+0xd6>
 {
	 iError = (-1);
 8006874:	f04f 33ff 	mov.w	r3, #4294967295
 8006878:	647b      	str	r3, [r7, #68]	; 0x44
 }
 return (int8_t)iError;
 800687a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800687c:	b25b      	sxtb	r3, r3
}
 800687e:	4618      	mov	r0, r3
 8006880:	3748      	adds	r7, #72	; 0x48
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	40021000 	.word	0x40021000
 800688c:	2000024c 	.word	0x2000024c

08006890 <spi_reg_write>:
int8_t spi_reg_write(uint8_t cs, uint8_t reg_addr , uint8_t *reg_data , uint16_t length)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b092      	sub	sp, #72	; 0x48
 8006894:	af00      	add	r7, sp, #0
 8006896:	603a      	str	r2, [r7, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	4603      	mov	r3, r0
 800689c:	71fb      	strb	r3, [r7, #7]
 800689e:	460b      	mov	r3, r1
 80068a0:	71bb      	strb	r3, [r7, #6]
 80068a2:	4613      	mov	r3, r2
 80068a4:	80bb      	strh	r3, [r7, #4]
HAL_StatusTypeDef status = HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
int32_t iError = BMP280_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	647b      	str	r3, [r7, #68]	; 0x44
uint8_t txarray[SPI_BUFFER_LEN * BMP280_ADDRESS_INDEX];
uint8_t stringpos;
txarray[0] = reg_addr;
 80068b0:	79bb      	ldrb	r3, [r7, #6]
 80068b2:	723b      	strb	r3, [r7, #8]
for (stringpos = 0; stringpos < length; stringpos++)
 80068b4:	2300      	movs	r3, #0
 80068b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ba:	e011      	b.n	80068e0 <spi_reg_write+0x50>
{
	txarray[stringpos+BMP280_DATA_INDEX] = reg_data[stringpos];
 80068bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	441a      	add	r2, r3
 80068c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80068c8:	3301      	adds	r3, #1
 80068ca:	7812      	ldrb	r2, [r2, #0]
 80068cc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80068d0:	440b      	add	r3, r1
 80068d2:	f803 2c40 	strb.w	r2, [r3, #-64]
for (stringpos = 0; stringpos < length; stringpos++)
 80068d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80068da:	3301      	adds	r3, #1
 80068dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	88ba      	ldrh	r2, [r7, #4]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d8e7      	bhi.n	80068bc <spi_reg_write+0x2c>
}
 HAL_GPIO_WritePin( SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_RESET );
 80068ec:	2200      	movs	r2, #0
 80068ee:	2110      	movs	r1, #16
 80068f0:	4813      	ldr	r0, [pc, #76]	; (8006940 <spi_reg_write+0xb0>)
 80068f2:	f7fa fedd 	bl	80016b0 <HAL_GPIO_WritePin>
 status = HAL_SPI_Transmit( &hspi4 , (uint8_t*)(&txarray), length*2, 100);
 80068f6:	88bb      	ldrh	r3, [r7, #4]
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	f107 0108 	add.w	r1, r7, #8
 8006900:	2364      	movs	r3, #100	; 0x64
 8006902:	4810      	ldr	r0, [pc, #64]	; (8006944 <spi_reg_write+0xb4>)
 8006904:	f7fc f95c 	bl	8002bc0 <HAL_SPI_Transmit>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 while( hspi4.State == HAL_SPI_STATE_BUSY ) {};
 800690e:	bf00      	nop
 8006910:	4b0c      	ldr	r3, [pc, #48]	; (8006944 <spi_reg_write+0xb4>)
 8006912:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d0f9      	beq.n	8006910 <spi_reg_write+0x80>
 HAL_GPIO_WritePin( SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_SET );
 800691c:	2201      	movs	r2, #1
 800691e:	2110      	movs	r1, #16
 8006920:	4807      	ldr	r0, [pc, #28]	; (8006940 <spi_reg_write+0xb0>)
 8006922:	f7fa fec5 	bl	80016b0 <HAL_GPIO_WritePin>
if (status != HAL_OK)
 8006926:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <spi_reg_write+0xa4>
{  iError = (-1);
 800692e:	f04f 33ff 	mov.w	r3, #4294967295
 8006932:	647b      	str	r3, [r7, #68]	; 0x44

}
return (int8_t)iError;
 8006934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006936:	b25b      	sxtb	r3, r3
}
 8006938:	4618      	mov	r0, r3
 800693a:	3748      	adds	r7, #72	; 0x48
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	40021000 	.word	0x40021000
 8006944:	2000024c 	.word	0x2000024c

08006948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006948:	b590      	push	{r4, r7, lr}
 800694a:	b0a3      	sub	sp, #140	; 0x8c
 800694c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PID.Kp = PID_PARAM_KP;        /* Proporcional */
 800694e:	4bc8      	ldr	r3, [pc, #800]	; (8006c70 <main+0x328>)
 8006950:	4ac8      	ldr	r2, [pc, #800]	; (8006c74 <main+0x32c>)
 8006952:	619a      	str	r2, [r3, #24]
	PID.Ki = PID_PARAM_KI;        /* Integral */
 8006954:	4bc6      	ldr	r3, [pc, #792]	; (8006c70 <main+0x328>)
 8006956:	f04f 0200 	mov.w	r2, #0
 800695a:	61da      	str	r2, [r3, #28]
	PID.Kd = PID_PARAM_KD;        /* Derivative */
 800695c:	4bc4      	ldr	r3, [pc, #784]	; (8006c70 <main+0x328>)
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	621a      	str	r2, [r3, #32]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006964:	f7fa fb46 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006968:	f000 f9aa 	bl	8006cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800696c:	f7ff fdb2 	bl	80064d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8006970:	f000 fd56 	bl	8007420 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8006974:	f000 fdd0 	bl	8007518 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 8006978:	f000 fade 	bl	8006f38 <MX_SPI4_Init>
  MX_TIM3_Init();
 800697c:	f000 fc52 	bl	8007224 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  bmp.delay_ms = HAL_Delay;
 8006980:	4bbd      	ldr	r3, [pc, #756]	; (8006c78 <main+0x330>)
 8006982:	653b      	str	r3, [r7, #80]	; 0x50
  bmp.dev_id = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  bmp.intf = BMP280_SPI_INTF;
 800698a:	2300      	movs	r3, #0
 800698c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  bmp.read = spi_reg_read;
 8006990:	4bba      	ldr	r3, [pc, #744]	; (8006c7c <main+0x334>)
 8006992:	64bb      	str	r3, [r7, #72]	; 0x48
  bmp.write = spi_reg_write;
 8006994:	4bba      	ldr	r3, [pc, #744]	; (8006c80 <main+0x338>)
 8006996:	64fb      	str	r3, [r7, #76]	; 0x4c
  rslt = bmp280_init(&bmp);
 8006998:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff f9b1 	bl	8005d04 <bmp280_init>
 80069a2:	4603      	mov	r3, r0
 80069a4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  rslt = bmp280_get_config(&conf, &bmp);
 80069a8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80069ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80069b0:	4611      	mov	r1, r2
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff fa0c 	bl	8005dd0 <bmp280_get_config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  conf.filter = BMP280_FILTER_COEFF_2;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  conf.os_temp = BMP280_OS_4X;
 80069c4:	2303      	movs	r3, #3
 80069c6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  conf.os_pres = BMP280_OS_4X;
 80069ca:	2303      	movs	r3, #3
 80069cc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  conf.odr = BMP280_ODR_1000_MS;
 80069d0:	2305      	movs	r3, #5
 80069d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  rslt = bmp280_set_config(&conf, &bmp);
 80069d6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80069da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80069de:	4611      	mov	r1, r2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff fa47 	bl	8005e74 <bmp280_set_config>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
 80069ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80069f0:	4619      	mov	r1, r3
 80069f2:	2003      	movs	r0, #3
 80069f4:	f7ff fa4d 	bl	8005e92 <bmp280_set_power_mode>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Initialize PID system, float32_t format */
  arm_pid_init_f32(&PID, 1);
 80069fe:	2101      	movs	r1, #1
 8006a00:	489b      	ldr	r0, [pc, #620]	; (8006c70 <main+0x328>)
 8006a02:	f7fa fac1 	bl	8000f88 <arm_pid_init_f32>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);// grzalka PC7
 8006a06:	2104      	movs	r1, #4
 8006a08:	489e      	ldr	r0, [pc, #632]	; (8006c84 <main+0x33c>)
 8006a0a:	f7fc feef 	bl	80037ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);// wiatrak PA6
 8006a0e:	2100      	movs	r1, #0
 8006a10:	489c      	ldr	r0, [pc, #624]	; (8006c84 <main+0x33c>)
 8006a12:	f7fc feeb 	bl	80037ec <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, msg, Sizemsg);
 8006a16:	4b9c      	ldr	r3, [pc, #624]	; (8006c88 <main+0x340>)
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	499b      	ldr	r1, [pc, #620]	; (8006c8c <main+0x344>)
 8006a1e:	489c      	ldr	r0, [pc, #624]	; (8006c90 <main+0x348>)
 8006a20:	f7fd ff64 	bl	80048ec <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
 8006a24:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8006a28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff fa4e 	bl	8005ed0 <bmp280_get_uncomp_data>
 8006a34:	4603      	mov	r3, r0
 8006a36:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

   /* Getting the compensated temperature as floating point value */
  rslt = bmp280_get_comp_temp_double(&temp, ucomp_data.uncomp_temp, &bmp);
 8006a3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a3c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8006a40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff fa93 	bl	8005f70 <bmp280_get_comp_temp_double>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  TEMP_CURRENT = temp;
 8006a50:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8006a54:	4618      	mov	r0, r3
 8006a56:	4621      	mov	r1, r4
 8006a58:	f7fa f8c6 	bl	8000be8 <__aeabi_d2f>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	4b8d      	ldr	r3, [pc, #564]	; (8006c94 <main+0x34c>)
 8006a60:	601a      	str	r2, [r3, #0]
  if(flag == 0){
 8006a62:	4b8d      	ldr	r3, [pc, #564]	; (8006c98 <main+0x350>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d103      	bne.n	8006a72 <main+0x12a>
	  TEMP_WANT = TEMP_CURRENT;
 8006a6a:	4b8a      	ldr	r3, [pc, #552]	; (8006c94 <main+0x34c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a8b      	ldr	r2, [pc, #556]	; (8006c9c <main+0x354>)
 8006a70:	6013      	str	r3, [r2, #0]
  }


  size = sprintf(buffer, "Temp:  %f [C]\n\r", TEMP_CURRENT);
 8006a72:	4b88      	ldr	r3, [pc, #544]	; (8006c94 <main+0x34c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7f9 fd86 	bl	8000588 <__aeabi_f2d>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	4638      	mov	r0, r7
 8006a82:	461a      	mov	r2, r3
 8006a84:	4623      	mov	r3, r4
 8006a86:	4986      	ldr	r1, [pc, #536]	; (8006ca0 <main+0x358>)
 8006a88:	f001 fa88 	bl	8007f9c <siprintf>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, size, 200);
 8006a92:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	4639      	mov	r1, r7
 8006a9a:	23c8      	movs	r3, #200	; 0xc8
 8006a9c:	487c      	ldr	r0, [pc, #496]	; (8006c90 <main+0x348>)
 8006a9e:	f7fd fe93 	bl	80047c8 <HAL_UART_Transmit>

  /* Liczymy uchyb */
  pid_uchyb = TEMP_WANT - TEMP_CURRENT;
 8006aa2:	4b7e      	ldr	r3, [pc, #504]	; (8006c9c <main+0x354>)
 8006aa4:	ed93 7a00 	vldr	s14, [r3]
 8006aa8:	4b7a      	ldr	r3, [pc, #488]	; (8006c94 <main+0x34c>)
 8006aaa:	edd3 7a00 	vldr	s15, [r3]
 8006aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ab2:	4b7c      	ldr	r3, [pc, #496]	; (8006ca4 <main+0x35c>)
 8006ab4:	edc3 7a00 	vstr	s15, [r3]
  /* Output data will be returned, we will use it as duty cycle parameter */
  duty = arm_pid_f32(&PID, TEMP_WANT - TEMP_CURRENT);
 8006ab8:	4b78      	ldr	r3, [pc, #480]	; (8006c9c <main+0x354>)
 8006aba:	ed93 7a00 	vldr	s14, [r3]
 8006abe:	4b75      	ldr	r3, [pc, #468]	; (8006c94 <main+0x34c>)
 8006ac0:	edd3 7a00 	vldr	s15, [r3]
 8006ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ac8:	4b69      	ldr	r3, [pc, #420]	; (8006c70 <main+0x328>)
 8006aca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ace:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8006ad2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ad6:	ed93 7a00 	vldr	s14, [r3]
 8006ada:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006ade:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ae6:	edd3 6a01 	vldr	s13, [r3, #4]
 8006aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006aee:	edd3 7a03 	vldr	s15, [r3, #12]
 8006af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8006af6:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006afa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006afe:	edd3 6a02 	vldr	s13, [r3, #8]
 8006b02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b06:	edd3 7a04 	vldr	s15, [r3, #16]
 8006b0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b16:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8006b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b1e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    /* Update state */
    S->state[1] = S->state[0];
 8006b22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b26:	68da      	ldr	r2, [r3, #12]
 8006b28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b2c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8006b2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006b34:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8006b36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b3c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8006b3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b40:	4a59      	ldr	r2, [pc, #356]	; (8006ca8 <main+0x360>)
 8006b42:	6013      	str	r3, [r2, #0]



  /* Check overflow, duty cycle in percent */
  if (duty > 100) {
 8006b44:	4b58      	ldr	r3, [pc, #352]	; (8006ca8 <main+0x360>)
 8006b46:	edd3 7a00 	vldr	s15, [r3]
 8006b4a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8006cac <main+0x364>
 8006b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b56:	dd03      	ble.n	8006b60 <main+0x218>
     duty = 100;
 8006b58:	4b53      	ldr	r3, [pc, #332]	; (8006ca8 <main+0x360>)
 8006b5a:	4a55      	ldr	r2, [pc, #340]	; (8006cb0 <main+0x368>)
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e00c      	b.n	8006b7a <main+0x232>
  } else if (duty < -100) {
 8006b60:	4b51      	ldr	r3, [pc, #324]	; (8006ca8 <main+0x360>)
 8006b62:	edd3 7a00 	vldr	s15, [r3]
 8006b66:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8006cb4 <main+0x36c>
 8006b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b72:	d502      	bpl.n	8006b7a <main+0x232>
     duty = -100;
 8006b74:	4b4c      	ldr	r3, [pc, #304]	; (8006ca8 <main+0x360>)
 8006b76:	4a50      	ldr	r2, [pc, #320]	; (8006cb8 <main+0x370>)
 8006b78:	601a      	str	r2, [r3, #0]
  }
  /* Set PWM duty cycle for DC FAN to cool down sensor for "TEMP_CURRENT" */
  if(TEMP_WANT > TEMP_CURRENT){
 8006b7a:	4b48      	ldr	r3, [pc, #288]	; (8006c9c <main+0x354>)
 8006b7c:	ed93 7a00 	vldr	s14, [r3]
 8006b80:	4b44      	ldr	r3, [pc, #272]	; (8006c94 <main+0x34c>)
 8006b82:	edd3 7a00 	vldr	s15, [r3]
 8006b86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b8e:	dd12      	ble.n	8006bb6 <main+0x26e>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);//CH1 WIATRAK
 8006b90:	4b3c      	ldr	r3, [pc, #240]	; (8006c84 <main+0x33c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2200      	movs	r2, #0
 8006b96:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 10*duty);
 8006b98:	4b43      	ldr	r3, [pc, #268]	; (8006ca8 <main+0x360>)
 8006b9a:	edd3 7a00 	vldr	s15, [r3]
 8006b9e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ba6:	4b37      	ldr	r3, [pc, #220]	; (8006c84 <main+0x33c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bae:	ee17 2a90 	vmov	r2, s15
 8006bb2:	639a      	str	r2, [r3, #56]	; 0x38
 8006bb4:	e01c      	b.n	8006bf0 <main+0x2a8>
  }
  else if(TEMP_WANT < TEMP_CURRENT){
 8006bb6:	4b39      	ldr	r3, [pc, #228]	; (8006c9c <main+0x354>)
 8006bb8:	ed93 7a00 	vldr	s14, [r3]
 8006bbc:	4b35      	ldr	r3, [pc, #212]	; (8006c94 <main+0x34c>)
 8006bbe:	edd3 7a00 	vldr	s15, [r3]
 8006bc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bca:	d511      	bpl.n	8006bf0 <main+0x2a8>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, -10*duty);
 8006bcc:	4b36      	ldr	r3, [pc, #216]	; (8006ca8 <main+0x360>)
 8006bce:	edd3 7a00 	vldr	s15, [r3]
 8006bd2:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bda:	4b2a      	ldr	r3, [pc, #168]	; (8006c84 <main+0x33c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006be2:	ee17 2a90 	vmov	r2, s15
 8006be6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8006be8:	4b26      	ldr	r3, [pc, #152]	; (8006c84 <main+0x33c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2200      	movs	r2, #0
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38
 }

  if(abs(pid_uchyb) < 0.2){
 8006bf0:	4b2c      	ldr	r3, [pc, #176]	; (8006ca4 <main+0x35c>)
 8006bf2:	edd3 7a00 	vldr	s15, [r3]
 8006bf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bfa:	ee17 3a90 	vmov	r3, s15
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	bfb8      	it	lt
 8006c02:	425b      	neglt	r3, r3
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7f9 fcad 	bl	8000564 <__aeabi_i2d>
 8006c0a:	a317      	add	r3, pc, #92	; (adr r3, 8006c68 <main+0x320>)
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	f7f9 ff84 	bl	8000b1c <__aeabi_dcmplt>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d005      	beq.n	8006c26 <main+0x2de>
	  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 1);
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	2180      	movs	r1, #128	; 0x80
 8006c1e:	4827      	ldr	r0, [pc, #156]	; (8006cbc <main+0x374>)
 8006c20:	f7fa fd46 	bl	80016b0 <HAL_GPIO_WritePin>
 8006c24:	e019      	b.n	8006c5a <main+0x312>
  }
  else if(abs(pid_uchyb) > 0.2){
 8006c26:	4b1f      	ldr	r3, [pc, #124]	; (8006ca4 <main+0x35c>)
 8006c28:	edd3 7a00 	vldr	s15, [r3]
 8006c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c30:	ee17 3a90 	vmov	r3, s15
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	bfb8      	it	lt
 8006c38:	425b      	neglt	r3, r3
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7f9 fc92 	bl	8000564 <__aeabi_i2d>
 8006c40:	a309      	add	r3, pc, #36	; (adr r3, 8006c68 <main+0x320>)
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f7f9 ff87 	bl	8000b58 <__aeabi_dcmpgt>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d004      	beq.n	8006c5a <main+0x312>
	  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 0);
 8006c50:	2200      	movs	r2, #0
 8006c52:	2180      	movs	r1, #128	; 0x80
 8006c54:	4819      	ldr	r0, [pc, #100]	; (8006cbc <main+0x374>)
 8006c56:	f7fa fd2b 	bl	80016b0 <HAL_GPIO_WritePin>
  }
  /* Sleep time between measurements = BMP280_ODR_1000_MS */
  bmp.delay_ms(1000);
 8006c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c60:	4798      	blx	r3
  rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
 8006c62:	e6df      	b.n	8006a24 <main+0xdc>
 8006c64:	f3af 8000 	nop.w
 8006c68:	9999999a 	.word	0x9999999a
 8006c6c:	3fc99999 	.word	0x3fc99999
 8006c70:	20000210 	.word	0x20000210
 8006c74:	43af0000 	.word	0x43af0000
 8006c78:	080010b1 	.word	0x080010b1
 8006c7c:	080067a5 	.word	0x080067a5
 8006c80:	08006891 	.word	0x08006891
 8006c84:	200002b0 	.word	0x200002b0
 8006c88:	20000006 	.word	0x20000006
 8006c8c:	2000023c 	.word	0x2000023c
 8006c90:	200002f0 	.word	0x200002f0
 8006c94:	20000244 	.word	0x20000244
 8006c98:	200001fc 	.word	0x200001fc
 8006c9c:	20000238 	.word	0x20000238
 8006ca0:	0800977c 	.word	0x0800977c
 8006ca4:	20000234 	.word	0x20000234
 8006ca8:	200001f8 	.word	0x200001f8
 8006cac:	42c80000 	.word	0x42c80000
 8006cb0:	42c80000 	.word	0x42c80000
 8006cb4:	c2c80000 	.word	0xc2c80000
 8006cb8:	c2c80000 	.word	0xc2c80000
 8006cbc:	40021000 	.word	0x40021000

08006cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b0b4      	sub	sp, #208	; 0xd0
 8006cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006cc6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006cca:	2230      	movs	r2, #48	; 0x30
 8006ccc:	2100      	movs	r1, #0
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fd00 	bl	80076d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006cd4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	605a      	str	r2, [r3, #4]
 8006cde:	609a      	str	r2, [r3, #8]
 8006ce0:	60da      	str	r2, [r3, #12]
 8006ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006ce4:	f107 0308 	add.w	r3, r7, #8
 8006ce8:	2284      	movs	r2, #132	; 0x84
 8006cea:	2100      	movs	r1, #0
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 fcf1 	bl	80076d4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8006cf2:	f7fa fe71 	bl	80019d8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006cf6:	4b37      	ldr	r3, [pc, #220]	; (8006dd4 <SystemClock_Config+0x114>)
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	4a36      	ldr	r2, [pc, #216]	; (8006dd4 <SystemClock_Config+0x114>)
 8006cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d00:	6413      	str	r3, [r2, #64]	; 0x40
 8006d02:	4b34      	ldr	r3, [pc, #208]	; (8006dd4 <SystemClock_Config+0x114>)
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d0a:	607b      	str	r3, [r7, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006d0e:	4b32      	ldr	r3, [pc, #200]	; (8006dd8 <SystemClock_Config+0x118>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006d16:	4a30      	ldr	r2, [pc, #192]	; (8006dd8 <SystemClock_Config+0x118>)
 8006d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	4b2e      	ldr	r3, [pc, #184]	; (8006dd8 <SystemClock_Config+0x118>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006d30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8006d34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006d3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006d42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006d46:	2304      	movs	r3, #4
 8006d48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8006d4c:	2348      	movs	r3, #72	; 0x48
 8006d4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006d52:	2302      	movs	r3, #2
 8006d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fa fe48 	bl	80019f8 <HAL_RCC_OscConfig>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8006d6e:	f000 f8c5 	bl	8006efc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d72:	230f      	movs	r3, #15
 8006d74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d78:	2302      	movs	r3, #2
 8006d7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006d92:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006d96:	2102      	movs	r1, #2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fb f89d 	bl	8001ed8 <HAL_RCC_ClockConfig>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8006da4:	f000 f8aa 	bl	8006efc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8006da8:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <SystemClock_Config+0x11c>)
 8006daa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006dac:	2300      	movs	r3, #0
 8006dae:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006db0:	2300      	movs	r3, #0
 8006db2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006db6:	f107 0308 	add.w	r3, r7, #8
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fb fa80 	bl	80022c0 <HAL_RCCEx_PeriphCLKConfig>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8006dc6:	f000 f899 	bl	8006efc <Error_Handler>
  }
}
 8006dca:	bf00      	nop
 8006dcc:	37d0      	adds	r7, #208	; 0xd0
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	40007000 	.word	0x40007000
 8006ddc:	00200100 	.word	0x00200100

08006de0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//odbieranie zadanej temp
{
 8006de0:	b5b0      	push	{r4, r5, r7, lr}
 8006de2:	b08c      	sub	sp, #48	; 0x30
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
int czy_dobra = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	62fb      	str	r3, [r7, #44]	; 0x2c

HAL_UART_Receive_IT(&huart3, msg, Sizemsg);//odebranie znaku
 8006dec:	4b3c      	ldr	r3, [pc, #240]	; (8006ee0 <HAL_UART_RxCpltCallback+0x100>)
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	493c      	ldr	r1, [pc, #240]	; (8006ee4 <HAL_UART_RxCpltCallback+0x104>)
 8006df4:	483c      	ldr	r0, [pc, #240]	; (8006ee8 <HAL_UART_RxCpltCallback+0x108>)
 8006df6:	f7fd fd79 	bl	80048ec <HAL_UART_Receive_IT>

if(msg[0]>47 && msg[0]<58){//kontrola odebranej wiadomosci
 8006dfa:	4b3a      	ldr	r3, [pc, #232]	; (8006ee4 <HAL_UART_RxCpltCallback+0x104>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b2f      	cmp	r3, #47	; 0x2f
 8006e00:	d954      	bls.n	8006eac <HAL_UART_RxCpltCallback+0xcc>
 8006e02:	4b38      	ldr	r3, [pc, #224]	; (8006ee4 <HAL_UART_RxCpltCallback+0x104>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b39      	cmp	r3, #57	; 0x39
 8006e08:	d850      	bhi.n	8006eac <HAL_UART_RxCpltCallback+0xcc>
	int value1 = msg[0] - '0';
 8006e0a:	4b36      	ldr	r3, [pc, #216]	; (8006ee4 <HAL_UART_RxCpltCallback+0x104>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	3b30      	subs	r3, #48	; 0x30
 8006e10:	62bb      	str	r3, [r7, #40]	; 0x28
	if(msg[1]>47 && msg[1]<58){
 8006e12:	4b34      	ldr	r3, [pc, #208]	; (8006ee4 <HAL_UART_RxCpltCallback+0x104>)
 8006e14:	785b      	ldrb	r3, [r3, #1]
 8006e16:	2b2f      	cmp	r3, #47	; 0x2f
 8006e18:	d948      	bls.n	8006eac <HAL_UART_RxCpltCallback+0xcc>
 8006e1a:	4b32      	ldr	r3, [pc, #200]	; (8006ee4 <HAL_UART_RxCpltCallback+0x104>)
 8006e1c:	785b      	ldrb	r3, [r3, #1]
 8006e1e:	2b39      	cmp	r3, #57	; 0x39
 8006e20:	d844      	bhi.n	8006eac <HAL_UART_RxCpltCallback+0xcc>
		int value2 = msg[1] - '0';
 8006e22:	4b30      	ldr	r3, [pc, #192]	; (8006ee4 <HAL_UART_RxCpltCallback+0x104>)
 8006e24:	785b      	ldrb	r3, [r3, #1]
 8006e26:	3b30      	subs	r3, #48	; 0x30
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
		if(msg[3]>47 && msg[3]<58){
 8006e2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ee4 <HAL_UART_RxCpltCallback+0x104>)
 8006e2c:	78db      	ldrb	r3, [r3, #3]
 8006e2e:	2b2f      	cmp	r3, #47	; 0x2f
 8006e30:	d93c      	bls.n	8006eac <HAL_UART_RxCpltCallback+0xcc>
 8006e32:	4b2c      	ldr	r3, [pc, #176]	; (8006ee4 <HAL_UART_RxCpltCallback+0x104>)
 8006e34:	78db      	ldrb	r3, [r3, #3]
 8006e36:	2b39      	cmp	r3, #57	; 0x39
 8006e38:	d838      	bhi.n	8006eac <HAL_UART_RxCpltCallback+0xcc>
			int value_afd = msg[3] - '0';
 8006e3a:	4b2a      	ldr	r3, [pc, #168]	; (8006ee4 <HAL_UART_RxCpltCallback+0x104>)
 8006e3c:	78db      	ldrb	r3, [r3, #3]
 8006e3e:	3b30      	subs	r3, #48	; 0x30
 8006e40:	623b      	str	r3, [r7, #32]
			czy_dobra = 1;
 8006e42:	2301      	movs	r3, #1
 8006e44:	62fb      	str	r3, [r7, #44]	; 0x2c
			TEMP_WANT = 10.0 * value1 + value2 + value_afd / 10.0;
 8006e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e48:	f7f9 fb8c 	bl	8000564 <__aeabi_i2d>
 8006e4c:	f04f 0200 	mov.w	r2, #0
 8006e50:	4b26      	ldr	r3, [pc, #152]	; (8006eec <HAL_UART_RxCpltCallback+0x10c>)
 8006e52:	f7f9 fbf1 	bl	8000638 <__aeabi_dmul>
 8006e56:	4603      	mov	r3, r0
 8006e58:	460c      	mov	r4, r1
 8006e5a:	4625      	mov	r5, r4
 8006e5c:	461c      	mov	r4, r3
 8006e5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e60:	f7f9 fb80 	bl	8000564 <__aeabi_i2d>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4620      	mov	r0, r4
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	f7f9 fa2e 	bl	80002cc <__adddf3>
 8006e70:	4603      	mov	r3, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	4625      	mov	r5, r4
 8006e76:	461c      	mov	r4, r3
 8006e78:	6a38      	ldr	r0, [r7, #32]
 8006e7a:	f7f9 fb73 	bl	8000564 <__aeabi_i2d>
 8006e7e:	f04f 0200 	mov.w	r2, #0
 8006e82:	4b1a      	ldr	r3, [pc, #104]	; (8006eec <HAL_UART_RxCpltCallback+0x10c>)
 8006e84:	f7f9 fd02 	bl	800088c <__aeabi_ddiv>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	4629      	mov	r1, r5
 8006e90:	f7f9 fa1c 	bl	80002cc <__adddf3>
 8006e94:	4603      	mov	r3, r0
 8006e96:	460c      	mov	r4, r1
 8006e98:	4618      	mov	r0, r3
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	f7f9 fea4 	bl	8000be8 <__aeabi_d2f>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	4b13      	ldr	r3, [pc, #76]	; (8006ef0 <HAL_UART_RxCpltCallback+0x110>)
 8006ea4:	601a      	str	r2, [r3, #0]
			flag = 1;
 8006ea6:	4b13      	ldr	r3, [pc, #76]	; (8006ef4 <HAL_UART_RxCpltCallback+0x114>)
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]
	}
  }
}
if(czy_dobra != 1){
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d011      	beq.n	8006ed6 <HAL_UART_RxCpltCallback+0xf6>
	char buf[20];
	uint8_t wiad = sprintf(buf, "Zla wartosc\n\r");
 8006eb2:	f107 0308 	add.w	r3, r7, #8
 8006eb6:	4a10      	ldr	r2, [pc, #64]	; (8006ef8 <HAL_UART_RxCpltCallback+0x118>)
 8006eb8:	461c      	mov	r4, r3
 8006eba:	4613      	mov	r3, r2
 8006ebc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ebe:	c407      	stmia	r4!, {r0, r1, r2}
 8006ec0:	8023      	strh	r3, [r4, #0]
 8006ec2:	230d      	movs	r3, #13
 8006ec4:	77fb      	strb	r3, [r7, #31]
	HAL_UART_Transmit(&huart3, (uint8_t*)buf, wiad, 100);
 8006ec6:	7ffb      	ldrb	r3, [r7, #31]
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	f107 0108 	add.w	r1, r7, #8
 8006ece:	2364      	movs	r3, #100	; 0x64
 8006ed0:	4805      	ldr	r0, [pc, #20]	; (8006ee8 <HAL_UART_RxCpltCallback+0x108>)
 8006ed2:	f7fd fc79 	bl	80047c8 <HAL_UART_Transmit>
}
}
 8006ed6:	bf00      	nop
 8006ed8:	3730      	adds	r7, #48	; 0x30
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bdb0      	pop	{r4, r5, r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000006 	.word	0x20000006
 8006ee4:	2000023c 	.word	0x2000023c
 8006ee8:	200002f0 	.word	0x200002f0
 8006eec:	40240000 	.word	0x40240000
 8006ef0:	20000238 	.word	0x20000238
 8006ef4:	200001fc 	.word	0x200001fc
 8006ef8:	0800978c 	.word	0x0800978c

08006efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8006f00:	2200      	movs	r2, #0
 8006f02:	2101      	movs	r1, #1
 8006f04:	480b      	ldr	r0, [pc, #44]	; (8006f34 <Error_Handler+0x38>)
 8006f06:	f7fa fbd3 	bl	80016b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2180      	movs	r1, #128	; 0x80
 8006f0e:	4809      	ldr	r0, [pc, #36]	; (8006f34 <Error_Handler+0x38>)
 8006f10:	f7fa fbce 	bl	80016b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006f14:	2200      	movs	r2, #0
 8006f16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f1a:	4806      	ldr	r0, [pc, #24]	; (8006f34 <Error_Handler+0x38>)
 8006f1c:	f7fa fbc8 	bl	80016b0 <HAL_GPIO_WritePin>
  while(1)
  {
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8006f20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f24:	4803      	ldr	r0, [pc, #12]	; (8006f34 <Error_Handler+0x38>)
 8006f26:	f7fa fbdc 	bl	80016e2 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8006f2a:	2064      	movs	r0, #100	; 0x64
 8006f2c:	f7fa f8c0 	bl	80010b0 <HAL_Delay>
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8006f30:	e7f6      	b.n	8006f20 <Error_Handler+0x24>
 8006f32:	bf00      	nop
 8006f34:	40020400 	.word	0x40020400

08006f38 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8006f3c:	4b1b      	ldr	r3, [pc, #108]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f3e:	4a1c      	ldr	r2, [pc, #112]	; (8006fb0 <MX_SPI4_Init+0x78>)
 8006f40:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8006f42:	4b1a      	ldr	r3, [pc, #104]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006f48:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8006f4a:	4b18      	ldr	r3, [pc, #96]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f50:	4b16      	ldr	r3, [pc, #88]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006f56:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006f58:	4b14      	ldr	r3, [pc, #80]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006f5e:	4b13      	ldr	r3, [pc, #76]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f60:	2201      	movs	r2, #1
 8006f62:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8006f64:	4b11      	ldr	r3, [pc, #68]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f6a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006f6c:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f6e:	2218      	movs	r2, #24
 8006f70:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f72:	4b0e      	ldr	r3, [pc, #56]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f78:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f7e:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8006f84:	4b09      	ldr	r3, [pc, #36]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f86:	2207      	movs	r2, #7
 8006f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006f8a:	4b08      	ldr	r3, [pc, #32]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006f90:	4b06      	ldr	r3, [pc, #24]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8006f96:	4805      	ldr	r0, [pc, #20]	; (8006fac <MX_SPI4_Init+0x74>)
 8006f98:	f7fb fd80 	bl	8002a9c <HAL_SPI_Init>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8006fa2:	f7ff ffab 	bl	8006efc <Error_Handler>
  }

}
 8006fa6:	bf00      	nop
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	2000024c 	.word	0x2000024c
 8006fb0:	40013400 	.word	0x40013400

08006fb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08a      	sub	sp, #40	; 0x28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fbc:	f107 0314 	add.w	r3, r7, #20
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	605a      	str	r2, [r3, #4]
 8006fc6:	609a      	str	r2, [r3, #8]
 8006fc8:	60da      	str	r2, [r3, #12]
 8006fca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1b      	ldr	r2, [pc, #108]	; (8007040 <HAL_SPI_MspInit+0x8c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d12f      	bne.n	8007036 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006fd6:	4b1b      	ldr	r3, [pc, #108]	; (8007044 <HAL_SPI_MspInit+0x90>)
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fda:	4a1a      	ldr	r2, [pc, #104]	; (8007044 <HAL_SPI_MspInit+0x90>)
 8006fdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8006fe2:	4b18      	ldr	r3, [pc, #96]	; (8007044 <HAL_SPI_MspInit+0x90>)
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fea:	613b      	str	r3, [r7, #16]
 8006fec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006fee:	4b15      	ldr	r3, [pc, #84]	; (8007044 <HAL_SPI_MspInit+0x90>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	4a14      	ldr	r2, [pc, #80]	; (8007044 <HAL_SPI_MspInit+0x90>)
 8006ff4:	f043 0310 	orr.w	r3, r3, #16
 8006ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8006ffa:	4b12      	ldr	r3, [pc, #72]	; (8007044 <HAL_SPI_MspInit+0x90>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffe:	f003 0310 	and.w	r3, r3, #16
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration    
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8007006:	2364      	movs	r3, #100	; 0x64
 8007008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800700a:	2302      	movs	r3, #2
 800700c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800700e:	2300      	movs	r3, #0
 8007010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007012:	2303      	movs	r3, #3
 8007014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007016:	2305      	movs	r3, #5
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800701a:	f107 0314 	add.w	r3, r7, #20
 800701e:	4619      	mov	r1, r3
 8007020:	4809      	ldr	r0, [pc, #36]	; (8007048 <HAL_SPI_MspInit+0x94>)
 8007022:	f7fa f99b 	bl	800135c <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8007026:	2200      	movs	r2, #0
 8007028:	2100      	movs	r1, #0
 800702a:	2054      	movs	r0, #84	; 0x54
 800702c:	f7fa f93d 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8007030:	2054      	movs	r0, #84	; 0x54
 8007032:	f7fa f956 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8007036:	bf00      	nop
 8007038:	3728      	adds	r7, #40	; 0x28
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	40013400 	.word	0x40013400
 8007044:	40023800 	.word	0x40023800
 8007048:	40021000 	.word	0x40021000

0800704c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007052:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <HAL_MspInit+0x44>)
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	4a0e      	ldr	r2, [pc, #56]	; (8007090 <HAL_MspInit+0x44>)
 8007058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800705c:	6413      	str	r3, [r2, #64]	; 0x40
 800705e:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <HAL_MspInit+0x44>)
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007066:	607b      	str	r3, [r7, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800706a:	4b09      	ldr	r3, [pc, #36]	; (8007090 <HAL_MspInit+0x44>)
 800706c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706e:	4a08      	ldr	r2, [pc, #32]	; (8007090 <HAL_MspInit+0x44>)
 8007070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007074:	6453      	str	r3, [r2, #68]	; 0x44
 8007076:	4b06      	ldr	r3, [pc, #24]	; (8007090 <HAL_MspInit+0x44>)
 8007078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800707e:	603b      	str	r3, [r7, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007082:	bf00      	nop
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	40023800 	.word	0x40023800

08007094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007098:	bf00      	nop
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80070a2:	b480      	push	{r7}
 80070a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80070a6:	e7fe      	b.n	80070a6 <HardFault_Handler+0x4>

080070a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80070ac:	e7fe      	b.n	80070ac <MemManage_Handler+0x4>

080070ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80070ae:	b480      	push	{r7}
 80070b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80070b2:	e7fe      	b.n	80070b2 <BusFault_Handler+0x4>

080070b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80070b8:	e7fe      	b.n	80070b8 <UsageFault_Handler+0x4>

080070ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80070ba:	b480      	push	{r7}
 80070bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80070be:	bf00      	nop
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80070cc:	bf00      	nop
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80070d6:	b480      	push	{r7}
 80070d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80070da:	bf00      	nop
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80070e8:	f7f9 ffc2 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80070ec:	bf00      	nop
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80070f4:	2001      	movs	r0, #1
 80070f6:	f7fa fb0f 	bl	8001718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80070fa:	bf00      	nop
 80070fc:	bd80      	pop	{r7, pc}

080070fe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8007102:	2008      	movs	r0, #8
 8007104:	f7fa fb08 	bl	8001718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007108:	bf00      	nop
 800710a:	bd80      	pop	{r7, pc}

0800710c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007110:	4802      	ldr	r0, [pc, #8]	; (800711c <TIM3_IRQHandler+0x10>)
 8007112:	f7fc fbaf 	bl	8003874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007116:	bf00      	nop
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	200002b0 	.word	0x200002b0

08007120 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007124:	4802      	ldr	r0, [pc, #8]	; (8007130 <USART3_IRQHandler+0x10>)
 8007126:	f7fd fc83 	bl	8004a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800712a:	bf00      	nop
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	200002f0 	.word	0x200002f0

08007134 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007138:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800713c:	f7fa faec 	bl	8001718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007140:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007144:	f7fa fae8 	bl	8001718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007148:	bf00      	nop
 800714a:	bd80      	pop	{r7, pc}

0800714c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8007150:	4802      	ldr	r0, [pc, #8]	; (800715c <SPI4_IRQHandler+0x10>)
 8007152:	f7fc f8af 	bl	80032b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8007156:	bf00      	nop
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	2000024c 	.word	0x2000024c

08007160 <_sbrk>:
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	4b11      	ldr	r3, [pc, #68]	; (80071b0 <_sbrk+0x50>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <_sbrk+0x16>
 8007170:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <_sbrk+0x50>)
 8007172:	4a10      	ldr	r2, [pc, #64]	; (80071b4 <_sbrk+0x54>)
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	4b0e      	ldr	r3, [pc, #56]	; (80071b0 <_sbrk+0x50>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	4b0c      	ldr	r3, [pc, #48]	; (80071b0 <_sbrk+0x50>)
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4413      	add	r3, r2
 8007184:	466a      	mov	r2, sp
 8007186:	4293      	cmp	r3, r2
 8007188:	d907      	bls.n	800719a <_sbrk+0x3a>
 800718a:	f000 fa79 	bl	8007680 <__errno>
 800718e:	4602      	mov	r2, r0
 8007190:	230c      	movs	r3, #12
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	f04f 33ff 	mov.w	r3, #4294967295
 8007198:	e006      	b.n	80071a8 <_sbrk+0x48>
 800719a:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <_sbrk+0x50>)
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4413      	add	r3, r2
 80071a2:	4a03      	ldr	r2, [pc, #12]	; (80071b0 <_sbrk+0x50>)
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	20000200 	.word	0x20000200
 80071b4:	20000778 	.word	0x20000778

080071b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80071bc:	4b15      	ldr	r3, [pc, #84]	; (8007214 <SystemInit+0x5c>)
 80071be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c2:	4a14      	ldr	r2, [pc, #80]	; (8007214 <SystemInit+0x5c>)
 80071c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80071cc:	4b12      	ldr	r3, [pc, #72]	; (8007218 <SystemInit+0x60>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a11      	ldr	r2, [pc, #68]	; (8007218 <SystemInit+0x60>)
 80071d2:	f043 0301 	orr.w	r3, r3, #1
 80071d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80071d8:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <SystemInit+0x60>)
 80071da:	2200      	movs	r2, #0
 80071dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80071de:	4b0e      	ldr	r3, [pc, #56]	; (8007218 <SystemInit+0x60>)
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	490d      	ldr	r1, [pc, #52]	; (8007218 <SystemInit+0x60>)
 80071e4:	4b0d      	ldr	r3, [pc, #52]	; (800721c <SystemInit+0x64>)
 80071e6:	4013      	ands	r3, r2
 80071e8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80071ea:	4b0b      	ldr	r3, [pc, #44]	; (8007218 <SystemInit+0x60>)
 80071ec:	4a0c      	ldr	r2, [pc, #48]	; (8007220 <SystemInit+0x68>)
 80071ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80071f0:	4b09      	ldr	r3, [pc, #36]	; (8007218 <SystemInit+0x60>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a08      	ldr	r2, [pc, #32]	; (8007218 <SystemInit+0x60>)
 80071f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80071fc:	4b06      	ldr	r3, [pc, #24]	; (8007218 <SystemInit+0x60>)
 80071fe:	2200      	movs	r2, #0
 8007200:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007202:	4b04      	ldr	r3, [pc, #16]	; (8007214 <SystemInit+0x5c>)
 8007204:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007208:	609a      	str	r2, [r3, #8]
#endif
}
 800720a:	bf00      	nop
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	e000ed00 	.word	0xe000ed00
 8007218:	40023800 	.word	0x40023800
 800721c:	fef6ffff 	.word	0xfef6ffff
 8007220:	24003010 	.word	0x24003010

08007224 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08e      	sub	sp, #56	; 0x38
 8007228:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800722a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	605a      	str	r2, [r3, #4]
 8007234:	609a      	str	r2, [r3, #8]
 8007236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007238:	f107 031c 	add.w	r3, r7, #28
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	605a      	str	r2, [r3, #4]
 8007242:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007244:	463b      	mov	r3, r7
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]
 800724a:	605a      	str	r2, [r3, #4]
 800724c:	609a      	str	r2, [r3, #8]
 800724e:	60da      	str	r2, [r3, #12]
 8007250:	611a      	str	r2, [r3, #16]
 8007252:	615a      	str	r2, [r3, #20]
 8007254:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8007256:	4b32      	ldr	r3, [pc, #200]	; (8007320 <MX_TIM3_Init+0xfc>)
 8007258:	4a32      	ldr	r2, [pc, #200]	; (8007324 <MX_TIM3_Init+0x100>)
 800725a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800725c:	4b30      	ldr	r3, [pc, #192]	; (8007320 <MX_TIM3_Init+0xfc>)
 800725e:	2247      	movs	r2, #71	; 0x47
 8007260:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007262:	4b2f      	ldr	r3, [pc, #188]	; (8007320 <MX_TIM3_Init+0xfc>)
 8007264:	2200      	movs	r2, #0
 8007266:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8007268:	4b2d      	ldr	r3, [pc, #180]	; (8007320 <MX_TIM3_Init+0xfc>)
 800726a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800726e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007270:	4b2b      	ldr	r3, [pc, #172]	; (8007320 <MX_TIM3_Init+0xfc>)
 8007272:	2200      	movs	r2, #0
 8007274:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007276:	4b2a      	ldr	r3, [pc, #168]	; (8007320 <MX_TIM3_Init+0xfc>)
 8007278:	2200      	movs	r2, #0
 800727a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800727c:	4828      	ldr	r0, [pc, #160]	; (8007320 <MX_TIM3_Init+0xfc>)
 800727e:	f7fc fa55 	bl	800372c <HAL_TIM_Base_Init>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8007288:	f7ff fe38 	bl	8006efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800728c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007290:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007296:	4619      	mov	r1, r3
 8007298:	4821      	ldr	r0, [pc, #132]	; (8007320 <MX_TIM3_Init+0xfc>)
 800729a:	f7fc fd23 	bl	8003ce4 <HAL_TIM_ConfigClockSource>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80072a4:	f7ff fe2a 	bl	8006efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80072a8:	481d      	ldr	r0, [pc, #116]	; (8007320 <MX_TIM3_Init+0xfc>)
 80072aa:	f7fc fa6a 	bl	8003782 <HAL_TIM_PWM_Init>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80072b4:	f7ff fe22 	bl	8006efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072b8:	2300      	movs	r3, #0
 80072ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072bc:	2300      	movs	r3, #0
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80072c0:	f107 031c 	add.w	r3, r7, #28
 80072c4:	4619      	mov	r1, r3
 80072c6:	4816      	ldr	r0, [pc, #88]	; (8007320 <MX_TIM3_Init+0xfc>)
 80072c8:	f7fd f9b6 	bl	8004638 <HAL_TIMEx_MasterConfigSynchronization>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80072d2:	f7ff fe13 	bl	8006efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80072d6:	2360      	movs	r3, #96	; 0x60
 80072d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80072de:	2300      	movs	r3, #0
 80072e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80072e6:	463b      	mov	r3, r7
 80072e8:	2200      	movs	r2, #0
 80072ea:	4619      	mov	r1, r3
 80072ec:	480c      	ldr	r0, [pc, #48]	; (8007320 <MX_TIM3_Init+0xfc>)
 80072ee:	f7fc fbe1 	bl	8003ab4 <HAL_TIM_PWM_ConfigChannel>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80072f8:	f7ff fe00 	bl	8006efc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80072fc:	463b      	mov	r3, r7
 80072fe:	2204      	movs	r2, #4
 8007300:	4619      	mov	r1, r3
 8007302:	4807      	ldr	r0, [pc, #28]	; (8007320 <MX_TIM3_Init+0xfc>)
 8007304:	f7fc fbd6 	bl	8003ab4 <HAL_TIM_PWM_ConfigChannel>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800730e:	f7ff fdf5 	bl	8006efc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8007312:	4803      	ldr	r0, [pc, #12]	; (8007320 <MX_TIM3_Init+0xfc>)
 8007314:	f000 f82e 	bl	8007374 <HAL_TIM_MspPostInit>

}
 8007318:	bf00      	nop
 800731a:	3738      	adds	r7, #56	; 0x38
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	200002b0 	.word	0x200002b0
 8007324:	40000400 	.word	0x40000400

08007328 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a0d      	ldr	r2, [pc, #52]	; (800736c <HAL_TIM_Base_MspInit+0x44>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d113      	bne.n	8007362 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800733a:	4b0d      	ldr	r3, [pc, #52]	; (8007370 <HAL_TIM_Base_MspInit+0x48>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	4a0c      	ldr	r2, [pc, #48]	; (8007370 <HAL_TIM_Base_MspInit+0x48>)
 8007340:	f043 0302 	orr.w	r3, r3, #2
 8007344:	6413      	str	r3, [r2, #64]	; 0x40
 8007346:	4b0a      	ldr	r3, [pc, #40]	; (8007370 <HAL_TIM_Base_MspInit+0x48>)
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007352:	2200      	movs	r2, #0
 8007354:	2100      	movs	r1, #0
 8007356:	201d      	movs	r0, #29
 8007358:	f7f9 ffa7 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800735c:	201d      	movs	r0, #29
 800735e:	f7f9 ffc0 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007362:	bf00      	nop
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	40000400 	.word	0x40000400
 8007370:	40023800 	.word	0x40023800

08007374 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08a      	sub	sp, #40	; 0x28
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800737c:	f107 0314 	add.w	r3, r7, #20
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	605a      	str	r2, [r3, #4]
 8007386:	609a      	str	r2, [r3, #8]
 8007388:	60da      	str	r2, [r3, #12]
 800738a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a1f      	ldr	r2, [pc, #124]	; (8007410 <HAL_TIM_MspPostInit+0x9c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d137      	bne.n	8007406 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007396:	4b1f      	ldr	r3, [pc, #124]	; (8007414 <HAL_TIM_MspPostInit+0xa0>)
 8007398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739a:	4a1e      	ldr	r2, [pc, #120]	; (8007414 <HAL_TIM_MspPostInit+0xa0>)
 800739c:	f043 0301 	orr.w	r3, r3, #1
 80073a0:	6313      	str	r3, [r2, #48]	; 0x30
 80073a2:	4b1c      	ldr	r3, [pc, #112]	; (8007414 <HAL_TIM_MspPostInit+0xa0>)
 80073a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	613b      	str	r3, [r7, #16]
 80073ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073ae:	4b19      	ldr	r3, [pc, #100]	; (8007414 <HAL_TIM_MspPostInit+0xa0>)
 80073b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b2:	4a18      	ldr	r2, [pc, #96]	; (8007414 <HAL_TIM_MspPostInit+0xa0>)
 80073b4:	f043 0304 	orr.w	r3, r3, #4
 80073b8:	6313      	str	r3, [r2, #48]	; 0x30
 80073ba:	4b16      	ldr	r3, [pc, #88]	; (8007414 <HAL_TIM_MspPostInit+0xa0>)
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	f003 0304 	and.w	r3, r3, #4
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80073c6:	2340      	movs	r3, #64	; 0x40
 80073c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ca:	2302      	movs	r3, #2
 80073cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ce:	2300      	movs	r3, #0
 80073d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073d2:	2300      	movs	r3, #0
 80073d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80073d6:	2302      	movs	r3, #2
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073da:	f107 0314 	add.w	r3, r7, #20
 80073de:	4619      	mov	r1, r3
 80073e0:	480d      	ldr	r0, [pc, #52]	; (8007418 <HAL_TIM_MspPostInit+0xa4>)
 80073e2:	f7f9 ffbb 	bl	800135c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80073e6:	2380      	movs	r3, #128	; 0x80
 80073e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ea:	2302      	movs	r3, #2
 80073ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073f2:	2300      	movs	r3, #0
 80073f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80073f6:	2302      	movs	r3, #2
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073fa:	f107 0314 	add.w	r3, r7, #20
 80073fe:	4619      	mov	r1, r3
 8007400:	4806      	ldr	r0, [pc, #24]	; (800741c <HAL_TIM_MspPostInit+0xa8>)
 8007402:	f7f9 ffab 	bl	800135c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007406:	bf00      	nop
 8007408:	3728      	adds	r7, #40	; 0x28
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	40000400 	.word	0x40000400
 8007414:	40023800 	.word	0x40023800
 8007418:	40020000 	.word	0x40020000
 800741c:	40020800 	.word	0x40020800

08007420 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007424:	4b14      	ldr	r3, [pc, #80]	; (8007478 <MX_USART3_UART_Init+0x58>)
 8007426:	4a15      	ldr	r2, [pc, #84]	; (800747c <MX_USART3_UART_Init+0x5c>)
 8007428:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800742a:	4b13      	ldr	r3, [pc, #76]	; (8007478 <MX_USART3_UART_Init+0x58>)
 800742c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007430:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007432:	4b11      	ldr	r3, [pc, #68]	; (8007478 <MX_USART3_UART_Init+0x58>)
 8007434:	2200      	movs	r2, #0
 8007436:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007438:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <MX_USART3_UART_Init+0x58>)
 800743a:	2200      	movs	r2, #0
 800743c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800743e:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <MX_USART3_UART_Init+0x58>)
 8007440:	2200      	movs	r2, #0
 8007442:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007444:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <MX_USART3_UART_Init+0x58>)
 8007446:	220c      	movs	r2, #12
 8007448:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <MX_USART3_UART_Init+0x58>)
 800744c:	2200      	movs	r2, #0
 800744e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007450:	4b09      	ldr	r3, [pc, #36]	; (8007478 <MX_USART3_UART_Init+0x58>)
 8007452:	2200      	movs	r2, #0
 8007454:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007456:	4b08      	ldr	r3, [pc, #32]	; (8007478 <MX_USART3_UART_Init+0x58>)
 8007458:	2200      	movs	r2, #0
 800745a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800745c:	4b06      	ldr	r3, [pc, #24]	; (8007478 <MX_USART3_UART_Init+0x58>)
 800745e:	2200      	movs	r2, #0
 8007460:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007462:	4805      	ldr	r0, [pc, #20]	; (8007478 <MX_USART3_UART_Init+0x58>)
 8007464:	f7fd f962 	bl	800472c <HAL_UART_Init>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800746e:	f7ff fd45 	bl	8006efc <Error_Handler>
  }

}
 8007472:	bf00      	nop
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	200002f0 	.word	0x200002f0
 800747c:	40004800 	.word	0x40004800

08007480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	; 0x28
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007488:	f107 0314 	add.w	r3, r7, #20
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	605a      	str	r2, [r3, #4]
 8007492:	609a      	str	r2, [r3, #8]
 8007494:	60da      	str	r2, [r3, #12]
 8007496:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a1b      	ldr	r2, [pc, #108]	; (800750c <HAL_UART_MspInit+0x8c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d130      	bne.n	8007504 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80074a2:	4b1b      	ldr	r3, [pc, #108]	; (8007510 <HAL_UART_MspInit+0x90>)
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	4a1a      	ldr	r2, [pc, #104]	; (8007510 <HAL_UART_MspInit+0x90>)
 80074a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074ac:	6413      	str	r3, [r2, #64]	; 0x40
 80074ae:	4b18      	ldr	r3, [pc, #96]	; (8007510 <HAL_UART_MspInit+0x90>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074b6:	613b      	str	r3, [r7, #16]
 80074b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80074ba:	4b15      	ldr	r3, [pc, #84]	; (8007510 <HAL_UART_MspInit+0x90>)
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	4a14      	ldr	r2, [pc, #80]	; (8007510 <HAL_UART_MspInit+0x90>)
 80074c0:	f043 0308 	orr.w	r3, r3, #8
 80074c4:	6313      	str	r3, [r2, #48]	; 0x30
 80074c6:	4b12      	ldr	r3, [pc, #72]	; (8007510 <HAL_UART_MspInit+0x90>)
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	f003 0308 	and.w	r3, r3, #8
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80074d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80074d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074d8:	2302      	movs	r3, #2
 80074da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074e0:	2303      	movs	r3, #3
 80074e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80074e4:	2307      	movs	r3, #7
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80074e8:	f107 0314 	add.w	r3, r7, #20
 80074ec:	4619      	mov	r1, r3
 80074ee:	4809      	ldr	r0, [pc, #36]	; (8007514 <HAL_UART_MspInit+0x94>)
 80074f0:	f7f9 ff34 	bl	800135c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80074f4:	2200      	movs	r2, #0
 80074f6:	2100      	movs	r1, #0
 80074f8:	2027      	movs	r0, #39	; 0x27
 80074fa:	f7f9 fed6 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80074fe:	2027      	movs	r0, #39	; 0x27
 8007500:	f7f9 feef 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007504:	bf00      	nop
 8007506:	3728      	adds	r7, #40	; 0x28
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	40004800 	.word	0x40004800
 8007510:	40023800 	.word	0x40023800
 8007514:	40020c00 	.word	0x40020c00

08007518 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800751c:	4b14      	ldr	r3, [pc, #80]	; (8007570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800751e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007522:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007524:	4b12      	ldr	r3, [pc, #72]	; (8007570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007526:	2206      	movs	r2, #6
 8007528:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800752a:	4b11      	ldr	r3, [pc, #68]	; (8007570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800752c:	2202      	movs	r2, #2
 800752e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007530:	4b0f      	ldr	r3, [pc, #60]	; (8007570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007532:	2200      	movs	r2, #0
 8007534:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007536:	4b0e      	ldr	r3, [pc, #56]	; (8007570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007538:	2202      	movs	r2, #2
 800753a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800753c:	4b0c      	ldr	r3, [pc, #48]	; (8007570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800753e:	2201      	movs	r2, #1
 8007540:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007542:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007544:	2200      	movs	r2, #0
 8007546:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007548:	4b09      	ldr	r3, [pc, #36]	; (8007570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800754a:	2200      	movs	r2, #0
 800754c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800754e:	4b08      	ldr	r3, [pc, #32]	; (8007570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007550:	2201      	movs	r2, #1
 8007552:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007554:	4b06      	ldr	r3, [pc, #24]	; (8007570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007556:	2200      	movs	r2, #0
 8007558:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800755a:	4805      	ldr	r0, [pc, #20]	; (8007570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800755c:	f7fa f8ff 	bl	800175e <HAL_PCD_Init>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8007566:	f7ff fcc9 	bl	8006efc <Error_Handler>
  }

}
 800756a:	bf00      	nop
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20000370 	.word	0x20000370

08007574 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08a      	sub	sp, #40	; 0x28
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800757c:	f107 0314 	add.w	r3, r7, #20
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	605a      	str	r2, [r3, #4]
 8007586:	609a      	str	r2, [r3, #8]
 8007588:	60da      	str	r2, [r3, #12]
 800758a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007594:	d141      	bne.n	800761a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007596:	4b23      	ldr	r3, [pc, #140]	; (8007624 <HAL_PCD_MspInit+0xb0>)
 8007598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759a:	4a22      	ldr	r2, [pc, #136]	; (8007624 <HAL_PCD_MspInit+0xb0>)
 800759c:	f043 0301 	orr.w	r3, r3, #1
 80075a0:	6313      	str	r3, [r2, #48]	; 0x30
 80075a2:	4b20      	ldr	r3, [pc, #128]	; (8007624 <HAL_PCD_MspInit+0xb0>)
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	613b      	str	r3, [r7, #16]
 80075ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80075ae:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80075b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075b4:	2302      	movs	r3, #2
 80075b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075bc:	2303      	movs	r3, #3
 80075be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075c0:	230a      	movs	r3, #10
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075c4:	f107 0314 	add.w	r3, r7, #20
 80075c8:	4619      	mov	r1, r3
 80075ca:	4817      	ldr	r0, [pc, #92]	; (8007628 <HAL_PCD_MspInit+0xb4>)
 80075cc:	f7f9 fec6 	bl	800135c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80075d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075d6:	2300      	movs	r3, #0
 80075d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80075de:	f107 0314 	add.w	r3, r7, #20
 80075e2:	4619      	mov	r1, r3
 80075e4:	4810      	ldr	r0, [pc, #64]	; (8007628 <HAL_PCD_MspInit+0xb4>)
 80075e6:	f7f9 feb9 	bl	800135c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075ea:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <HAL_PCD_MspInit+0xb0>)
 80075ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ee:	4a0d      	ldr	r2, [pc, #52]	; (8007624 <HAL_PCD_MspInit+0xb0>)
 80075f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f4:	6353      	str	r3, [r2, #52]	; 0x34
 80075f6:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <HAL_PCD_MspInit+0xb0>)
 80075f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4b08      	ldr	r3, [pc, #32]	; (8007624 <HAL_PCD_MspInit+0xb0>)
 8007604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007606:	4a07      	ldr	r2, [pc, #28]	; (8007624 <HAL_PCD_MspInit+0xb0>)
 8007608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800760c:	6453      	str	r3, [r2, #68]	; 0x44
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <HAL_PCD_MspInit+0xb0>)
 8007610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007616:	60bb      	str	r3, [r7, #8]
 8007618:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800761a:	bf00      	nop
 800761c:	3728      	adds	r7, #40	; 0x28
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	40023800 	.word	0x40023800
 8007628:	40020000 	.word	0x40020000

0800762c <Reset_Handler>:
 800762c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007664 <LoopFillZerobss+0x14>
 8007630:	2100      	movs	r1, #0
 8007632:	e003      	b.n	800763c <LoopCopyDataInit>

08007634 <CopyDataInit>:
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <LoopFillZerobss+0x18>)
 8007636:	585b      	ldr	r3, [r3, r1]
 8007638:	5043      	str	r3, [r0, r1]
 800763a:	3104      	adds	r1, #4

0800763c <LoopCopyDataInit>:
 800763c:	480b      	ldr	r0, [pc, #44]	; (800766c <LoopFillZerobss+0x1c>)
 800763e:	4b0c      	ldr	r3, [pc, #48]	; (8007670 <LoopFillZerobss+0x20>)
 8007640:	1842      	adds	r2, r0, r1
 8007642:	429a      	cmp	r2, r3
 8007644:	d3f6      	bcc.n	8007634 <CopyDataInit>
 8007646:	4a0b      	ldr	r2, [pc, #44]	; (8007674 <LoopFillZerobss+0x24>)
 8007648:	e002      	b.n	8007650 <LoopFillZerobss>

0800764a <FillZerobss>:
 800764a:	2300      	movs	r3, #0
 800764c:	f842 3b04 	str.w	r3, [r2], #4

08007650 <LoopFillZerobss>:
 8007650:	4b09      	ldr	r3, [pc, #36]	; (8007678 <LoopFillZerobss+0x28>)
 8007652:	429a      	cmp	r2, r3
 8007654:	d3f9      	bcc.n	800764a <FillZerobss>
 8007656:	f7ff fdaf 	bl	80071b8 <SystemInit>
 800765a:	f000 f817 	bl	800768c <__libc_init_array>
 800765e:	f7ff f973 	bl	8006948 <main>
 8007662:	4770      	bx	lr
 8007664:	20050000 	.word	0x20050000
 8007668:	08009a20 	.word	0x08009a20
 800766c:	20000000 	.word	0x20000000
 8007670:	200001dc 	.word	0x200001dc
 8007674:	200001dc 	.word	0x200001dc
 8007678:	20000778 	.word	0x20000778

0800767c <ADC_IRQHandler>:
 800767c:	e7fe      	b.n	800767c <ADC_IRQHandler>
	...

08007680 <__errno>:
 8007680:	4b01      	ldr	r3, [pc, #4]	; (8007688 <__errno+0x8>)
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	2000000c 	.word	0x2000000c

0800768c <__libc_init_array>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	4e0d      	ldr	r6, [pc, #52]	; (80076c4 <__libc_init_array+0x38>)
 8007690:	4c0d      	ldr	r4, [pc, #52]	; (80076c8 <__libc_init_array+0x3c>)
 8007692:	1ba4      	subs	r4, r4, r6
 8007694:	10a4      	asrs	r4, r4, #2
 8007696:	2500      	movs	r5, #0
 8007698:	42a5      	cmp	r5, r4
 800769a:	d109      	bne.n	80076b0 <__libc_init_array+0x24>
 800769c:	4e0b      	ldr	r6, [pc, #44]	; (80076cc <__libc_init_array+0x40>)
 800769e:	4c0c      	ldr	r4, [pc, #48]	; (80076d0 <__libc_init_array+0x44>)
 80076a0:	f002 f85e 	bl	8009760 <_init>
 80076a4:	1ba4      	subs	r4, r4, r6
 80076a6:	10a4      	asrs	r4, r4, #2
 80076a8:	2500      	movs	r5, #0
 80076aa:	42a5      	cmp	r5, r4
 80076ac:	d105      	bne.n	80076ba <__libc_init_array+0x2e>
 80076ae:	bd70      	pop	{r4, r5, r6, pc}
 80076b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076b4:	4798      	blx	r3
 80076b6:	3501      	adds	r5, #1
 80076b8:	e7ee      	b.n	8007698 <__libc_init_array+0xc>
 80076ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076be:	4798      	blx	r3
 80076c0:	3501      	adds	r5, #1
 80076c2:	e7f2      	b.n	80076aa <__libc_init_array+0x1e>
 80076c4:	08009a18 	.word	0x08009a18
 80076c8:	08009a18 	.word	0x08009a18
 80076cc:	08009a18 	.word	0x08009a18
 80076d0:	08009a1c 	.word	0x08009a1c

080076d4 <memset>:
 80076d4:	4402      	add	r2, r0
 80076d6:	4603      	mov	r3, r0
 80076d8:	4293      	cmp	r3, r2
 80076da:	d100      	bne.n	80076de <memset+0xa>
 80076dc:	4770      	bx	lr
 80076de:	f803 1b01 	strb.w	r1, [r3], #1
 80076e2:	e7f9      	b.n	80076d8 <memset+0x4>

080076e4 <__cvt>:
 80076e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076e8:	ec55 4b10 	vmov	r4, r5, d0
 80076ec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80076ee:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076f2:	2d00      	cmp	r5, #0
 80076f4:	460e      	mov	r6, r1
 80076f6:	4691      	mov	r9, r2
 80076f8:	4619      	mov	r1, r3
 80076fa:	bfb8      	it	lt
 80076fc:	4622      	movlt	r2, r4
 80076fe:	462b      	mov	r3, r5
 8007700:	f027 0720 	bic.w	r7, r7, #32
 8007704:	bfbb      	ittet	lt
 8007706:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800770a:	461d      	movlt	r5, r3
 800770c:	2300      	movge	r3, #0
 800770e:	232d      	movlt	r3, #45	; 0x2d
 8007710:	bfb8      	it	lt
 8007712:	4614      	movlt	r4, r2
 8007714:	2f46      	cmp	r7, #70	; 0x46
 8007716:	700b      	strb	r3, [r1, #0]
 8007718:	d004      	beq.n	8007724 <__cvt+0x40>
 800771a:	2f45      	cmp	r7, #69	; 0x45
 800771c:	d100      	bne.n	8007720 <__cvt+0x3c>
 800771e:	3601      	adds	r6, #1
 8007720:	2102      	movs	r1, #2
 8007722:	e000      	b.n	8007726 <__cvt+0x42>
 8007724:	2103      	movs	r1, #3
 8007726:	ab03      	add	r3, sp, #12
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	ab02      	add	r3, sp, #8
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	4632      	mov	r2, r6
 8007730:	4653      	mov	r3, sl
 8007732:	ec45 4b10 	vmov	d0, r4, r5
 8007736:	f000 fcdf 	bl	80080f8 <_dtoa_r>
 800773a:	2f47      	cmp	r7, #71	; 0x47
 800773c:	4680      	mov	r8, r0
 800773e:	d102      	bne.n	8007746 <__cvt+0x62>
 8007740:	f019 0f01 	tst.w	r9, #1
 8007744:	d026      	beq.n	8007794 <__cvt+0xb0>
 8007746:	2f46      	cmp	r7, #70	; 0x46
 8007748:	eb08 0906 	add.w	r9, r8, r6
 800774c:	d111      	bne.n	8007772 <__cvt+0x8e>
 800774e:	f898 3000 	ldrb.w	r3, [r8]
 8007752:	2b30      	cmp	r3, #48	; 0x30
 8007754:	d10a      	bne.n	800776c <__cvt+0x88>
 8007756:	2200      	movs	r2, #0
 8007758:	2300      	movs	r3, #0
 800775a:	4620      	mov	r0, r4
 800775c:	4629      	mov	r1, r5
 800775e:	f7f9 f9d3 	bl	8000b08 <__aeabi_dcmpeq>
 8007762:	b918      	cbnz	r0, 800776c <__cvt+0x88>
 8007764:	f1c6 0601 	rsb	r6, r6, #1
 8007768:	f8ca 6000 	str.w	r6, [sl]
 800776c:	f8da 3000 	ldr.w	r3, [sl]
 8007770:	4499      	add	r9, r3
 8007772:	2200      	movs	r2, #0
 8007774:	2300      	movs	r3, #0
 8007776:	4620      	mov	r0, r4
 8007778:	4629      	mov	r1, r5
 800777a:	f7f9 f9c5 	bl	8000b08 <__aeabi_dcmpeq>
 800777e:	b938      	cbnz	r0, 8007790 <__cvt+0xac>
 8007780:	2230      	movs	r2, #48	; 0x30
 8007782:	9b03      	ldr	r3, [sp, #12]
 8007784:	454b      	cmp	r3, r9
 8007786:	d205      	bcs.n	8007794 <__cvt+0xb0>
 8007788:	1c59      	adds	r1, r3, #1
 800778a:	9103      	str	r1, [sp, #12]
 800778c:	701a      	strb	r2, [r3, #0]
 800778e:	e7f8      	b.n	8007782 <__cvt+0x9e>
 8007790:	f8cd 900c 	str.w	r9, [sp, #12]
 8007794:	9b03      	ldr	r3, [sp, #12]
 8007796:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007798:	eba3 0308 	sub.w	r3, r3, r8
 800779c:	4640      	mov	r0, r8
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	b004      	add	sp, #16
 80077a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080077a6 <__exponent>:
 80077a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077a8:	2900      	cmp	r1, #0
 80077aa:	4604      	mov	r4, r0
 80077ac:	bfba      	itte	lt
 80077ae:	4249      	neglt	r1, r1
 80077b0:	232d      	movlt	r3, #45	; 0x2d
 80077b2:	232b      	movge	r3, #43	; 0x2b
 80077b4:	2909      	cmp	r1, #9
 80077b6:	f804 2b02 	strb.w	r2, [r4], #2
 80077ba:	7043      	strb	r3, [r0, #1]
 80077bc:	dd20      	ble.n	8007800 <__exponent+0x5a>
 80077be:	f10d 0307 	add.w	r3, sp, #7
 80077c2:	461f      	mov	r7, r3
 80077c4:	260a      	movs	r6, #10
 80077c6:	fb91 f5f6 	sdiv	r5, r1, r6
 80077ca:	fb06 1115 	mls	r1, r6, r5, r1
 80077ce:	3130      	adds	r1, #48	; 0x30
 80077d0:	2d09      	cmp	r5, #9
 80077d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077d6:	f103 32ff 	add.w	r2, r3, #4294967295
 80077da:	4629      	mov	r1, r5
 80077dc:	dc09      	bgt.n	80077f2 <__exponent+0x4c>
 80077de:	3130      	adds	r1, #48	; 0x30
 80077e0:	3b02      	subs	r3, #2
 80077e2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80077e6:	42bb      	cmp	r3, r7
 80077e8:	4622      	mov	r2, r4
 80077ea:	d304      	bcc.n	80077f6 <__exponent+0x50>
 80077ec:	1a10      	subs	r0, r2, r0
 80077ee:	b003      	add	sp, #12
 80077f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077f2:	4613      	mov	r3, r2
 80077f4:	e7e7      	b.n	80077c6 <__exponent+0x20>
 80077f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077fa:	f804 2b01 	strb.w	r2, [r4], #1
 80077fe:	e7f2      	b.n	80077e6 <__exponent+0x40>
 8007800:	2330      	movs	r3, #48	; 0x30
 8007802:	4419      	add	r1, r3
 8007804:	7083      	strb	r3, [r0, #2]
 8007806:	1d02      	adds	r2, r0, #4
 8007808:	70c1      	strb	r1, [r0, #3]
 800780a:	e7ef      	b.n	80077ec <__exponent+0x46>

0800780c <_printf_float>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	b08d      	sub	sp, #52	; 0x34
 8007812:	460c      	mov	r4, r1
 8007814:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007818:	4616      	mov	r6, r2
 800781a:	461f      	mov	r7, r3
 800781c:	4605      	mov	r5, r0
 800781e:	f001 fa23 	bl	8008c68 <_localeconv_r>
 8007822:	6803      	ldr	r3, [r0, #0]
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	4618      	mov	r0, r3
 8007828:	f7f8 fcf2 	bl	8000210 <strlen>
 800782c:	2300      	movs	r3, #0
 800782e:	930a      	str	r3, [sp, #40]	; 0x28
 8007830:	f8d8 3000 	ldr.w	r3, [r8]
 8007834:	9005      	str	r0, [sp, #20]
 8007836:	3307      	adds	r3, #7
 8007838:	f023 0307 	bic.w	r3, r3, #7
 800783c:	f103 0208 	add.w	r2, r3, #8
 8007840:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007844:	f8d4 b000 	ldr.w	fp, [r4]
 8007848:	f8c8 2000 	str.w	r2, [r8]
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007854:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007858:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800785c:	9307      	str	r3, [sp, #28]
 800785e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007862:	f04f 32ff 	mov.w	r2, #4294967295
 8007866:	4ba7      	ldr	r3, [pc, #668]	; (8007b04 <_printf_float+0x2f8>)
 8007868:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800786c:	f7f9 f97e 	bl	8000b6c <__aeabi_dcmpun>
 8007870:	bb70      	cbnz	r0, 80078d0 <_printf_float+0xc4>
 8007872:	f04f 32ff 	mov.w	r2, #4294967295
 8007876:	4ba3      	ldr	r3, [pc, #652]	; (8007b04 <_printf_float+0x2f8>)
 8007878:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800787c:	f7f9 f958 	bl	8000b30 <__aeabi_dcmple>
 8007880:	bb30      	cbnz	r0, 80078d0 <_printf_float+0xc4>
 8007882:	2200      	movs	r2, #0
 8007884:	2300      	movs	r3, #0
 8007886:	4640      	mov	r0, r8
 8007888:	4649      	mov	r1, r9
 800788a:	f7f9 f947 	bl	8000b1c <__aeabi_dcmplt>
 800788e:	b110      	cbz	r0, 8007896 <_printf_float+0x8a>
 8007890:	232d      	movs	r3, #45	; 0x2d
 8007892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007896:	4a9c      	ldr	r2, [pc, #624]	; (8007b08 <_printf_float+0x2fc>)
 8007898:	4b9c      	ldr	r3, [pc, #624]	; (8007b0c <_printf_float+0x300>)
 800789a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800789e:	bf8c      	ite	hi
 80078a0:	4690      	movhi	r8, r2
 80078a2:	4698      	movls	r8, r3
 80078a4:	2303      	movs	r3, #3
 80078a6:	f02b 0204 	bic.w	r2, fp, #4
 80078aa:	6123      	str	r3, [r4, #16]
 80078ac:	6022      	str	r2, [r4, #0]
 80078ae:	f04f 0900 	mov.w	r9, #0
 80078b2:	9700      	str	r7, [sp, #0]
 80078b4:	4633      	mov	r3, r6
 80078b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80078b8:	4621      	mov	r1, r4
 80078ba:	4628      	mov	r0, r5
 80078bc:	f000 f9e6 	bl	8007c8c <_printf_common>
 80078c0:	3001      	adds	r0, #1
 80078c2:	f040 808d 	bne.w	80079e0 <_printf_float+0x1d4>
 80078c6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ca:	b00d      	add	sp, #52	; 0x34
 80078cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d0:	4642      	mov	r2, r8
 80078d2:	464b      	mov	r3, r9
 80078d4:	4640      	mov	r0, r8
 80078d6:	4649      	mov	r1, r9
 80078d8:	f7f9 f948 	bl	8000b6c <__aeabi_dcmpun>
 80078dc:	b110      	cbz	r0, 80078e4 <_printf_float+0xd8>
 80078de:	4a8c      	ldr	r2, [pc, #560]	; (8007b10 <_printf_float+0x304>)
 80078e0:	4b8c      	ldr	r3, [pc, #560]	; (8007b14 <_printf_float+0x308>)
 80078e2:	e7da      	b.n	800789a <_printf_float+0x8e>
 80078e4:	6861      	ldr	r1, [r4, #4]
 80078e6:	1c4b      	adds	r3, r1, #1
 80078e8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80078ec:	a80a      	add	r0, sp, #40	; 0x28
 80078ee:	d13e      	bne.n	800796e <_printf_float+0x162>
 80078f0:	2306      	movs	r3, #6
 80078f2:	6063      	str	r3, [r4, #4]
 80078f4:	2300      	movs	r3, #0
 80078f6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80078fa:	ab09      	add	r3, sp, #36	; 0x24
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	ec49 8b10 	vmov	d0, r8, r9
 8007902:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007906:	6022      	str	r2, [r4, #0]
 8007908:	f8cd a004 	str.w	sl, [sp, #4]
 800790c:	6861      	ldr	r1, [r4, #4]
 800790e:	4628      	mov	r0, r5
 8007910:	f7ff fee8 	bl	80076e4 <__cvt>
 8007914:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007918:	2b47      	cmp	r3, #71	; 0x47
 800791a:	4680      	mov	r8, r0
 800791c:	d109      	bne.n	8007932 <_printf_float+0x126>
 800791e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007920:	1cd8      	adds	r0, r3, #3
 8007922:	db02      	blt.n	800792a <_printf_float+0x11e>
 8007924:	6862      	ldr	r2, [r4, #4]
 8007926:	4293      	cmp	r3, r2
 8007928:	dd47      	ble.n	80079ba <_printf_float+0x1ae>
 800792a:	f1aa 0a02 	sub.w	sl, sl, #2
 800792e:	fa5f fa8a 	uxtb.w	sl, sl
 8007932:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007936:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007938:	d824      	bhi.n	8007984 <_printf_float+0x178>
 800793a:	3901      	subs	r1, #1
 800793c:	4652      	mov	r2, sl
 800793e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007942:	9109      	str	r1, [sp, #36]	; 0x24
 8007944:	f7ff ff2f 	bl	80077a6 <__exponent>
 8007948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800794a:	1813      	adds	r3, r2, r0
 800794c:	2a01      	cmp	r2, #1
 800794e:	4681      	mov	r9, r0
 8007950:	6123      	str	r3, [r4, #16]
 8007952:	dc02      	bgt.n	800795a <_printf_float+0x14e>
 8007954:	6822      	ldr	r2, [r4, #0]
 8007956:	07d1      	lsls	r1, r2, #31
 8007958:	d501      	bpl.n	800795e <_printf_float+0x152>
 800795a:	3301      	adds	r3, #1
 800795c:	6123      	str	r3, [r4, #16]
 800795e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0a5      	beq.n	80078b2 <_printf_float+0xa6>
 8007966:	232d      	movs	r3, #45	; 0x2d
 8007968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800796c:	e7a1      	b.n	80078b2 <_printf_float+0xa6>
 800796e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007972:	f000 8177 	beq.w	8007c64 <_printf_float+0x458>
 8007976:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800797a:	d1bb      	bne.n	80078f4 <_printf_float+0xe8>
 800797c:	2900      	cmp	r1, #0
 800797e:	d1b9      	bne.n	80078f4 <_printf_float+0xe8>
 8007980:	2301      	movs	r3, #1
 8007982:	e7b6      	b.n	80078f2 <_printf_float+0xe6>
 8007984:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007988:	d119      	bne.n	80079be <_printf_float+0x1b2>
 800798a:	2900      	cmp	r1, #0
 800798c:	6863      	ldr	r3, [r4, #4]
 800798e:	dd0c      	ble.n	80079aa <_printf_float+0x19e>
 8007990:	6121      	str	r1, [r4, #16]
 8007992:	b913      	cbnz	r3, 800799a <_printf_float+0x18e>
 8007994:	6822      	ldr	r2, [r4, #0]
 8007996:	07d2      	lsls	r2, r2, #31
 8007998:	d502      	bpl.n	80079a0 <_printf_float+0x194>
 800799a:	3301      	adds	r3, #1
 800799c:	440b      	add	r3, r1
 800799e:	6123      	str	r3, [r4, #16]
 80079a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80079a4:	f04f 0900 	mov.w	r9, #0
 80079a8:	e7d9      	b.n	800795e <_printf_float+0x152>
 80079aa:	b913      	cbnz	r3, 80079b2 <_printf_float+0x1a6>
 80079ac:	6822      	ldr	r2, [r4, #0]
 80079ae:	07d0      	lsls	r0, r2, #31
 80079b0:	d501      	bpl.n	80079b6 <_printf_float+0x1aa>
 80079b2:	3302      	adds	r3, #2
 80079b4:	e7f3      	b.n	800799e <_printf_float+0x192>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e7f1      	b.n	800799e <_printf_float+0x192>
 80079ba:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80079be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80079c2:	4293      	cmp	r3, r2
 80079c4:	db05      	blt.n	80079d2 <_printf_float+0x1c6>
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	6123      	str	r3, [r4, #16]
 80079ca:	07d1      	lsls	r1, r2, #31
 80079cc:	d5e8      	bpl.n	80079a0 <_printf_float+0x194>
 80079ce:	3301      	adds	r3, #1
 80079d0:	e7e5      	b.n	800799e <_printf_float+0x192>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	bfd4      	ite	le
 80079d6:	f1c3 0302 	rsble	r3, r3, #2
 80079da:	2301      	movgt	r3, #1
 80079dc:	4413      	add	r3, r2
 80079de:	e7de      	b.n	800799e <_printf_float+0x192>
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	055a      	lsls	r2, r3, #21
 80079e4:	d407      	bmi.n	80079f6 <_printf_float+0x1ea>
 80079e6:	6923      	ldr	r3, [r4, #16]
 80079e8:	4642      	mov	r2, r8
 80079ea:	4631      	mov	r1, r6
 80079ec:	4628      	mov	r0, r5
 80079ee:	47b8      	blx	r7
 80079f0:	3001      	adds	r0, #1
 80079f2:	d12b      	bne.n	8007a4c <_printf_float+0x240>
 80079f4:	e767      	b.n	80078c6 <_printf_float+0xba>
 80079f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80079fa:	f240 80dc 	bls.w	8007bb6 <_printf_float+0x3aa>
 80079fe:	2200      	movs	r2, #0
 8007a00:	2300      	movs	r3, #0
 8007a02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a06:	f7f9 f87f 	bl	8000b08 <__aeabi_dcmpeq>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d033      	beq.n	8007a76 <_printf_float+0x26a>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4a41      	ldr	r2, [pc, #260]	; (8007b18 <_printf_float+0x30c>)
 8007a12:	4631      	mov	r1, r6
 8007a14:	4628      	mov	r0, r5
 8007a16:	47b8      	blx	r7
 8007a18:	3001      	adds	r0, #1
 8007a1a:	f43f af54 	beq.w	80078c6 <_printf_float+0xba>
 8007a1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a22:	429a      	cmp	r2, r3
 8007a24:	db02      	blt.n	8007a2c <_printf_float+0x220>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	07d8      	lsls	r0, r3, #31
 8007a2a:	d50f      	bpl.n	8007a4c <_printf_float+0x240>
 8007a2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a30:	4631      	mov	r1, r6
 8007a32:	4628      	mov	r0, r5
 8007a34:	47b8      	blx	r7
 8007a36:	3001      	adds	r0, #1
 8007a38:	f43f af45 	beq.w	80078c6 <_printf_float+0xba>
 8007a3c:	f04f 0800 	mov.w	r8, #0
 8007a40:	f104 091a 	add.w	r9, r4, #26
 8007a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a46:	3b01      	subs	r3, #1
 8007a48:	4543      	cmp	r3, r8
 8007a4a:	dc09      	bgt.n	8007a60 <_printf_float+0x254>
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	079b      	lsls	r3, r3, #30
 8007a50:	f100 8103 	bmi.w	8007c5a <_printf_float+0x44e>
 8007a54:	68e0      	ldr	r0, [r4, #12]
 8007a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a58:	4298      	cmp	r0, r3
 8007a5a:	bfb8      	it	lt
 8007a5c:	4618      	movlt	r0, r3
 8007a5e:	e734      	b.n	80078ca <_printf_float+0xbe>
 8007a60:	2301      	movs	r3, #1
 8007a62:	464a      	mov	r2, r9
 8007a64:	4631      	mov	r1, r6
 8007a66:	4628      	mov	r0, r5
 8007a68:	47b8      	blx	r7
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	f43f af2b 	beq.w	80078c6 <_printf_float+0xba>
 8007a70:	f108 0801 	add.w	r8, r8, #1
 8007a74:	e7e6      	b.n	8007a44 <_printf_float+0x238>
 8007a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	dc2b      	bgt.n	8007ad4 <_printf_float+0x2c8>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	4a26      	ldr	r2, [pc, #152]	; (8007b18 <_printf_float+0x30c>)
 8007a80:	4631      	mov	r1, r6
 8007a82:	4628      	mov	r0, r5
 8007a84:	47b8      	blx	r7
 8007a86:	3001      	adds	r0, #1
 8007a88:	f43f af1d 	beq.w	80078c6 <_printf_float+0xba>
 8007a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8e:	b923      	cbnz	r3, 8007a9a <_printf_float+0x28e>
 8007a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a92:	b913      	cbnz	r3, 8007a9a <_printf_float+0x28e>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	07d9      	lsls	r1, r3, #31
 8007a98:	d5d8      	bpl.n	8007a4c <_printf_float+0x240>
 8007a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	47b8      	blx	r7
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	f43f af0e 	beq.w	80078c6 <_printf_float+0xba>
 8007aaa:	f04f 0900 	mov.w	r9, #0
 8007aae:	f104 0a1a 	add.w	sl, r4, #26
 8007ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab4:	425b      	negs	r3, r3
 8007ab6:	454b      	cmp	r3, r9
 8007ab8:	dc01      	bgt.n	8007abe <_printf_float+0x2b2>
 8007aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007abc:	e794      	b.n	80079e8 <_printf_float+0x1dc>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4652      	mov	r2, sl
 8007ac2:	4631      	mov	r1, r6
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	47b8      	blx	r7
 8007ac8:	3001      	adds	r0, #1
 8007aca:	f43f aefc 	beq.w	80078c6 <_printf_float+0xba>
 8007ace:	f109 0901 	add.w	r9, r9, #1
 8007ad2:	e7ee      	b.n	8007ab2 <_printf_float+0x2a6>
 8007ad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	bfa8      	it	ge
 8007adc:	461a      	movge	r2, r3
 8007ade:	2a00      	cmp	r2, #0
 8007ae0:	4691      	mov	r9, r2
 8007ae2:	dd07      	ble.n	8007af4 <_printf_float+0x2e8>
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4642      	mov	r2, r8
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	f43f aee9 	beq.w	80078c6 <_printf_float+0xba>
 8007af4:	f104 031a 	add.w	r3, r4, #26
 8007af8:	f04f 0b00 	mov.w	fp, #0
 8007afc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b00:	9306      	str	r3, [sp, #24]
 8007b02:	e015      	b.n	8007b30 <_printf_float+0x324>
 8007b04:	7fefffff 	.word	0x7fefffff
 8007b08:	080097b8 	.word	0x080097b8
 8007b0c:	080097b4 	.word	0x080097b4
 8007b10:	080097c0 	.word	0x080097c0
 8007b14:	080097bc 	.word	0x080097bc
 8007b18:	080097c4 	.word	0x080097c4
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	9a06      	ldr	r2, [sp, #24]
 8007b20:	4631      	mov	r1, r6
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b8      	blx	r7
 8007b26:	3001      	adds	r0, #1
 8007b28:	f43f aecd 	beq.w	80078c6 <_printf_float+0xba>
 8007b2c:	f10b 0b01 	add.w	fp, fp, #1
 8007b30:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007b34:	ebaa 0309 	sub.w	r3, sl, r9
 8007b38:	455b      	cmp	r3, fp
 8007b3a:	dcef      	bgt.n	8007b1c <_printf_float+0x310>
 8007b3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b40:	429a      	cmp	r2, r3
 8007b42:	44d0      	add	r8, sl
 8007b44:	db15      	blt.n	8007b72 <_printf_float+0x366>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	07da      	lsls	r2, r3, #31
 8007b4a:	d412      	bmi.n	8007b72 <_printf_float+0x366>
 8007b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b50:	eba3 020a 	sub.w	r2, r3, sl
 8007b54:	eba3 0a01 	sub.w	sl, r3, r1
 8007b58:	4592      	cmp	sl, r2
 8007b5a:	bfa8      	it	ge
 8007b5c:	4692      	movge	sl, r2
 8007b5e:	f1ba 0f00 	cmp.w	sl, #0
 8007b62:	dc0e      	bgt.n	8007b82 <_printf_float+0x376>
 8007b64:	f04f 0800 	mov.w	r8, #0
 8007b68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b6c:	f104 091a 	add.w	r9, r4, #26
 8007b70:	e019      	b.n	8007ba6 <_printf_float+0x39a>
 8007b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b8      	blx	r7
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d1e5      	bne.n	8007b4c <_printf_float+0x340>
 8007b80:	e6a1      	b.n	80078c6 <_printf_float+0xba>
 8007b82:	4653      	mov	r3, sl
 8007b84:	4642      	mov	r2, r8
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d1e9      	bne.n	8007b64 <_printf_float+0x358>
 8007b90:	e699      	b.n	80078c6 <_printf_float+0xba>
 8007b92:	2301      	movs	r3, #1
 8007b94:	464a      	mov	r2, r9
 8007b96:	4631      	mov	r1, r6
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b8      	blx	r7
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	f43f ae92 	beq.w	80078c6 <_printf_float+0xba>
 8007ba2:	f108 0801 	add.w	r8, r8, #1
 8007ba6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	eba3 030a 	sub.w	r3, r3, sl
 8007bb0:	4543      	cmp	r3, r8
 8007bb2:	dcee      	bgt.n	8007b92 <_printf_float+0x386>
 8007bb4:	e74a      	b.n	8007a4c <_printf_float+0x240>
 8007bb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bb8:	2a01      	cmp	r2, #1
 8007bba:	dc01      	bgt.n	8007bc0 <_printf_float+0x3b4>
 8007bbc:	07db      	lsls	r3, r3, #31
 8007bbe:	d53a      	bpl.n	8007c36 <_printf_float+0x42a>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	4642      	mov	r2, r8
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	f43f ae7b 	beq.w	80078c6 <_printf_float+0xba>
 8007bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	47b8      	blx	r7
 8007bda:	3001      	adds	r0, #1
 8007bdc:	f108 0801 	add.w	r8, r8, #1
 8007be0:	f43f ae71 	beq.w	80078c6 <_printf_float+0xba>
 8007be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be6:	2200      	movs	r2, #0
 8007be8:	f103 3aff 	add.w	sl, r3, #4294967295
 8007bec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f7f8 ff89 	bl	8000b08 <__aeabi_dcmpeq>
 8007bf6:	b9c8      	cbnz	r0, 8007c2c <_printf_float+0x420>
 8007bf8:	4653      	mov	r3, sl
 8007bfa:	4642      	mov	r2, r8
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47b8      	blx	r7
 8007c02:	3001      	adds	r0, #1
 8007c04:	d10e      	bne.n	8007c24 <_printf_float+0x418>
 8007c06:	e65e      	b.n	80078c6 <_printf_float+0xba>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	4652      	mov	r2, sl
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4628      	mov	r0, r5
 8007c10:	47b8      	blx	r7
 8007c12:	3001      	adds	r0, #1
 8007c14:	f43f ae57 	beq.w	80078c6 <_printf_float+0xba>
 8007c18:	f108 0801 	add.w	r8, r8, #1
 8007c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	4543      	cmp	r3, r8
 8007c22:	dcf1      	bgt.n	8007c08 <_printf_float+0x3fc>
 8007c24:	464b      	mov	r3, r9
 8007c26:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c2a:	e6de      	b.n	80079ea <_printf_float+0x1de>
 8007c2c:	f04f 0800 	mov.w	r8, #0
 8007c30:	f104 0a1a 	add.w	sl, r4, #26
 8007c34:	e7f2      	b.n	8007c1c <_printf_float+0x410>
 8007c36:	2301      	movs	r3, #1
 8007c38:	e7df      	b.n	8007bfa <_printf_float+0x3ee>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	464a      	mov	r2, r9
 8007c3e:	4631      	mov	r1, r6
 8007c40:	4628      	mov	r0, r5
 8007c42:	47b8      	blx	r7
 8007c44:	3001      	adds	r0, #1
 8007c46:	f43f ae3e 	beq.w	80078c6 <_printf_float+0xba>
 8007c4a:	f108 0801 	add.w	r8, r8, #1
 8007c4e:	68e3      	ldr	r3, [r4, #12]
 8007c50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c52:	1a9b      	subs	r3, r3, r2
 8007c54:	4543      	cmp	r3, r8
 8007c56:	dcf0      	bgt.n	8007c3a <_printf_float+0x42e>
 8007c58:	e6fc      	b.n	8007a54 <_printf_float+0x248>
 8007c5a:	f04f 0800 	mov.w	r8, #0
 8007c5e:	f104 0919 	add.w	r9, r4, #25
 8007c62:	e7f4      	b.n	8007c4e <_printf_float+0x442>
 8007c64:	2900      	cmp	r1, #0
 8007c66:	f43f ae8b 	beq.w	8007980 <_printf_float+0x174>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007c70:	ab09      	add	r3, sp, #36	; 0x24
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	ec49 8b10 	vmov	d0, r8, r9
 8007c78:	6022      	str	r2, [r4, #0]
 8007c7a:	f8cd a004 	str.w	sl, [sp, #4]
 8007c7e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c82:	4628      	mov	r0, r5
 8007c84:	f7ff fd2e 	bl	80076e4 <__cvt>
 8007c88:	4680      	mov	r8, r0
 8007c8a:	e648      	b.n	800791e <_printf_float+0x112>

08007c8c <_printf_common>:
 8007c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	4691      	mov	r9, r2
 8007c92:	461f      	mov	r7, r3
 8007c94:	688a      	ldr	r2, [r1, #8]
 8007c96:	690b      	ldr	r3, [r1, #16]
 8007c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	bfb8      	it	lt
 8007ca0:	4613      	movlt	r3, r2
 8007ca2:	f8c9 3000 	str.w	r3, [r9]
 8007ca6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007caa:	4606      	mov	r6, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	b112      	cbz	r2, 8007cb6 <_printf_common+0x2a>
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	f8c9 3000 	str.w	r3, [r9]
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	0699      	lsls	r1, r3, #26
 8007cba:	bf42      	ittt	mi
 8007cbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007cc0:	3302      	addmi	r3, #2
 8007cc2:	f8c9 3000 	strmi.w	r3, [r9]
 8007cc6:	6825      	ldr	r5, [r4, #0]
 8007cc8:	f015 0506 	ands.w	r5, r5, #6
 8007ccc:	d107      	bne.n	8007cde <_printf_common+0x52>
 8007cce:	f104 0a19 	add.w	sl, r4, #25
 8007cd2:	68e3      	ldr	r3, [r4, #12]
 8007cd4:	f8d9 2000 	ldr.w	r2, [r9]
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	42ab      	cmp	r3, r5
 8007cdc:	dc28      	bgt.n	8007d30 <_printf_common+0xa4>
 8007cde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ce2:	6822      	ldr	r2, [r4, #0]
 8007ce4:	3300      	adds	r3, #0
 8007ce6:	bf18      	it	ne
 8007ce8:	2301      	movne	r3, #1
 8007cea:	0692      	lsls	r2, r2, #26
 8007cec:	d42d      	bmi.n	8007d4a <_printf_common+0xbe>
 8007cee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	47c0      	blx	r8
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d020      	beq.n	8007d3e <_printf_common+0xb2>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	68e5      	ldr	r5, [r4, #12]
 8007d00:	f8d9 2000 	ldr.w	r2, [r9]
 8007d04:	f003 0306 	and.w	r3, r3, #6
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	bf08      	it	eq
 8007d0c:	1aad      	subeq	r5, r5, r2
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	6922      	ldr	r2, [r4, #16]
 8007d12:	bf0c      	ite	eq
 8007d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d18:	2500      	movne	r5, #0
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	bfc4      	itt	gt
 8007d1e:	1a9b      	subgt	r3, r3, r2
 8007d20:	18ed      	addgt	r5, r5, r3
 8007d22:	f04f 0900 	mov.w	r9, #0
 8007d26:	341a      	adds	r4, #26
 8007d28:	454d      	cmp	r5, r9
 8007d2a:	d11a      	bne.n	8007d62 <_printf_common+0xd6>
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	e008      	b.n	8007d42 <_printf_common+0xb6>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4652      	mov	r2, sl
 8007d34:	4639      	mov	r1, r7
 8007d36:	4630      	mov	r0, r6
 8007d38:	47c0      	blx	r8
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	d103      	bne.n	8007d46 <_printf_common+0xba>
 8007d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d46:	3501      	adds	r5, #1
 8007d48:	e7c3      	b.n	8007cd2 <_printf_common+0x46>
 8007d4a:	18e1      	adds	r1, r4, r3
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	2030      	movs	r0, #48	; 0x30
 8007d50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d54:	4422      	add	r2, r4
 8007d56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d5e:	3302      	adds	r3, #2
 8007d60:	e7c5      	b.n	8007cee <_printf_common+0x62>
 8007d62:	2301      	movs	r3, #1
 8007d64:	4622      	mov	r2, r4
 8007d66:	4639      	mov	r1, r7
 8007d68:	4630      	mov	r0, r6
 8007d6a:	47c0      	blx	r8
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d0e6      	beq.n	8007d3e <_printf_common+0xb2>
 8007d70:	f109 0901 	add.w	r9, r9, #1
 8007d74:	e7d8      	b.n	8007d28 <_printf_common+0x9c>
	...

08007d78 <_printf_i>:
 8007d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007d80:	460c      	mov	r4, r1
 8007d82:	7e09      	ldrb	r1, [r1, #24]
 8007d84:	b085      	sub	sp, #20
 8007d86:	296e      	cmp	r1, #110	; 0x6e
 8007d88:	4617      	mov	r7, r2
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	4698      	mov	r8, r3
 8007d8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d90:	f000 80b3 	beq.w	8007efa <_printf_i+0x182>
 8007d94:	d822      	bhi.n	8007ddc <_printf_i+0x64>
 8007d96:	2963      	cmp	r1, #99	; 0x63
 8007d98:	d036      	beq.n	8007e08 <_printf_i+0x90>
 8007d9a:	d80a      	bhi.n	8007db2 <_printf_i+0x3a>
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	f000 80b9 	beq.w	8007f14 <_printf_i+0x19c>
 8007da2:	2958      	cmp	r1, #88	; 0x58
 8007da4:	f000 8083 	beq.w	8007eae <_printf_i+0x136>
 8007da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007db0:	e032      	b.n	8007e18 <_printf_i+0xa0>
 8007db2:	2964      	cmp	r1, #100	; 0x64
 8007db4:	d001      	beq.n	8007dba <_printf_i+0x42>
 8007db6:	2969      	cmp	r1, #105	; 0x69
 8007db8:	d1f6      	bne.n	8007da8 <_printf_i+0x30>
 8007dba:	6820      	ldr	r0, [r4, #0]
 8007dbc:	6813      	ldr	r3, [r2, #0]
 8007dbe:	0605      	lsls	r5, r0, #24
 8007dc0:	f103 0104 	add.w	r1, r3, #4
 8007dc4:	d52a      	bpl.n	8007e1c <_printf_i+0xa4>
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6011      	str	r1, [r2, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	da03      	bge.n	8007dd6 <_printf_i+0x5e>
 8007dce:	222d      	movs	r2, #45	; 0x2d
 8007dd0:	425b      	negs	r3, r3
 8007dd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007dd6:	486f      	ldr	r0, [pc, #444]	; (8007f94 <_printf_i+0x21c>)
 8007dd8:	220a      	movs	r2, #10
 8007dda:	e039      	b.n	8007e50 <_printf_i+0xd8>
 8007ddc:	2973      	cmp	r1, #115	; 0x73
 8007dde:	f000 809d 	beq.w	8007f1c <_printf_i+0x1a4>
 8007de2:	d808      	bhi.n	8007df6 <_printf_i+0x7e>
 8007de4:	296f      	cmp	r1, #111	; 0x6f
 8007de6:	d020      	beq.n	8007e2a <_printf_i+0xb2>
 8007de8:	2970      	cmp	r1, #112	; 0x70
 8007dea:	d1dd      	bne.n	8007da8 <_printf_i+0x30>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	f043 0320 	orr.w	r3, r3, #32
 8007df2:	6023      	str	r3, [r4, #0]
 8007df4:	e003      	b.n	8007dfe <_printf_i+0x86>
 8007df6:	2975      	cmp	r1, #117	; 0x75
 8007df8:	d017      	beq.n	8007e2a <_printf_i+0xb2>
 8007dfa:	2978      	cmp	r1, #120	; 0x78
 8007dfc:	d1d4      	bne.n	8007da8 <_printf_i+0x30>
 8007dfe:	2378      	movs	r3, #120	; 0x78
 8007e00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e04:	4864      	ldr	r0, [pc, #400]	; (8007f98 <_printf_i+0x220>)
 8007e06:	e055      	b.n	8007eb4 <_printf_i+0x13c>
 8007e08:	6813      	ldr	r3, [r2, #0]
 8007e0a:	1d19      	adds	r1, r3, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6011      	str	r1, [r2, #0]
 8007e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e08c      	b.n	8007f36 <_printf_i+0x1be>
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6011      	str	r1, [r2, #0]
 8007e20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e24:	bf18      	it	ne
 8007e26:	b21b      	sxthne	r3, r3
 8007e28:	e7cf      	b.n	8007dca <_printf_i+0x52>
 8007e2a:	6813      	ldr	r3, [r2, #0]
 8007e2c:	6825      	ldr	r5, [r4, #0]
 8007e2e:	1d18      	adds	r0, r3, #4
 8007e30:	6010      	str	r0, [r2, #0]
 8007e32:	0628      	lsls	r0, r5, #24
 8007e34:	d501      	bpl.n	8007e3a <_printf_i+0xc2>
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	e002      	b.n	8007e40 <_printf_i+0xc8>
 8007e3a:	0668      	lsls	r0, r5, #25
 8007e3c:	d5fb      	bpl.n	8007e36 <_printf_i+0xbe>
 8007e3e:	881b      	ldrh	r3, [r3, #0]
 8007e40:	4854      	ldr	r0, [pc, #336]	; (8007f94 <_printf_i+0x21c>)
 8007e42:	296f      	cmp	r1, #111	; 0x6f
 8007e44:	bf14      	ite	ne
 8007e46:	220a      	movne	r2, #10
 8007e48:	2208      	moveq	r2, #8
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e50:	6865      	ldr	r5, [r4, #4]
 8007e52:	60a5      	str	r5, [r4, #8]
 8007e54:	2d00      	cmp	r5, #0
 8007e56:	f2c0 8095 	blt.w	8007f84 <_printf_i+0x20c>
 8007e5a:	6821      	ldr	r1, [r4, #0]
 8007e5c:	f021 0104 	bic.w	r1, r1, #4
 8007e60:	6021      	str	r1, [r4, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d13d      	bne.n	8007ee2 <_printf_i+0x16a>
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	f040 808e 	bne.w	8007f88 <_printf_i+0x210>
 8007e6c:	4665      	mov	r5, ip
 8007e6e:	2a08      	cmp	r2, #8
 8007e70:	d10b      	bne.n	8007e8a <_printf_i+0x112>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	07db      	lsls	r3, r3, #31
 8007e76:	d508      	bpl.n	8007e8a <_printf_i+0x112>
 8007e78:	6923      	ldr	r3, [r4, #16]
 8007e7a:	6862      	ldr	r2, [r4, #4]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	bfde      	ittt	le
 8007e80:	2330      	movle	r3, #48	; 0x30
 8007e82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e8a:	ebac 0305 	sub.w	r3, ip, r5
 8007e8e:	6123      	str	r3, [r4, #16]
 8007e90:	f8cd 8000 	str.w	r8, [sp]
 8007e94:	463b      	mov	r3, r7
 8007e96:	aa03      	add	r2, sp, #12
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7ff fef6 	bl	8007c8c <_printf_common>
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d14d      	bne.n	8007f40 <_printf_i+0x1c8>
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea8:	b005      	add	sp, #20
 8007eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eae:	4839      	ldr	r0, [pc, #228]	; (8007f94 <_printf_i+0x21c>)
 8007eb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007eb4:	6813      	ldr	r3, [r2, #0]
 8007eb6:	6821      	ldr	r1, [r4, #0]
 8007eb8:	1d1d      	adds	r5, r3, #4
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6015      	str	r5, [r2, #0]
 8007ebe:	060a      	lsls	r2, r1, #24
 8007ec0:	d50b      	bpl.n	8007eda <_printf_i+0x162>
 8007ec2:	07ca      	lsls	r2, r1, #31
 8007ec4:	bf44      	itt	mi
 8007ec6:	f041 0120 	orrmi.w	r1, r1, #32
 8007eca:	6021      	strmi	r1, [r4, #0]
 8007ecc:	b91b      	cbnz	r3, 8007ed6 <_printf_i+0x15e>
 8007ece:	6822      	ldr	r2, [r4, #0]
 8007ed0:	f022 0220 	bic.w	r2, r2, #32
 8007ed4:	6022      	str	r2, [r4, #0]
 8007ed6:	2210      	movs	r2, #16
 8007ed8:	e7b7      	b.n	8007e4a <_printf_i+0xd2>
 8007eda:	064d      	lsls	r5, r1, #25
 8007edc:	bf48      	it	mi
 8007ede:	b29b      	uxthmi	r3, r3
 8007ee0:	e7ef      	b.n	8007ec2 <_printf_i+0x14a>
 8007ee2:	4665      	mov	r5, ip
 8007ee4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ee8:	fb02 3311 	mls	r3, r2, r1, r3
 8007eec:	5cc3      	ldrb	r3, [r0, r3]
 8007eee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	d1f5      	bne.n	8007ee4 <_printf_i+0x16c>
 8007ef8:	e7b9      	b.n	8007e6e <_printf_i+0xf6>
 8007efa:	6813      	ldr	r3, [r2, #0]
 8007efc:	6825      	ldr	r5, [r4, #0]
 8007efe:	6961      	ldr	r1, [r4, #20]
 8007f00:	1d18      	adds	r0, r3, #4
 8007f02:	6010      	str	r0, [r2, #0]
 8007f04:	0628      	lsls	r0, r5, #24
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	d501      	bpl.n	8007f0e <_printf_i+0x196>
 8007f0a:	6019      	str	r1, [r3, #0]
 8007f0c:	e002      	b.n	8007f14 <_printf_i+0x19c>
 8007f0e:	066a      	lsls	r2, r5, #25
 8007f10:	d5fb      	bpl.n	8007f0a <_printf_i+0x192>
 8007f12:	8019      	strh	r1, [r3, #0]
 8007f14:	2300      	movs	r3, #0
 8007f16:	6123      	str	r3, [r4, #16]
 8007f18:	4665      	mov	r5, ip
 8007f1a:	e7b9      	b.n	8007e90 <_printf_i+0x118>
 8007f1c:	6813      	ldr	r3, [r2, #0]
 8007f1e:	1d19      	adds	r1, r3, #4
 8007f20:	6011      	str	r1, [r2, #0]
 8007f22:	681d      	ldr	r5, [r3, #0]
 8007f24:	6862      	ldr	r2, [r4, #4]
 8007f26:	2100      	movs	r1, #0
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f7f8 f979 	bl	8000220 <memchr>
 8007f2e:	b108      	cbz	r0, 8007f34 <_printf_i+0x1bc>
 8007f30:	1b40      	subs	r0, r0, r5
 8007f32:	6060      	str	r0, [r4, #4]
 8007f34:	6863      	ldr	r3, [r4, #4]
 8007f36:	6123      	str	r3, [r4, #16]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f3e:	e7a7      	b.n	8007e90 <_printf_i+0x118>
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	462a      	mov	r2, r5
 8007f44:	4639      	mov	r1, r7
 8007f46:	4630      	mov	r0, r6
 8007f48:	47c0      	blx	r8
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	d0aa      	beq.n	8007ea4 <_printf_i+0x12c>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	079b      	lsls	r3, r3, #30
 8007f52:	d413      	bmi.n	8007f7c <_printf_i+0x204>
 8007f54:	68e0      	ldr	r0, [r4, #12]
 8007f56:	9b03      	ldr	r3, [sp, #12]
 8007f58:	4298      	cmp	r0, r3
 8007f5a:	bfb8      	it	lt
 8007f5c:	4618      	movlt	r0, r3
 8007f5e:	e7a3      	b.n	8007ea8 <_printf_i+0x130>
 8007f60:	2301      	movs	r3, #1
 8007f62:	464a      	mov	r2, r9
 8007f64:	4639      	mov	r1, r7
 8007f66:	4630      	mov	r0, r6
 8007f68:	47c0      	blx	r8
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d09a      	beq.n	8007ea4 <_printf_i+0x12c>
 8007f6e:	3501      	adds	r5, #1
 8007f70:	68e3      	ldr	r3, [r4, #12]
 8007f72:	9a03      	ldr	r2, [sp, #12]
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	42ab      	cmp	r3, r5
 8007f78:	dcf2      	bgt.n	8007f60 <_printf_i+0x1e8>
 8007f7a:	e7eb      	b.n	8007f54 <_printf_i+0x1dc>
 8007f7c:	2500      	movs	r5, #0
 8007f7e:	f104 0919 	add.w	r9, r4, #25
 8007f82:	e7f5      	b.n	8007f70 <_printf_i+0x1f8>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1ac      	bne.n	8007ee2 <_printf_i+0x16a>
 8007f88:	7803      	ldrb	r3, [r0, #0]
 8007f8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f92:	e76c      	b.n	8007e6e <_printf_i+0xf6>
 8007f94:	080097c6 	.word	0x080097c6
 8007f98:	080097d7 	.word	0x080097d7

08007f9c <siprintf>:
 8007f9c:	b40e      	push	{r1, r2, r3}
 8007f9e:	b500      	push	{lr}
 8007fa0:	b09c      	sub	sp, #112	; 0x70
 8007fa2:	ab1d      	add	r3, sp, #116	; 0x74
 8007fa4:	9002      	str	r0, [sp, #8]
 8007fa6:	9006      	str	r0, [sp, #24]
 8007fa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fac:	4809      	ldr	r0, [pc, #36]	; (8007fd4 <siprintf+0x38>)
 8007fae:	9107      	str	r1, [sp, #28]
 8007fb0:	9104      	str	r1, [sp, #16]
 8007fb2:	4909      	ldr	r1, [pc, #36]	; (8007fd8 <siprintf+0x3c>)
 8007fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb8:	9105      	str	r1, [sp, #20]
 8007fba:	6800      	ldr	r0, [r0, #0]
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	a902      	add	r1, sp, #8
 8007fc0:	f001 fa5e 	bl	8009480 <_svfiprintf_r>
 8007fc4:	9b02      	ldr	r3, [sp, #8]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	b01c      	add	sp, #112	; 0x70
 8007fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fd0:	b003      	add	sp, #12
 8007fd2:	4770      	bx	lr
 8007fd4:	2000000c 	.word	0x2000000c
 8007fd8:	ffff0208 	.word	0xffff0208

08007fdc <quorem>:
 8007fdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe0:	6903      	ldr	r3, [r0, #16]
 8007fe2:	690c      	ldr	r4, [r1, #16]
 8007fe4:	42a3      	cmp	r3, r4
 8007fe6:	4680      	mov	r8, r0
 8007fe8:	f2c0 8082 	blt.w	80080f0 <quorem+0x114>
 8007fec:	3c01      	subs	r4, #1
 8007fee:	f101 0714 	add.w	r7, r1, #20
 8007ff2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007ff6:	f100 0614 	add.w	r6, r0, #20
 8007ffa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007ffe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008002:	eb06 030c 	add.w	r3, r6, ip
 8008006:	3501      	adds	r5, #1
 8008008:	eb07 090c 	add.w	r9, r7, ip
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008012:	b395      	cbz	r5, 800807a <quorem+0x9e>
 8008014:	f04f 0a00 	mov.w	sl, #0
 8008018:	4638      	mov	r0, r7
 800801a:	46b6      	mov	lr, r6
 800801c:	46d3      	mov	fp, sl
 800801e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008022:	b293      	uxth	r3, r2
 8008024:	fb05 a303 	mla	r3, r5, r3, sl
 8008028:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800802c:	b29b      	uxth	r3, r3
 800802e:	ebab 0303 	sub.w	r3, fp, r3
 8008032:	0c12      	lsrs	r2, r2, #16
 8008034:	f8de b000 	ldr.w	fp, [lr]
 8008038:	fb05 a202 	mla	r2, r5, r2, sl
 800803c:	fa13 f38b 	uxtah	r3, r3, fp
 8008040:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008044:	fa1f fb82 	uxth.w	fp, r2
 8008048:	f8de 2000 	ldr.w	r2, [lr]
 800804c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008050:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008054:	b29b      	uxth	r3, r3
 8008056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800805a:	4581      	cmp	r9, r0
 800805c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008060:	f84e 3b04 	str.w	r3, [lr], #4
 8008064:	d2db      	bcs.n	800801e <quorem+0x42>
 8008066:	f856 300c 	ldr.w	r3, [r6, ip]
 800806a:	b933      	cbnz	r3, 800807a <quorem+0x9e>
 800806c:	9b01      	ldr	r3, [sp, #4]
 800806e:	3b04      	subs	r3, #4
 8008070:	429e      	cmp	r6, r3
 8008072:	461a      	mov	r2, r3
 8008074:	d330      	bcc.n	80080d8 <quorem+0xfc>
 8008076:	f8c8 4010 	str.w	r4, [r8, #16]
 800807a:	4640      	mov	r0, r8
 800807c:	f001 f82a 	bl	80090d4 <__mcmp>
 8008080:	2800      	cmp	r0, #0
 8008082:	db25      	blt.n	80080d0 <quorem+0xf4>
 8008084:	3501      	adds	r5, #1
 8008086:	4630      	mov	r0, r6
 8008088:	f04f 0c00 	mov.w	ip, #0
 800808c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008090:	f8d0 e000 	ldr.w	lr, [r0]
 8008094:	b293      	uxth	r3, r2
 8008096:	ebac 0303 	sub.w	r3, ip, r3
 800809a:	0c12      	lsrs	r2, r2, #16
 800809c:	fa13 f38e 	uxtah	r3, r3, lr
 80080a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080ae:	45b9      	cmp	r9, r7
 80080b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080b4:	f840 3b04 	str.w	r3, [r0], #4
 80080b8:	d2e8      	bcs.n	800808c <quorem+0xb0>
 80080ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80080be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80080c2:	b92a      	cbnz	r2, 80080d0 <quorem+0xf4>
 80080c4:	3b04      	subs	r3, #4
 80080c6:	429e      	cmp	r6, r3
 80080c8:	461a      	mov	r2, r3
 80080ca:	d30b      	bcc.n	80080e4 <quorem+0x108>
 80080cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80080d0:	4628      	mov	r0, r5
 80080d2:	b003      	add	sp, #12
 80080d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d8:	6812      	ldr	r2, [r2, #0]
 80080da:	3b04      	subs	r3, #4
 80080dc:	2a00      	cmp	r2, #0
 80080de:	d1ca      	bne.n	8008076 <quorem+0x9a>
 80080e0:	3c01      	subs	r4, #1
 80080e2:	e7c5      	b.n	8008070 <quorem+0x94>
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	3b04      	subs	r3, #4
 80080e8:	2a00      	cmp	r2, #0
 80080ea:	d1ef      	bne.n	80080cc <quorem+0xf0>
 80080ec:	3c01      	subs	r4, #1
 80080ee:	e7ea      	b.n	80080c6 <quorem+0xea>
 80080f0:	2000      	movs	r0, #0
 80080f2:	e7ee      	b.n	80080d2 <quorem+0xf6>
 80080f4:	0000      	movs	r0, r0
	...

080080f8 <_dtoa_r>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	ec57 6b10 	vmov	r6, r7, d0
 8008100:	b097      	sub	sp, #92	; 0x5c
 8008102:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008104:	9106      	str	r1, [sp, #24]
 8008106:	4604      	mov	r4, r0
 8008108:	920b      	str	r2, [sp, #44]	; 0x2c
 800810a:	9312      	str	r3, [sp, #72]	; 0x48
 800810c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008110:	e9cd 6700 	strd	r6, r7, [sp]
 8008114:	b93d      	cbnz	r5, 8008126 <_dtoa_r+0x2e>
 8008116:	2010      	movs	r0, #16
 8008118:	f000 fdb4 	bl	8008c84 <malloc>
 800811c:	6260      	str	r0, [r4, #36]	; 0x24
 800811e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008122:	6005      	str	r5, [r0, #0]
 8008124:	60c5      	str	r5, [r0, #12]
 8008126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008128:	6819      	ldr	r1, [r3, #0]
 800812a:	b151      	cbz	r1, 8008142 <_dtoa_r+0x4a>
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	604a      	str	r2, [r1, #4]
 8008130:	2301      	movs	r3, #1
 8008132:	4093      	lsls	r3, r2
 8008134:	608b      	str	r3, [r1, #8]
 8008136:	4620      	mov	r0, r4
 8008138:	f000 fdeb 	bl	8008d12 <_Bfree>
 800813c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	1e3b      	subs	r3, r7, #0
 8008144:	bfbb      	ittet	lt
 8008146:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800814a:	9301      	strlt	r3, [sp, #4]
 800814c:	2300      	movge	r3, #0
 800814e:	2201      	movlt	r2, #1
 8008150:	bfac      	ite	ge
 8008152:	f8c8 3000 	strge.w	r3, [r8]
 8008156:	f8c8 2000 	strlt.w	r2, [r8]
 800815a:	4baf      	ldr	r3, [pc, #700]	; (8008418 <_dtoa_r+0x320>)
 800815c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008160:	ea33 0308 	bics.w	r3, r3, r8
 8008164:	d114      	bne.n	8008190 <_dtoa_r+0x98>
 8008166:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008168:	f242 730f 	movw	r3, #9999	; 0x270f
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	9b00      	ldr	r3, [sp, #0]
 8008170:	b923      	cbnz	r3, 800817c <_dtoa_r+0x84>
 8008172:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008176:	2800      	cmp	r0, #0
 8008178:	f000 8542 	beq.w	8008c00 <_dtoa_r+0xb08>
 800817c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800817e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800842c <_dtoa_r+0x334>
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 8544 	beq.w	8008c10 <_dtoa_r+0xb18>
 8008188:	f10b 0303 	add.w	r3, fp, #3
 800818c:	f000 bd3e 	b.w	8008c0c <_dtoa_r+0xb14>
 8008190:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008194:	2200      	movs	r2, #0
 8008196:	2300      	movs	r3, #0
 8008198:	4630      	mov	r0, r6
 800819a:	4639      	mov	r1, r7
 800819c:	f7f8 fcb4 	bl	8000b08 <__aeabi_dcmpeq>
 80081a0:	4681      	mov	r9, r0
 80081a2:	b168      	cbz	r0, 80081c0 <_dtoa_r+0xc8>
 80081a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081a6:	2301      	movs	r3, #1
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 8524 	beq.w	8008bfa <_dtoa_r+0xb02>
 80081b2:	4b9a      	ldr	r3, [pc, #616]	; (800841c <_dtoa_r+0x324>)
 80081b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80081ba:	6013      	str	r3, [r2, #0]
 80081bc:	f000 bd28 	b.w	8008c10 <_dtoa_r+0xb18>
 80081c0:	aa14      	add	r2, sp, #80	; 0x50
 80081c2:	a915      	add	r1, sp, #84	; 0x54
 80081c4:	ec47 6b10 	vmov	d0, r6, r7
 80081c8:	4620      	mov	r0, r4
 80081ca:	f000 fffa 	bl	80091c2 <__d2b>
 80081ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80081d2:	9004      	str	r0, [sp, #16]
 80081d4:	2d00      	cmp	r5, #0
 80081d6:	d07c      	beq.n	80082d2 <_dtoa_r+0x1da>
 80081d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80081e0:	46b2      	mov	sl, r6
 80081e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80081e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80081ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80081ee:	2200      	movs	r2, #0
 80081f0:	4b8b      	ldr	r3, [pc, #556]	; (8008420 <_dtoa_r+0x328>)
 80081f2:	4650      	mov	r0, sl
 80081f4:	4659      	mov	r1, fp
 80081f6:	f7f8 f867 	bl	80002c8 <__aeabi_dsub>
 80081fa:	a381      	add	r3, pc, #516	; (adr r3, 8008400 <_dtoa_r+0x308>)
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	f7f8 fa1a 	bl	8000638 <__aeabi_dmul>
 8008204:	a380      	add	r3, pc, #512	; (adr r3, 8008408 <_dtoa_r+0x310>)
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	f7f8 f85f 	bl	80002cc <__adddf3>
 800820e:	4606      	mov	r6, r0
 8008210:	4628      	mov	r0, r5
 8008212:	460f      	mov	r7, r1
 8008214:	f7f8 f9a6 	bl	8000564 <__aeabi_i2d>
 8008218:	a37d      	add	r3, pc, #500	; (adr r3, 8008410 <_dtoa_r+0x318>)
 800821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821e:	f7f8 fa0b 	bl	8000638 <__aeabi_dmul>
 8008222:	4602      	mov	r2, r0
 8008224:	460b      	mov	r3, r1
 8008226:	4630      	mov	r0, r6
 8008228:	4639      	mov	r1, r7
 800822a:	f7f8 f84f 	bl	80002cc <__adddf3>
 800822e:	4606      	mov	r6, r0
 8008230:	460f      	mov	r7, r1
 8008232:	f7f8 fcb1 	bl	8000b98 <__aeabi_d2iz>
 8008236:	2200      	movs	r2, #0
 8008238:	4682      	mov	sl, r0
 800823a:	2300      	movs	r3, #0
 800823c:	4630      	mov	r0, r6
 800823e:	4639      	mov	r1, r7
 8008240:	f7f8 fc6c 	bl	8000b1c <__aeabi_dcmplt>
 8008244:	b148      	cbz	r0, 800825a <_dtoa_r+0x162>
 8008246:	4650      	mov	r0, sl
 8008248:	f7f8 f98c 	bl	8000564 <__aeabi_i2d>
 800824c:	4632      	mov	r2, r6
 800824e:	463b      	mov	r3, r7
 8008250:	f7f8 fc5a 	bl	8000b08 <__aeabi_dcmpeq>
 8008254:	b908      	cbnz	r0, 800825a <_dtoa_r+0x162>
 8008256:	f10a 3aff 	add.w	sl, sl, #4294967295
 800825a:	f1ba 0f16 	cmp.w	sl, #22
 800825e:	d859      	bhi.n	8008314 <_dtoa_r+0x21c>
 8008260:	4970      	ldr	r1, [pc, #448]	; (8008424 <_dtoa_r+0x32c>)
 8008262:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008266:	e9dd 2300 	ldrd	r2, r3, [sp]
 800826a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800826e:	f7f8 fc73 	bl	8000b58 <__aeabi_dcmpgt>
 8008272:	2800      	cmp	r0, #0
 8008274:	d050      	beq.n	8008318 <_dtoa_r+0x220>
 8008276:	f10a 3aff 	add.w	sl, sl, #4294967295
 800827a:	2300      	movs	r3, #0
 800827c:	930f      	str	r3, [sp, #60]	; 0x3c
 800827e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008280:	1b5d      	subs	r5, r3, r5
 8008282:	f1b5 0801 	subs.w	r8, r5, #1
 8008286:	bf49      	itett	mi
 8008288:	f1c5 0301 	rsbmi	r3, r5, #1
 800828c:	2300      	movpl	r3, #0
 800828e:	9305      	strmi	r3, [sp, #20]
 8008290:	f04f 0800 	movmi.w	r8, #0
 8008294:	bf58      	it	pl
 8008296:	9305      	strpl	r3, [sp, #20]
 8008298:	f1ba 0f00 	cmp.w	sl, #0
 800829c:	db3e      	blt.n	800831c <_dtoa_r+0x224>
 800829e:	2300      	movs	r3, #0
 80082a0:	44d0      	add	r8, sl
 80082a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80082a6:	9307      	str	r3, [sp, #28]
 80082a8:	9b06      	ldr	r3, [sp, #24]
 80082aa:	2b09      	cmp	r3, #9
 80082ac:	f200 8090 	bhi.w	80083d0 <_dtoa_r+0x2d8>
 80082b0:	2b05      	cmp	r3, #5
 80082b2:	bfc4      	itt	gt
 80082b4:	3b04      	subgt	r3, #4
 80082b6:	9306      	strgt	r3, [sp, #24]
 80082b8:	9b06      	ldr	r3, [sp, #24]
 80082ba:	f1a3 0302 	sub.w	r3, r3, #2
 80082be:	bfcc      	ite	gt
 80082c0:	2500      	movgt	r5, #0
 80082c2:	2501      	movle	r5, #1
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	f200 808f 	bhi.w	80083e8 <_dtoa_r+0x2f0>
 80082ca:	e8df f003 	tbb	[pc, r3]
 80082ce:	7f7d      	.short	0x7f7d
 80082d0:	7131      	.short	0x7131
 80082d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80082d6:	441d      	add	r5, r3
 80082d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80082dc:	2820      	cmp	r0, #32
 80082de:	dd13      	ble.n	8008308 <_dtoa_r+0x210>
 80082e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80082e4:	9b00      	ldr	r3, [sp, #0]
 80082e6:	fa08 f800 	lsl.w	r8, r8, r0
 80082ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80082ee:	fa23 f000 	lsr.w	r0, r3, r0
 80082f2:	ea48 0000 	orr.w	r0, r8, r0
 80082f6:	f7f8 f925 	bl	8000544 <__aeabi_ui2d>
 80082fa:	2301      	movs	r3, #1
 80082fc:	4682      	mov	sl, r0
 80082fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008302:	3d01      	subs	r5, #1
 8008304:	9313      	str	r3, [sp, #76]	; 0x4c
 8008306:	e772      	b.n	80081ee <_dtoa_r+0xf6>
 8008308:	9b00      	ldr	r3, [sp, #0]
 800830a:	f1c0 0020 	rsb	r0, r0, #32
 800830e:	fa03 f000 	lsl.w	r0, r3, r0
 8008312:	e7f0      	b.n	80082f6 <_dtoa_r+0x1fe>
 8008314:	2301      	movs	r3, #1
 8008316:	e7b1      	b.n	800827c <_dtoa_r+0x184>
 8008318:	900f      	str	r0, [sp, #60]	; 0x3c
 800831a:	e7b0      	b.n	800827e <_dtoa_r+0x186>
 800831c:	9b05      	ldr	r3, [sp, #20]
 800831e:	eba3 030a 	sub.w	r3, r3, sl
 8008322:	9305      	str	r3, [sp, #20]
 8008324:	f1ca 0300 	rsb	r3, sl, #0
 8008328:	9307      	str	r3, [sp, #28]
 800832a:	2300      	movs	r3, #0
 800832c:	930e      	str	r3, [sp, #56]	; 0x38
 800832e:	e7bb      	b.n	80082a8 <_dtoa_r+0x1b0>
 8008330:	2301      	movs	r3, #1
 8008332:	930a      	str	r3, [sp, #40]	; 0x28
 8008334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008336:	2b00      	cmp	r3, #0
 8008338:	dd59      	ble.n	80083ee <_dtoa_r+0x2f6>
 800833a:	9302      	str	r3, [sp, #8]
 800833c:	4699      	mov	r9, r3
 800833e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008340:	2200      	movs	r2, #0
 8008342:	6072      	str	r2, [r6, #4]
 8008344:	2204      	movs	r2, #4
 8008346:	f102 0014 	add.w	r0, r2, #20
 800834a:	4298      	cmp	r0, r3
 800834c:	6871      	ldr	r1, [r6, #4]
 800834e:	d953      	bls.n	80083f8 <_dtoa_r+0x300>
 8008350:	4620      	mov	r0, r4
 8008352:	f000 fcaa 	bl	8008caa <_Balloc>
 8008356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008358:	6030      	str	r0, [r6, #0]
 800835a:	f1b9 0f0e 	cmp.w	r9, #14
 800835e:	f8d3 b000 	ldr.w	fp, [r3]
 8008362:	f200 80e6 	bhi.w	8008532 <_dtoa_r+0x43a>
 8008366:	2d00      	cmp	r5, #0
 8008368:	f000 80e3 	beq.w	8008532 <_dtoa_r+0x43a>
 800836c:	ed9d 7b00 	vldr	d7, [sp]
 8008370:	f1ba 0f00 	cmp.w	sl, #0
 8008374:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008378:	dd74      	ble.n	8008464 <_dtoa_r+0x36c>
 800837a:	4a2a      	ldr	r2, [pc, #168]	; (8008424 <_dtoa_r+0x32c>)
 800837c:	f00a 030f 	and.w	r3, sl, #15
 8008380:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008384:	ed93 7b00 	vldr	d7, [r3]
 8008388:	ea4f 162a 	mov.w	r6, sl, asr #4
 800838c:	06f0      	lsls	r0, r6, #27
 800838e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008392:	d565      	bpl.n	8008460 <_dtoa_r+0x368>
 8008394:	4b24      	ldr	r3, [pc, #144]	; (8008428 <_dtoa_r+0x330>)
 8008396:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800839a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800839e:	f7f8 fa75 	bl	800088c <__aeabi_ddiv>
 80083a2:	e9cd 0100 	strd	r0, r1, [sp]
 80083a6:	f006 060f 	and.w	r6, r6, #15
 80083aa:	2503      	movs	r5, #3
 80083ac:	4f1e      	ldr	r7, [pc, #120]	; (8008428 <_dtoa_r+0x330>)
 80083ae:	e04c      	b.n	800844a <_dtoa_r+0x352>
 80083b0:	2301      	movs	r3, #1
 80083b2:	930a      	str	r3, [sp, #40]	; 0x28
 80083b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083b6:	4453      	add	r3, sl
 80083b8:	f103 0901 	add.w	r9, r3, #1
 80083bc:	9302      	str	r3, [sp, #8]
 80083be:	464b      	mov	r3, r9
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	bfb8      	it	lt
 80083c4:	2301      	movlt	r3, #1
 80083c6:	e7ba      	b.n	800833e <_dtoa_r+0x246>
 80083c8:	2300      	movs	r3, #0
 80083ca:	e7b2      	b.n	8008332 <_dtoa_r+0x23a>
 80083cc:	2300      	movs	r3, #0
 80083ce:	e7f0      	b.n	80083b2 <_dtoa_r+0x2ba>
 80083d0:	2501      	movs	r5, #1
 80083d2:	2300      	movs	r3, #0
 80083d4:	9306      	str	r3, [sp, #24]
 80083d6:	950a      	str	r5, [sp, #40]	; 0x28
 80083d8:	f04f 33ff 	mov.w	r3, #4294967295
 80083dc:	9302      	str	r3, [sp, #8]
 80083de:	4699      	mov	r9, r3
 80083e0:	2200      	movs	r2, #0
 80083e2:	2312      	movs	r3, #18
 80083e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80083e6:	e7aa      	b.n	800833e <_dtoa_r+0x246>
 80083e8:	2301      	movs	r3, #1
 80083ea:	930a      	str	r3, [sp, #40]	; 0x28
 80083ec:	e7f4      	b.n	80083d8 <_dtoa_r+0x2e0>
 80083ee:	2301      	movs	r3, #1
 80083f0:	9302      	str	r3, [sp, #8]
 80083f2:	4699      	mov	r9, r3
 80083f4:	461a      	mov	r2, r3
 80083f6:	e7f5      	b.n	80083e4 <_dtoa_r+0x2ec>
 80083f8:	3101      	adds	r1, #1
 80083fa:	6071      	str	r1, [r6, #4]
 80083fc:	0052      	lsls	r2, r2, #1
 80083fe:	e7a2      	b.n	8008346 <_dtoa_r+0x24e>
 8008400:	636f4361 	.word	0x636f4361
 8008404:	3fd287a7 	.word	0x3fd287a7
 8008408:	8b60c8b3 	.word	0x8b60c8b3
 800840c:	3fc68a28 	.word	0x3fc68a28
 8008410:	509f79fb 	.word	0x509f79fb
 8008414:	3fd34413 	.word	0x3fd34413
 8008418:	7ff00000 	.word	0x7ff00000
 800841c:	080097c5 	.word	0x080097c5
 8008420:	3ff80000 	.word	0x3ff80000
 8008424:	08009820 	.word	0x08009820
 8008428:	080097f8 	.word	0x080097f8
 800842c:	080097f1 	.word	0x080097f1
 8008430:	07f1      	lsls	r1, r6, #31
 8008432:	d508      	bpl.n	8008446 <_dtoa_r+0x34e>
 8008434:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800843c:	f7f8 f8fc 	bl	8000638 <__aeabi_dmul>
 8008440:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008444:	3501      	adds	r5, #1
 8008446:	1076      	asrs	r6, r6, #1
 8008448:	3708      	adds	r7, #8
 800844a:	2e00      	cmp	r6, #0
 800844c:	d1f0      	bne.n	8008430 <_dtoa_r+0x338>
 800844e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008452:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008456:	f7f8 fa19 	bl	800088c <__aeabi_ddiv>
 800845a:	e9cd 0100 	strd	r0, r1, [sp]
 800845e:	e01a      	b.n	8008496 <_dtoa_r+0x39e>
 8008460:	2502      	movs	r5, #2
 8008462:	e7a3      	b.n	80083ac <_dtoa_r+0x2b4>
 8008464:	f000 80a0 	beq.w	80085a8 <_dtoa_r+0x4b0>
 8008468:	f1ca 0600 	rsb	r6, sl, #0
 800846c:	4b9f      	ldr	r3, [pc, #636]	; (80086ec <_dtoa_r+0x5f4>)
 800846e:	4fa0      	ldr	r7, [pc, #640]	; (80086f0 <_dtoa_r+0x5f8>)
 8008470:	f006 020f 	and.w	r2, r6, #15
 8008474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008480:	f7f8 f8da 	bl	8000638 <__aeabi_dmul>
 8008484:	e9cd 0100 	strd	r0, r1, [sp]
 8008488:	1136      	asrs	r6, r6, #4
 800848a:	2300      	movs	r3, #0
 800848c:	2502      	movs	r5, #2
 800848e:	2e00      	cmp	r6, #0
 8008490:	d17f      	bne.n	8008592 <_dtoa_r+0x49a>
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e1      	bne.n	800845a <_dtoa_r+0x362>
 8008496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 8087 	beq.w	80085ac <_dtoa_r+0x4b4>
 800849e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80084a2:	2200      	movs	r2, #0
 80084a4:	4b93      	ldr	r3, [pc, #588]	; (80086f4 <_dtoa_r+0x5fc>)
 80084a6:	4630      	mov	r0, r6
 80084a8:	4639      	mov	r1, r7
 80084aa:	f7f8 fb37 	bl	8000b1c <__aeabi_dcmplt>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d07c      	beq.n	80085ac <_dtoa_r+0x4b4>
 80084b2:	f1b9 0f00 	cmp.w	r9, #0
 80084b6:	d079      	beq.n	80085ac <_dtoa_r+0x4b4>
 80084b8:	9b02      	ldr	r3, [sp, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dd35      	ble.n	800852a <_dtoa_r+0x432>
 80084be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80084c2:	9308      	str	r3, [sp, #32]
 80084c4:	4639      	mov	r1, r7
 80084c6:	2200      	movs	r2, #0
 80084c8:	4b8b      	ldr	r3, [pc, #556]	; (80086f8 <_dtoa_r+0x600>)
 80084ca:	4630      	mov	r0, r6
 80084cc:	f7f8 f8b4 	bl	8000638 <__aeabi_dmul>
 80084d0:	e9cd 0100 	strd	r0, r1, [sp]
 80084d4:	9f02      	ldr	r7, [sp, #8]
 80084d6:	3501      	adds	r5, #1
 80084d8:	4628      	mov	r0, r5
 80084da:	f7f8 f843 	bl	8000564 <__aeabi_i2d>
 80084de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084e2:	f7f8 f8a9 	bl	8000638 <__aeabi_dmul>
 80084e6:	2200      	movs	r2, #0
 80084e8:	4b84      	ldr	r3, [pc, #528]	; (80086fc <_dtoa_r+0x604>)
 80084ea:	f7f7 feef 	bl	80002cc <__adddf3>
 80084ee:	4605      	mov	r5, r0
 80084f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80084f4:	2f00      	cmp	r7, #0
 80084f6:	d15d      	bne.n	80085b4 <_dtoa_r+0x4bc>
 80084f8:	2200      	movs	r2, #0
 80084fa:	4b81      	ldr	r3, [pc, #516]	; (8008700 <_dtoa_r+0x608>)
 80084fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008500:	f7f7 fee2 	bl	80002c8 <__aeabi_dsub>
 8008504:	462a      	mov	r2, r5
 8008506:	4633      	mov	r3, r6
 8008508:	e9cd 0100 	strd	r0, r1, [sp]
 800850c:	f7f8 fb24 	bl	8000b58 <__aeabi_dcmpgt>
 8008510:	2800      	cmp	r0, #0
 8008512:	f040 8288 	bne.w	8008a26 <_dtoa_r+0x92e>
 8008516:	462a      	mov	r2, r5
 8008518:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800851c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008520:	f7f8 fafc 	bl	8000b1c <__aeabi_dcmplt>
 8008524:	2800      	cmp	r0, #0
 8008526:	f040 827c 	bne.w	8008a22 <_dtoa_r+0x92a>
 800852a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800852e:	e9cd 2300 	strd	r2, r3, [sp]
 8008532:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008534:	2b00      	cmp	r3, #0
 8008536:	f2c0 8150 	blt.w	80087da <_dtoa_r+0x6e2>
 800853a:	f1ba 0f0e 	cmp.w	sl, #14
 800853e:	f300 814c 	bgt.w	80087da <_dtoa_r+0x6e2>
 8008542:	4b6a      	ldr	r3, [pc, #424]	; (80086ec <_dtoa_r+0x5f4>)
 8008544:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008548:	ed93 7b00 	vldr	d7, [r3]
 800854c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800854e:	2b00      	cmp	r3, #0
 8008550:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008554:	f280 80d8 	bge.w	8008708 <_dtoa_r+0x610>
 8008558:	f1b9 0f00 	cmp.w	r9, #0
 800855c:	f300 80d4 	bgt.w	8008708 <_dtoa_r+0x610>
 8008560:	f040 825e 	bne.w	8008a20 <_dtoa_r+0x928>
 8008564:	2200      	movs	r2, #0
 8008566:	4b66      	ldr	r3, [pc, #408]	; (8008700 <_dtoa_r+0x608>)
 8008568:	ec51 0b17 	vmov	r0, r1, d7
 800856c:	f7f8 f864 	bl	8000638 <__aeabi_dmul>
 8008570:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008574:	f7f8 fae6 	bl	8000b44 <__aeabi_dcmpge>
 8008578:	464f      	mov	r7, r9
 800857a:	464e      	mov	r6, r9
 800857c:	2800      	cmp	r0, #0
 800857e:	f040 8234 	bne.w	80089ea <_dtoa_r+0x8f2>
 8008582:	2331      	movs	r3, #49	; 0x31
 8008584:	f10b 0501 	add.w	r5, fp, #1
 8008588:	f88b 3000 	strb.w	r3, [fp]
 800858c:	f10a 0a01 	add.w	sl, sl, #1
 8008590:	e22f      	b.n	80089f2 <_dtoa_r+0x8fa>
 8008592:	07f2      	lsls	r2, r6, #31
 8008594:	d505      	bpl.n	80085a2 <_dtoa_r+0x4aa>
 8008596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800859a:	f7f8 f84d 	bl	8000638 <__aeabi_dmul>
 800859e:	3501      	adds	r5, #1
 80085a0:	2301      	movs	r3, #1
 80085a2:	1076      	asrs	r6, r6, #1
 80085a4:	3708      	adds	r7, #8
 80085a6:	e772      	b.n	800848e <_dtoa_r+0x396>
 80085a8:	2502      	movs	r5, #2
 80085aa:	e774      	b.n	8008496 <_dtoa_r+0x39e>
 80085ac:	f8cd a020 	str.w	sl, [sp, #32]
 80085b0:	464f      	mov	r7, r9
 80085b2:	e791      	b.n	80084d8 <_dtoa_r+0x3e0>
 80085b4:	4b4d      	ldr	r3, [pc, #308]	; (80086ec <_dtoa_r+0x5f4>)
 80085b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80085be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d047      	beq.n	8008654 <_dtoa_r+0x55c>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	2000      	movs	r0, #0
 80085ca:	494e      	ldr	r1, [pc, #312]	; (8008704 <_dtoa_r+0x60c>)
 80085cc:	f7f8 f95e 	bl	800088c <__aeabi_ddiv>
 80085d0:	462a      	mov	r2, r5
 80085d2:	4633      	mov	r3, r6
 80085d4:	f7f7 fe78 	bl	80002c8 <__aeabi_dsub>
 80085d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80085dc:	465d      	mov	r5, fp
 80085de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085e2:	f7f8 fad9 	bl	8000b98 <__aeabi_d2iz>
 80085e6:	4606      	mov	r6, r0
 80085e8:	f7f7 ffbc 	bl	8000564 <__aeabi_i2d>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085f4:	f7f7 fe68 	bl	80002c8 <__aeabi_dsub>
 80085f8:	3630      	adds	r6, #48	; 0x30
 80085fa:	f805 6b01 	strb.w	r6, [r5], #1
 80085fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008602:	e9cd 0100 	strd	r0, r1, [sp]
 8008606:	f7f8 fa89 	bl	8000b1c <__aeabi_dcmplt>
 800860a:	2800      	cmp	r0, #0
 800860c:	d163      	bne.n	80086d6 <_dtoa_r+0x5de>
 800860e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008612:	2000      	movs	r0, #0
 8008614:	4937      	ldr	r1, [pc, #220]	; (80086f4 <_dtoa_r+0x5fc>)
 8008616:	f7f7 fe57 	bl	80002c8 <__aeabi_dsub>
 800861a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800861e:	f7f8 fa7d 	bl	8000b1c <__aeabi_dcmplt>
 8008622:	2800      	cmp	r0, #0
 8008624:	f040 80b7 	bne.w	8008796 <_dtoa_r+0x69e>
 8008628:	eba5 030b 	sub.w	r3, r5, fp
 800862c:	429f      	cmp	r7, r3
 800862e:	f77f af7c 	ble.w	800852a <_dtoa_r+0x432>
 8008632:	2200      	movs	r2, #0
 8008634:	4b30      	ldr	r3, [pc, #192]	; (80086f8 <_dtoa_r+0x600>)
 8008636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800863a:	f7f7 fffd 	bl	8000638 <__aeabi_dmul>
 800863e:	2200      	movs	r2, #0
 8008640:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008644:	4b2c      	ldr	r3, [pc, #176]	; (80086f8 <_dtoa_r+0x600>)
 8008646:	e9dd 0100 	ldrd	r0, r1, [sp]
 800864a:	f7f7 fff5 	bl	8000638 <__aeabi_dmul>
 800864e:	e9cd 0100 	strd	r0, r1, [sp]
 8008652:	e7c4      	b.n	80085de <_dtoa_r+0x4e6>
 8008654:	462a      	mov	r2, r5
 8008656:	4633      	mov	r3, r6
 8008658:	f7f7 ffee 	bl	8000638 <__aeabi_dmul>
 800865c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008660:	eb0b 0507 	add.w	r5, fp, r7
 8008664:	465e      	mov	r6, fp
 8008666:	e9dd 0100 	ldrd	r0, r1, [sp]
 800866a:	f7f8 fa95 	bl	8000b98 <__aeabi_d2iz>
 800866e:	4607      	mov	r7, r0
 8008670:	f7f7 ff78 	bl	8000564 <__aeabi_i2d>
 8008674:	3730      	adds	r7, #48	; 0x30
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800867e:	f7f7 fe23 	bl	80002c8 <__aeabi_dsub>
 8008682:	f806 7b01 	strb.w	r7, [r6], #1
 8008686:	42ae      	cmp	r6, r5
 8008688:	e9cd 0100 	strd	r0, r1, [sp]
 800868c:	f04f 0200 	mov.w	r2, #0
 8008690:	d126      	bne.n	80086e0 <_dtoa_r+0x5e8>
 8008692:	4b1c      	ldr	r3, [pc, #112]	; (8008704 <_dtoa_r+0x60c>)
 8008694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008698:	f7f7 fe18 	bl	80002cc <__adddf3>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086a4:	f7f8 fa58 	bl	8000b58 <__aeabi_dcmpgt>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d174      	bne.n	8008796 <_dtoa_r+0x69e>
 80086ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80086b0:	2000      	movs	r0, #0
 80086b2:	4914      	ldr	r1, [pc, #80]	; (8008704 <_dtoa_r+0x60c>)
 80086b4:	f7f7 fe08 	bl	80002c8 <__aeabi_dsub>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086c0:	f7f8 fa2c 	bl	8000b1c <__aeabi_dcmplt>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	f43f af30 	beq.w	800852a <_dtoa_r+0x432>
 80086ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086ce:	2b30      	cmp	r3, #48	; 0x30
 80086d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80086d4:	d002      	beq.n	80086dc <_dtoa_r+0x5e4>
 80086d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80086da:	e04a      	b.n	8008772 <_dtoa_r+0x67a>
 80086dc:	4615      	mov	r5, r2
 80086de:	e7f4      	b.n	80086ca <_dtoa_r+0x5d2>
 80086e0:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <_dtoa_r+0x600>)
 80086e2:	f7f7 ffa9 	bl	8000638 <__aeabi_dmul>
 80086e6:	e9cd 0100 	strd	r0, r1, [sp]
 80086ea:	e7bc      	b.n	8008666 <_dtoa_r+0x56e>
 80086ec:	08009820 	.word	0x08009820
 80086f0:	080097f8 	.word	0x080097f8
 80086f4:	3ff00000 	.word	0x3ff00000
 80086f8:	40240000 	.word	0x40240000
 80086fc:	401c0000 	.word	0x401c0000
 8008700:	40140000 	.word	0x40140000
 8008704:	3fe00000 	.word	0x3fe00000
 8008708:	e9dd 6700 	ldrd	r6, r7, [sp]
 800870c:	465d      	mov	r5, fp
 800870e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008712:	4630      	mov	r0, r6
 8008714:	4639      	mov	r1, r7
 8008716:	f7f8 f8b9 	bl	800088c <__aeabi_ddiv>
 800871a:	f7f8 fa3d 	bl	8000b98 <__aeabi_d2iz>
 800871e:	4680      	mov	r8, r0
 8008720:	f7f7 ff20 	bl	8000564 <__aeabi_i2d>
 8008724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008728:	f7f7 ff86 	bl	8000638 <__aeabi_dmul>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4630      	mov	r0, r6
 8008732:	4639      	mov	r1, r7
 8008734:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008738:	f7f7 fdc6 	bl	80002c8 <__aeabi_dsub>
 800873c:	f805 6b01 	strb.w	r6, [r5], #1
 8008740:	eba5 060b 	sub.w	r6, r5, fp
 8008744:	45b1      	cmp	r9, r6
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	d139      	bne.n	80087c0 <_dtoa_r+0x6c8>
 800874c:	f7f7 fdbe 	bl	80002cc <__adddf3>
 8008750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008754:	4606      	mov	r6, r0
 8008756:	460f      	mov	r7, r1
 8008758:	f7f8 f9fe 	bl	8000b58 <__aeabi_dcmpgt>
 800875c:	b9c8      	cbnz	r0, 8008792 <_dtoa_r+0x69a>
 800875e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008762:	4630      	mov	r0, r6
 8008764:	4639      	mov	r1, r7
 8008766:	f7f8 f9cf 	bl	8000b08 <__aeabi_dcmpeq>
 800876a:	b110      	cbz	r0, 8008772 <_dtoa_r+0x67a>
 800876c:	f018 0f01 	tst.w	r8, #1
 8008770:	d10f      	bne.n	8008792 <_dtoa_r+0x69a>
 8008772:	9904      	ldr	r1, [sp, #16]
 8008774:	4620      	mov	r0, r4
 8008776:	f000 facc 	bl	8008d12 <_Bfree>
 800877a:	2300      	movs	r3, #0
 800877c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800877e:	702b      	strb	r3, [r5, #0]
 8008780:	f10a 0301 	add.w	r3, sl, #1
 8008784:	6013      	str	r3, [r2, #0]
 8008786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008788:	2b00      	cmp	r3, #0
 800878a:	f000 8241 	beq.w	8008c10 <_dtoa_r+0xb18>
 800878e:	601d      	str	r5, [r3, #0]
 8008790:	e23e      	b.n	8008c10 <_dtoa_r+0xb18>
 8008792:	f8cd a020 	str.w	sl, [sp, #32]
 8008796:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800879a:	2a39      	cmp	r2, #57	; 0x39
 800879c:	f105 33ff 	add.w	r3, r5, #4294967295
 80087a0:	d108      	bne.n	80087b4 <_dtoa_r+0x6bc>
 80087a2:	459b      	cmp	fp, r3
 80087a4:	d10a      	bne.n	80087bc <_dtoa_r+0x6c4>
 80087a6:	9b08      	ldr	r3, [sp, #32]
 80087a8:	3301      	adds	r3, #1
 80087aa:	9308      	str	r3, [sp, #32]
 80087ac:	2330      	movs	r3, #48	; 0x30
 80087ae:	f88b 3000 	strb.w	r3, [fp]
 80087b2:	465b      	mov	r3, fp
 80087b4:	781a      	ldrb	r2, [r3, #0]
 80087b6:	3201      	adds	r2, #1
 80087b8:	701a      	strb	r2, [r3, #0]
 80087ba:	e78c      	b.n	80086d6 <_dtoa_r+0x5de>
 80087bc:	461d      	mov	r5, r3
 80087be:	e7ea      	b.n	8008796 <_dtoa_r+0x69e>
 80087c0:	2200      	movs	r2, #0
 80087c2:	4b9b      	ldr	r3, [pc, #620]	; (8008a30 <_dtoa_r+0x938>)
 80087c4:	f7f7 ff38 	bl	8000638 <__aeabi_dmul>
 80087c8:	2200      	movs	r2, #0
 80087ca:	2300      	movs	r3, #0
 80087cc:	4606      	mov	r6, r0
 80087ce:	460f      	mov	r7, r1
 80087d0:	f7f8 f99a 	bl	8000b08 <__aeabi_dcmpeq>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d09a      	beq.n	800870e <_dtoa_r+0x616>
 80087d8:	e7cb      	b.n	8008772 <_dtoa_r+0x67a>
 80087da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087dc:	2a00      	cmp	r2, #0
 80087de:	f000 808b 	beq.w	80088f8 <_dtoa_r+0x800>
 80087e2:	9a06      	ldr	r2, [sp, #24]
 80087e4:	2a01      	cmp	r2, #1
 80087e6:	dc6e      	bgt.n	80088c6 <_dtoa_r+0x7ce>
 80087e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087ea:	2a00      	cmp	r2, #0
 80087ec:	d067      	beq.n	80088be <_dtoa_r+0x7c6>
 80087ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087f2:	9f07      	ldr	r7, [sp, #28]
 80087f4:	9d05      	ldr	r5, [sp, #20]
 80087f6:	9a05      	ldr	r2, [sp, #20]
 80087f8:	2101      	movs	r1, #1
 80087fa:	441a      	add	r2, r3
 80087fc:	4620      	mov	r0, r4
 80087fe:	9205      	str	r2, [sp, #20]
 8008800:	4498      	add	r8, r3
 8008802:	f000 fb26 	bl	8008e52 <__i2b>
 8008806:	4606      	mov	r6, r0
 8008808:	2d00      	cmp	r5, #0
 800880a:	dd0c      	ble.n	8008826 <_dtoa_r+0x72e>
 800880c:	f1b8 0f00 	cmp.w	r8, #0
 8008810:	dd09      	ble.n	8008826 <_dtoa_r+0x72e>
 8008812:	4545      	cmp	r5, r8
 8008814:	9a05      	ldr	r2, [sp, #20]
 8008816:	462b      	mov	r3, r5
 8008818:	bfa8      	it	ge
 800881a:	4643      	movge	r3, r8
 800881c:	1ad2      	subs	r2, r2, r3
 800881e:	9205      	str	r2, [sp, #20]
 8008820:	1aed      	subs	r5, r5, r3
 8008822:	eba8 0803 	sub.w	r8, r8, r3
 8008826:	9b07      	ldr	r3, [sp, #28]
 8008828:	b1eb      	cbz	r3, 8008866 <_dtoa_r+0x76e>
 800882a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800882c:	2b00      	cmp	r3, #0
 800882e:	d067      	beq.n	8008900 <_dtoa_r+0x808>
 8008830:	b18f      	cbz	r7, 8008856 <_dtoa_r+0x75e>
 8008832:	4631      	mov	r1, r6
 8008834:	463a      	mov	r2, r7
 8008836:	4620      	mov	r0, r4
 8008838:	f000 fbaa 	bl	8008f90 <__pow5mult>
 800883c:	9a04      	ldr	r2, [sp, #16]
 800883e:	4601      	mov	r1, r0
 8008840:	4606      	mov	r6, r0
 8008842:	4620      	mov	r0, r4
 8008844:	f000 fb0e 	bl	8008e64 <__multiply>
 8008848:	9904      	ldr	r1, [sp, #16]
 800884a:	9008      	str	r0, [sp, #32]
 800884c:	4620      	mov	r0, r4
 800884e:	f000 fa60 	bl	8008d12 <_Bfree>
 8008852:	9b08      	ldr	r3, [sp, #32]
 8008854:	9304      	str	r3, [sp, #16]
 8008856:	9b07      	ldr	r3, [sp, #28]
 8008858:	1bda      	subs	r2, r3, r7
 800885a:	d004      	beq.n	8008866 <_dtoa_r+0x76e>
 800885c:	9904      	ldr	r1, [sp, #16]
 800885e:	4620      	mov	r0, r4
 8008860:	f000 fb96 	bl	8008f90 <__pow5mult>
 8008864:	9004      	str	r0, [sp, #16]
 8008866:	2101      	movs	r1, #1
 8008868:	4620      	mov	r0, r4
 800886a:	f000 faf2 	bl	8008e52 <__i2b>
 800886e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008870:	4607      	mov	r7, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 81d0 	beq.w	8008c18 <_dtoa_r+0xb20>
 8008878:	461a      	mov	r2, r3
 800887a:	4601      	mov	r1, r0
 800887c:	4620      	mov	r0, r4
 800887e:	f000 fb87 	bl	8008f90 <__pow5mult>
 8008882:	9b06      	ldr	r3, [sp, #24]
 8008884:	2b01      	cmp	r3, #1
 8008886:	4607      	mov	r7, r0
 8008888:	dc40      	bgt.n	800890c <_dtoa_r+0x814>
 800888a:	9b00      	ldr	r3, [sp, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d139      	bne.n	8008904 <_dtoa_r+0x80c>
 8008890:	9b01      	ldr	r3, [sp, #4]
 8008892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008896:	2b00      	cmp	r3, #0
 8008898:	d136      	bne.n	8008908 <_dtoa_r+0x810>
 800889a:	9b01      	ldr	r3, [sp, #4]
 800889c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088a0:	0d1b      	lsrs	r3, r3, #20
 80088a2:	051b      	lsls	r3, r3, #20
 80088a4:	b12b      	cbz	r3, 80088b2 <_dtoa_r+0x7ba>
 80088a6:	9b05      	ldr	r3, [sp, #20]
 80088a8:	3301      	adds	r3, #1
 80088aa:	9305      	str	r3, [sp, #20]
 80088ac:	f108 0801 	add.w	r8, r8, #1
 80088b0:	2301      	movs	r3, #1
 80088b2:	9307      	str	r3, [sp, #28]
 80088b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d12a      	bne.n	8008910 <_dtoa_r+0x818>
 80088ba:	2001      	movs	r0, #1
 80088bc:	e030      	b.n	8008920 <_dtoa_r+0x828>
 80088be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088c4:	e795      	b.n	80087f2 <_dtoa_r+0x6fa>
 80088c6:	9b07      	ldr	r3, [sp, #28]
 80088c8:	f109 37ff 	add.w	r7, r9, #4294967295
 80088cc:	42bb      	cmp	r3, r7
 80088ce:	bfbf      	itttt	lt
 80088d0:	9b07      	ldrlt	r3, [sp, #28]
 80088d2:	9707      	strlt	r7, [sp, #28]
 80088d4:	1afa      	sublt	r2, r7, r3
 80088d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80088d8:	bfbb      	ittet	lt
 80088da:	189b      	addlt	r3, r3, r2
 80088dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80088de:	1bdf      	subge	r7, r3, r7
 80088e0:	2700      	movlt	r7, #0
 80088e2:	f1b9 0f00 	cmp.w	r9, #0
 80088e6:	bfb5      	itete	lt
 80088e8:	9b05      	ldrlt	r3, [sp, #20]
 80088ea:	9d05      	ldrge	r5, [sp, #20]
 80088ec:	eba3 0509 	sublt.w	r5, r3, r9
 80088f0:	464b      	movge	r3, r9
 80088f2:	bfb8      	it	lt
 80088f4:	2300      	movlt	r3, #0
 80088f6:	e77e      	b.n	80087f6 <_dtoa_r+0x6fe>
 80088f8:	9f07      	ldr	r7, [sp, #28]
 80088fa:	9d05      	ldr	r5, [sp, #20]
 80088fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80088fe:	e783      	b.n	8008808 <_dtoa_r+0x710>
 8008900:	9a07      	ldr	r2, [sp, #28]
 8008902:	e7ab      	b.n	800885c <_dtoa_r+0x764>
 8008904:	2300      	movs	r3, #0
 8008906:	e7d4      	b.n	80088b2 <_dtoa_r+0x7ba>
 8008908:	9b00      	ldr	r3, [sp, #0]
 800890a:	e7d2      	b.n	80088b2 <_dtoa_r+0x7ba>
 800890c:	2300      	movs	r3, #0
 800890e:	9307      	str	r3, [sp, #28]
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008916:	6918      	ldr	r0, [r3, #16]
 8008918:	f000 fa4d 	bl	8008db6 <__hi0bits>
 800891c:	f1c0 0020 	rsb	r0, r0, #32
 8008920:	4440      	add	r0, r8
 8008922:	f010 001f 	ands.w	r0, r0, #31
 8008926:	d047      	beq.n	80089b8 <_dtoa_r+0x8c0>
 8008928:	f1c0 0320 	rsb	r3, r0, #32
 800892c:	2b04      	cmp	r3, #4
 800892e:	dd3b      	ble.n	80089a8 <_dtoa_r+0x8b0>
 8008930:	9b05      	ldr	r3, [sp, #20]
 8008932:	f1c0 001c 	rsb	r0, r0, #28
 8008936:	4403      	add	r3, r0
 8008938:	9305      	str	r3, [sp, #20]
 800893a:	4405      	add	r5, r0
 800893c:	4480      	add	r8, r0
 800893e:	9b05      	ldr	r3, [sp, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	dd05      	ble.n	8008950 <_dtoa_r+0x858>
 8008944:	461a      	mov	r2, r3
 8008946:	9904      	ldr	r1, [sp, #16]
 8008948:	4620      	mov	r0, r4
 800894a:	f000 fb6f 	bl	800902c <__lshift>
 800894e:	9004      	str	r0, [sp, #16]
 8008950:	f1b8 0f00 	cmp.w	r8, #0
 8008954:	dd05      	ble.n	8008962 <_dtoa_r+0x86a>
 8008956:	4639      	mov	r1, r7
 8008958:	4642      	mov	r2, r8
 800895a:	4620      	mov	r0, r4
 800895c:	f000 fb66 	bl	800902c <__lshift>
 8008960:	4607      	mov	r7, r0
 8008962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008964:	b353      	cbz	r3, 80089bc <_dtoa_r+0x8c4>
 8008966:	4639      	mov	r1, r7
 8008968:	9804      	ldr	r0, [sp, #16]
 800896a:	f000 fbb3 	bl	80090d4 <__mcmp>
 800896e:	2800      	cmp	r0, #0
 8008970:	da24      	bge.n	80089bc <_dtoa_r+0x8c4>
 8008972:	2300      	movs	r3, #0
 8008974:	220a      	movs	r2, #10
 8008976:	9904      	ldr	r1, [sp, #16]
 8008978:	4620      	mov	r0, r4
 800897a:	f000 f9e1 	bl	8008d40 <__multadd>
 800897e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008980:	9004      	str	r0, [sp, #16]
 8008982:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 814d 	beq.w	8008c26 <_dtoa_r+0xb2e>
 800898c:	2300      	movs	r3, #0
 800898e:	4631      	mov	r1, r6
 8008990:	220a      	movs	r2, #10
 8008992:	4620      	mov	r0, r4
 8008994:	f000 f9d4 	bl	8008d40 <__multadd>
 8008998:	9b02      	ldr	r3, [sp, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	4606      	mov	r6, r0
 800899e:	dc4f      	bgt.n	8008a40 <_dtoa_r+0x948>
 80089a0:	9b06      	ldr	r3, [sp, #24]
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	dd4c      	ble.n	8008a40 <_dtoa_r+0x948>
 80089a6:	e011      	b.n	80089cc <_dtoa_r+0x8d4>
 80089a8:	d0c9      	beq.n	800893e <_dtoa_r+0x846>
 80089aa:	9a05      	ldr	r2, [sp, #20]
 80089ac:	331c      	adds	r3, #28
 80089ae:	441a      	add	r2, r3
 80089b0:	9205      	str	r2, [sp, #20]
 80089b2:	441d      	add	r5, r3
 80089b4:	4498      	add	r8, r3
 80089b6:	e7c2      	b.n	800893e <_dtoa_r+0x846>
 80089b8:	4603      	mov	r3, r0
 80089ba:	e7f6      	b.n	80089aa <_dtoa_r+0x8b2>
 80089bc:	f1b9 0f00 	cmp.w	r9, #0
 80089c0:	dc38      	bgt.n	8008a34 <_dtoa_r+0x93c>
 80089c2:	9b06      	ldr	r3, [sp, #24]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	dd35      	ble.n	8008a34 <_dtoa_r+0x93c>
 80089c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80089cc:	9b02      	ldr	r3, [sp, #8]
 80089ce:	b963      	cbnz	r3, 80089ea <_dtoa_r+0x8f2>
 80089d0:	4639      	mov	r1, r7
 80089d2:	2205      	movs	r2, #5
 80089d4:	4620      	mov	r0, r4
 80089d6:	f000 f9b3 	bl	8008d40 <__multadd>
 80089da:	4601      	mov	r1, r0
 80089dc:	4607      	mov	r7, r0
 80089de:	9804      	ldr	r0, [sp, #16]
 80089e0:	f000 fb78 	bl	80090d4 <__mcmp>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	f73f adcc 	bgt.w	8008582 <_dtoa_r+0x48a>
 80089ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ec:	465d      	mov	r5, fp
 80089ee:	ea6f 0a03 	mvn.w	sl, r3
 80089f2:	f04f 0900 	mov.w	r9, #0
 80089f6:	4639      	mov	r1, r7
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 f98a 	bl	8008d12 <_Bfree>
 80089fe:	2e00      	cmp	r6, #0
 8008a00:	f43f aeb7 	beq.w	8008772 <_dtoa_r+0x67a>
 8008a04:	f1b9 0f00 	cmp.w	r9, #0
 8008a08:	d005      	beq.n	8008a16 <_dtoa_r+0x91e>
 8008a0a:	45b1      	cmp	r9, r6
 8008a0c:	d003      	beq.n	8008a16 <_dtoa_r+0x91e>
 8008a0e:	4649      	mov	r1, r9
 8008a10:	4620      	mov	r0, r4
 8008a12:	f000 f97e 	bl	8008d12 <_Bfree>
 8008a16:	4631      	mov	r1, r6
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f000 f97a 	bl	8008d12 <_Bfree>
 8008a1e:	e6a8      	b.n	8008772 <_dtoa_r+0x67a>
 8008a20:	2700      	movs	r7, #0
 8008a22:	463e      	mov	r6, r7
 8008a24:	e7e1      	b.n	80089ea <_dtoa_r+0x8f2>
 8008a26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008a2a:	463e      	mov	r6, r7
 8008a2c:	e5a9      	b.n	8008582 <_dtoa_r+0x48a>
 8008a2e:	bf00      	nop
 8008a30:	40240000 	.word	0x40240000
 8008a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a36:	f8cd 9008 	str.w	r9, [sp, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 80fa 	beq.w	8008c34 <_dtoa_r+0xb3c>
 8008a40:	2d00      	cmp	r5, #0
 8008a42:	dd05      	ble.n	8008a50 <_dtoa_r+0x958>
 8008a44:	4631      	mov	r1, r6
 8008a46:	462a      	mov	r2, r5
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 faef 	bl	800902c <__lshift>
 8008a4e:	4606      	mov	r6, r0
 8008a50:	9b07      	ldr	r3, [sp, #28]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d04c      	beq.n	8008af0 <_dtoa_r+0x9f8>
 8008a56:	6871      	ldr	r1, [r6, #4]
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f000 f926 	bl	8008caa <_Balloc>
 8008a5e:	6932      	ldr	r2, [r6, #16]
 8008a60:	3202      	adds	r2, #2
 8008a62:	4605      	mov	r5, r0
 8008a64:	0092      	lsls	r2, r2, #2
 8008a66:	f106 010c 	add.w	r1, r6, #12
 8008a6a:	300c      	adds	r0, #12
 8008a6c:	f000 f912 	bl	8008c94 <memcpy>
 8008a70:	2201      	movs	r2, #1
 8008a72:	4629      	mov	r1, r5
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 fad9 	bl	800902c <__lshift>
 8008a7a:	9b00      	ldr	r3, [sp, #0]
 8008a7c:	f8cd b014 	str.w	fp, [sp, #20]
 8008a80:	f003 0301 	and.w	r3, r3, #1
 8008a84:	46b1      	mov	r9, r6
 8008a86:	9307      	str	r3, [sp, #28]
 8008a88:	4606      	mov	r6, r0
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	9804      	ldr	r0, [sp, #16]
 8008a8e:	f7ff faa5 	bl	8007fdc <quorem>
 8008a92:	4649      	mov	r1, r9
 8008a94:	4605      	mov	r5, r0
 8008a96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008a9a:	9804      	ldr	r0, [sp, #16]
 8008a9c:	f000 fb1a 	bl	80090d4 <__mcmp>
 8008aa0:	4632      	mov	r2, r6
 8008aa2:	9000      	str	r0, [sp, #0]
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f000 fb2e 	bl	8009108 <__mdiff>
 8008aac:	68c3      	ldr	r3, [r0, #12]
 8008aae:	4602      	mov	r2, r0
 8008ab0:	bb03      	cbnz	r3, 8008af4 <_dtoa_r+0x9fc>
 8008ab2:	4601      	mov	r1, r0
 8008ab4:	9008      	str	r0, [sp, #32]
 8008ab6:	9804      	ldr	r0, [sp, #16]
 8008ab8:	f000 fb0c 	bl	80090d4 <__mcmp>
 8008abc:	9a08      	ldr	r2, [sp, #32]
 8008abe:	4603      	mov	r3, r0
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	9308      	str	r3, [sp, #32]
 8008ac6:	f000 f924 	bl	8008d12 <_Bfree>
 8008aca:	9b08      	ldr	r3, [sp, #32]
 8008acc:	b9a3      	cbnz	r3, 8008af8 <_dtoa_r+0xa00>
 8008ace:	9a06      	ldr	r2, [sp, #24]
 8008ad0:	b992      	cbnz	r2, 8008af8 <_dtoa_r+0xa00>
 8008ad2:	9a07      	ldr	r2, [sp, #28]
 8008ad4:	b982      	cbnz	r2, 8008af8 <_dtoa_r+0xa00>
 8008ad6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008ada:	d029      	beq.n	8008b30 <_dtoa_r+0xa38>
 8008adc:	9b00      	ldr	r3, [sp, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	dd01      	ble.n	8008ae6 <_dtoa_r+0x9ee>
 8008ae2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008ae6:	9b05      	ldr	r3, [sp, #20]
 8008ae8:	1c5d      	adds	r5, r3, #1
 8008aea:	f883 8000 	strb.w	r8, [r3]
 8008aee:	e782      	b.n	80089f6 <_dtoa_r+0x8fe>
 8008af0:	4630      	mov	r0, r6
 8008af2:	e7c2      	b.n	8008a7a <_dtoa_r+0x982>
 8008af4:	2301      	movs	r3, #1
 8008af6:	e7e3      	b.n	8008ac0 <_dtoa_r+0x9c8>
 8008af8:	9a00      	ldr	r2, [sp, #0]
 8008afa:	2a00      	cmp	r2, #0
 8008afc:	db04      	blt.n	8008b08 <_dtoa_r+0xa10>
 8008afe:	d125      	bne.n	8008b4c <_dtoa_r+0xa54>
 8008b00:	9a06      	ldr	r2, [sp, #24]
 8008b02:	bb1a      	cbnz	r2, 8008b4c <_dtoa_r+0xa54>
 8008b04:	9a07      	ldr	r2, [sp, #28]
 8008b06:	bb0a      	cbnz	r2, 8008b4c <_dtoa_r+0xa54>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	ddec      	ble.n	8008ae6 <_dtoa_r+0x9ee>
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	9904      	ldr	r1, [sp, #16]
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 fa8b 	bl	800902c <__lshift>
 8008b16:	4639      	mov	r1, r7
 8008b18:	9004      	str	r0, [sp, #16]
 8008b1a:	f000 fadb 	bl	80090d4 <__mcmp>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	dc03      	bgt.n	8008b2a <_dtoa_r+0xa32>
 8008b22:	d1e0      	bne.n	8008ae6 <_dtoa_r+0x9ee>
 8008b24:	f018 0f01 	tst.w	r8, #1
 8008b28:	d0dd      	beq.n	8008ae6 <_dtoa_r+0x9ee>
 8008b2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b2e:	d1d8      	bne.n	8008ae2 <_dtoa_r+0x9ea>
 8008b30:	9b05      	ldr	r3, [sp, #20]
 8008b32:	9a05      	ldr	r2, [sp, #20]
 8008b34:	1c5d      	adds	r5, r3, #1
 8008b36:	2339      	movs	r3, #57	; 0x39
 8008b38:	7013      	strb	r3, [r2, #0]
 8008b3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b3e:	2b39      	cmp	r3, #57	; 0x39
 8008b40:	f105 32ff 	add.w	r2, r5, #4294967295
 8008b44:	d04f      	beq.n	8008be6 <_dtoa_r+0xaee>
 8008b46:	3301      	adds	r3, #1
 8008b48:	7013      	strb	r3, [r2, #0]
 8008b4a:	e754      	b.n	80089f6 <_dtoa_r+0x8fe>
 8008b4c:	9a05      	ldr	r2, [sp, #20]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f102 0501 	add.w	r5, r2, #1
 8008b54:	dd06      	ble.n	8008b64 <_dtoa_r+0xa6c>
 8008b56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b5a:	d0e9      	beq.n	8008b30 <_dtoa_r+0xa38>
 8008b5c:	f108 0801 	add.w	r8, r8, #1
 8008b60:	9b05      	ldr	r3, [sp, #20]
 8008b62:	e7c2      	b.n	8008aea <_dtoa_r+0x9f2>
 8008b64:	9a02      	ldr	r2, [sp, #8]
 8008b66:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008b6a:	eba5 030b 	sub.w	r3, r5, fp
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d021      	beq.n	8008bb6 <_dtoa_r+0xabe>
 8008b72:	2300      	movs	r3, #0
 8008b74:	220a      	movs	r2, #10
 8008b76:	9904      	ldr	r1, [sp, #16]
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f000 f8e1 	bl	8008d40 <__multadd>
 8008b7e:	45b1      	cmp	r9, r6
 8008b80:	9004      	str	r0, [sp, #16]
 8008b82:	f04f 0300 	mov.w	r3, #0
 8008b86:	f04f 020a 	mov.w	r2, #10
 8008b8a:	4649      	mov	r1, r9
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	d105      	bne.n	8008b9c <_dtoa_r+0xaa4>
 8008b90:	f000 f8d6 	bl	8008d40 <__multadd>
 8008b94:	4681      	mov	r9, r0
 8008b96:	4606      	mov	r6, r0
 8008b98:	9505      	str	r5, [sp, #20]
 8008b9a:	e776      	b.n	8008a8a <_dtoa_r+0x992>
 8008b9c:	f000 f8d0 	bl	8008d40 <__multadd>
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	4681      	mov	r9, r0
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	220a      	movs	r2, #10
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 f8c9 	bl	8008d40 <__multadd>
 8008bae:	4606      	mov	r6, r0
 8008bb0:	e7f2      	b.n	8008b98 <_dtoa_r+0xaa0>
 8008bb2:	f04f 0900 	mov.w	r9, #0
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	9904      	ldr	r1, [sp, #16]
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f000 fa36 	bl	800902c <__lshift>
 8008bc0:	4639      	mov	r1, r7
 8008bc2:	9004      	str	r0, [sp, #16]
 8008bc4:	f000 fa86 	bl	80090d4 <__mcmp>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	dcb6      	bgt.n	8008b3a <_dtoa_r+0xa42>
 8008bcc:	d102      	bne.n	8008bd4 <_dtoa_r+0xadc>
 8008bce:	f018 0f01 	tst.w	r8, #1
 8008bd2:	d1b2      	bne.n	8008b3a <_dtoa_r+0xa42>
 8008bd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bd8:	2b30      	cmp	r3, #48	; 0x30
 8008bda:	f105 32ff 	add.w	r2, r5, #4294967295
 8008bde:	f47f af0a 	bne.w	80089f6 <_dtoa_r+0x8fe>
 8008be2:	4615      	mov	r5, r2
 8008be4:	e7f6      	b.n	8008bd4 <_dtoa_r+0xadc>
 8008be6:	4593      	cmp	fp, r2
 8008be8:	d105      	bne.n	8008bf6 <_dtoa_r+0xafe>
 8008bea:	2331      	movs	r3, #49	; 0x31
 8008bec:	f10a 0a01 	add.w	sl, sl, #1
 8008bf0:	f88b 3000 	strb.w	r3, [fp]
 8008bf4:	e6ff      	b.n	80089f6 <_dtoa_r+0x8fe>
 8008bf6:	4615      	mov	r5, r2
 8008bf8:	e79f      	b.n	8008b3a <_dtoa_r+0xa42>
 8008bfa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008c60 <_dtoa_r+0xb68>
 8008bfe:	e007      	b.n	8008c10 <_dtoa_r+0xb18>
 8008c00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c02:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008c64 <_dtoa_r+0xb6c>
 8008c06:	b11b      	cbz	r3, 8008c10 <_dtoa_r+0xb18>
 8008c08:	f10b 0308 	add.w	r3, fp, #8
 8008c0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	4658      	mov	r0, fp
 8008c12:	b017      	add	sp, #92	; 0x5c
 8008c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c18:	9b06      	ldr	r3, [sp, #24]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	f77f ae35 	ble.w	800888a <_dtoa_r+0x792>
 8008c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c22:	9307      	str	r3, [sp, #28]
 8008c24:	e649      	b.n	80088ba <_dtoa_r+0x7c2>
 8008c26:	9b02      	ldr	r3, [sp, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	dc03      	bgt.n	8008c34 <_dtoa_r+0xb3c>
 8008c2c:	9b06      	ldr	r3, [sp, #24]
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	f73f aecc 	bgt.w	80089cc <_dtoa_r+0x8d4>
 8008c34:	465d      	mov	r5, fp
 8008c36:	4639      	mov	r1, r7
 8008c38:	9804      	ldr	r0, [sp, #16]
 8008c3a:	f7ff f9cf 	bl	8007fdc <quorem>
 8008c3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008c42:	f805 8b01 	strb.w	r8, [r5], #1
 8008c46:	9a02      	ldr	r2, [sp, #8]
 8008c48:	eba5 030b 	sub.w	r3, r5, fp
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	ddb0      	ble.n	8008bb2 <_dtoa_r+0xaba>
 8008c50:	2300      	movs	r3, #0
 8008c52:	220a      	movs	r2, #10
 8008c54:	9904      	ldr	r1, [sp, #16]
 8008c56:	4620      	mov	r0, r4
 8008c58:	f000 f872 	bl	8008d40 <__multadd>
 8008c5c:	9004      	str	r0, [sp, #16]
 8008c5e:	e7ea      	b.n	8008c36 <_dtoa_r+0xb3e>
 8008c60:	080097c4 	.word	0x080097c4
 8008c64:	080097e8 	.word	0x080097e8

08008c68 <_localeconv_r>:
 8008c68:	4b04      	ldr	r3, [pc, #16]	; (8008c7c <_localeconv_r+0x14>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6a18      	ldr	r0, [r3, #32]
 8008c6e:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <_localeconv_r+0x18>)
 8008c70:	2800      	cmp	r0, #0
 8008c72:	bf08      	it	eq
 8008c74:	4618      	moveq	r0, r3
 8008c76:	30f0      	adds	r0, #240	; 0xf0
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	2000000c 	.word	0x2000000c
 8008c80:	20000070 	.word	0x20000070

08008c84 <malloc>:
 8008c84:	4b02      	ldr	r3, [pc, #8]	; (8008c90 <malloc+0xc>)
 8008c86:	4601      	mov	r1, r0
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	f000 bb45 	b.w	8009318 <_malloc_r>
 8008c8e:	bf00      	nop
 8008c90:	2000000c 	.word	0x2000000c

08008c94 <memcpy>:
 8008c94:	b510      	push	{r4, lr}
 8008c96:	1e43      	subs	r3, r0, #1
 8008c98:	440a      	add	r2, r1
 8008c9a:	4291      	cmp	r1, r2
 8008c9c:	d100      	bne.n	8008ca0 <memcpy+0xc>
 8008c9e:	bd10      	pop	{r4, pc}
 8008ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ca8:	e7f7      	b.n	8008c9a <memcpy+0x6>

08008caa <_Balloc>:
 8008caa:	b570      	push	{r4, r5, r6, lr}
 8008cac:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008cae:	4604      	mov	r4, r0
 8008cb0:	460e      	mov	r6, r1
 8008cb2:	b93d      	cbnz	r5, 8008cc4 <_Balloc+0x1a>
 8008cb4:	2010      	movs	r0, #16
 8008cb6:	f7ff ffe5 	bl	8008c84 <malloc>
 8008cba:	6260      	str	r0, [r4, #36]	; 0x24
 8008cbc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008cc0:	6005      	str	r5, [r0, #0]
 8008cc2:	60c5      	str	r5, [r0, #12]
 8008cc4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008cc6:	68eb      	ldr	r3, [r5, #12]
 8008cc8:	b183      	cbz	r3, 8008cec <_Balloc+0x42>
 8008cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008cd2:	b9b8      	cbnz	r0, 8008d04 <_Balloc+0x5a>
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	fa01 f506 	lsl.w	r5, r1, r6
 8008cda:	1d6a      	adds	r2, r5, #5
 8008cdc:	0092      	lsls	r2, r2, #2
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f000 fabe 	bl	8009260 <_calloc_r>
 8008ce4:	b160      	cbz	r0, 8008d00 <_Balloc+0x56>
 8008ce6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008cea:	e00e      	b.n	8008d0a <_Balloc+0x60>
 8008cec:	2221      	movs	r2, #33	; 0x21
 8008cee:	2104      	movs	r1, #4
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f000 fab5 	bl	8009260 <_calloc_r>
 8008cf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cf8:	60e8      	str	r0, [r5, #12]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1e4      	bne.n	8008cca <_Balloc+0x20>
 8008d00:	2000      	movs	r0, #0
 8008d02:	bd70      	pop	{r4, r5, r6, pc}
 8008d04:	6802      	ldr	r2, [r0, #0]
 8008d06:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d10:	e7f7      	b.n	8008d02 <_Balloc+0x58>

08008d12 <_Bfree>:
 8008d12:	b570      	push	{r4, r5, r6, lr}
 8008d14:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008d16:	4606      	mov	r6, r0
 8008d18:	460d      	mov	r5, r1
 8008d1a:	b93c      	cbnz	r4, 8008d2c <_Bfree+0x1a>
 8008d1c:	2010      	movs	r0, #16
 8008d1e:	f7ff ffb1 	bl	8008c84 <malloc>
 8008d22:	6270      	str	r0, [r6, #36]	; 0x24
 8008d24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d28:	6004      	str	r4, [r0, #0]
 8008d2a:	60c4      	str	r4, [r0, #12]
 8008d2c:	b13d      	cbz	r5, 8008d3e <_Bfree+0x2c>
 8008d2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008d30:	686a      	ldr	r2, [r5, #4]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d38:	6029      	str	r1, [r5, #0]
 8008d3a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}

08008d40 <__multadd>:
 8008d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d44:	690d      	ldr	r5, [r1, #16]
 8008d46:	461f      	mov	r7, r3
 8008d48:	4606      	mov	r6, r0
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	f101 0c14 	add.w	ip, r1, #20
 8008d50:	2300      	movs	r3, #0
 8008d52:	f8dc 0000 	ldr.w	r0, [ip]
 8008d56:	b281      	uxth	r1, r0
 8008d58:	fb02 7101 	mla	r1, r2, r1, r7
 8008d5c:	0c0f      	lsrs	r7, r1, #16
 8008d5e:	0c00      	lsrs	r0, r0, #16
 8008d60:	fb02 7000 	mla	r0, r2, r0, r7
 8008d64:	b289      	uxth	r1, r1
 8008d66:	3301      	adds	r3, #1
 8008d68:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008d6c:	429d      	cmp	r5, r3
 8008d6e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008d72:	f84c 1b04 	str.w	r1, [ip], #4
 8008d76:	dcec      	bgt.n	8008d52 <__multadd+0x12>
 8008d78:	b1d7      	cbz	r7, 8008db0 <__multadd+0x70>
 8008d7a:	68a3      	ldr	r3, [r4, #8]
 8008d7c:	42ab      	cmp	r3, r5
 8008d7e:	dc12      	bgt.n	8008da6 <__multadd+0x66>
 8008d80:	6861      	ldr	r1, [r4, #4]
 8008d82:	4630      	mov	r0, r6
 8008d84:	3101      	adds	r1, #1
 8008d86:	f7ff ff90 	bl	8008caa <_Balloc>
 8008d8a:	6922      	ldr	r2, [r4, #16]
 8008d8c:	3202      	adds	r2, #2
 8008d8e:	f104 010c 	add.w	r1, r4, #12
 8008d92:	4680      	mov	r8, r0
 8008d94:	0092      	lsls	r2, r2, #2
 8008d96:	300c      	adds	r0, #12
 8008d98:	f7ff ff7c 	bl	8008c94 <memcpy>
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f7ff ffb7 	bl	8008d12 <_Bfree>
 8008da4:	4644      	mov	r4, r8
 8008da6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008daa:	3501      	adds	r5, #1
 8008dac:	615f      	str	r7, [r3, #20]
 8008dae:	6125      	str	r5, [r4, #16]
 8008db0:	4620      	mov	r0, r4
 8008db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008db6 <__hi0bits>:
 8008db6:	0c02      	lsrs	r2, r0, #16
 8008db8:	0412      	lsls	r2, r2, #16
 8008dba:	4603      	mov	r3, r0
 8008dbc:	b9b2      	cbnz	r2, 8008dec <__hi0bits+0x36>
 8008dbe:	0403      	lsls	r3, r0, #16
 8008dc0:	2010      	movs	r0, #16
 8008dc2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008dc6:	bf04      	itt	eq
 8008dc8:	021b      	lsleq	r3, r3, #8
 8008dca:	3008      	addeq	r0, #8
 8008dcc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008dd0:	bf04      	itt	eq
 8008dd2:	011b      	lsleq	r3, r3, #4
 8008dd4:	3004      	addeq	r0, #4
 8008dd6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008dda:	bf04      	itt	eq
 8008ddc:	009b      	lsleq	r3, r3, #2
 8008dde:	3002      	addeq	r0, #2
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	db06      	blt.n	8008df2 <__hi0bits+0x3c>
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	d503      	bpl.n	8008df0 <__hi0bits+0x3a>
 8008de8:	3001      	adds	r0, #1
 8008dea:	4770      	bx	lr
 8008dec:	2000      	movs	r0, #0
 8008dee:	e7e8      	b.n	8008dc2 <__hi0bits+0xc>
 8008df0:	2020      	movs	r0, #32
 8008df2:	4770      	bx	lr

08008df4 <__lo0bits>:
 8008df4:	6803      	ldr	r3, [r0, #0]
 8008df6:	f013 0207 	ands.w	r2, r3, #7
 8008dfa:	4601      	mov	r1, r0
 8008dfc:	d00b      	beq.n	8008e16 <__lo0bits+0x22>
 8008dfe:	07da      	lsls	r2, r3, #31
 8008e00:	d423      	bmi.n	8008e4a <__lo0bits+0x56>
 8008e02:	0798      	lsls	r0, r3, #30
 8008e04:	bf49      	itett	mi
 8008e06:	085b      	lsrmi	r3, r3, #1
 8008e08:	089b      	lsrpl	r3, r3, #2
 8008e0a:	2001      	movmi	r0, #1
 8008e0c:	600b      	strmi	r3, [r1, #0]
 8008e0e:	bf5c      	itt	pl
 8008e10:	600b      	strpl	r3, [r1, #0]
 8008e12:	2002      	movpl	r0, #2
 8008e14:	4770      	bx	lr
 8008e16:	b298      	uxth	r0, r3
 8008e18:	b9a8      	cbnz	r0, 8008e46 <__lo0bits+0x52>
 8008e1a:	0c1b      	lsrs	r3, r3, #16
 8008e1c:	2010      	movs	r0, #16
 8008e1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008e22:	bf04      	itt	eq
 8008e24:	0a1b      	lsreq	r3, r3, #8
 8008e26:	3008      	addeq	r0, #8
 8008e28:	071a      	lsls	r2, r3, #28
 8008e2a:	bf04      	itt	eq
 8008e2c:	091b      	lsreq	r3, r3, #4
 8008e2e:	3004      	addeq	r0, #4
 8008e30:	079a      	lsls	r2, r3, #30
 8008e32:	bf04      	itt	eq
 8008e34:	089b      	lsreq	r3, r3, #2
 8008e36:	3002      	addeq	r0, #2
 8008e38:	07da      	lsls	r2, r3, #31
 8008e3a:	d402      	bmi.n	8008e42 <__lo0bits+0x4e>
 8008e3c:	085b      	lsrs	r3, r3, #1
 8008e3e:	d006      	beq.n	8008e4e <__lo0bits+0x5a>
 8008e40:	3001      	adds	r0, #1
 8008e42:	600b      	str	r3, [r1, #0]
 8008e44:	4770      	bx	lr
 8008e46:	4610      	mov	r0, r2
 8008e48:	e7e9      	b.n	8008e1e <__lo0bits+0x2a>
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	4770      	bx	lr
 8008e4e:	2020      	movs	r0, #32
 8008e50:	4770      	bx	lr

08008e52 <__i2b>:
 8008e52:	b510      	push	{r4, lr}
 8008e54:	460c      	mov	r4, r1
 8008e56:	2101      	movs	r1, #1
 8008e58:	f7ff ff27 	bl	8008caa <_Balloc>
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	6144      	str	r4, [r0, #20]
 8008e60:	6102      	str	r2, [r0, #16]
 8008e62:	bd10      	pop	{r4, pc}

08008e64 <__multiply>:
 8008e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	4614      	mov	r4, r2
 8008e6a:	690a      	ldr	r2, [r1, #16]
 8008e6c:	6923      	ldr	r3, [r4, #16]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	bfb8      	it	lt
 8008e72:	460b      	movlt	r3, r1
 8008e74:	4688      	mov	r8, r1
 8008e76:	bfbc      	itt	lt
 8008e78:	46a0      	movlt	r8, r4
 8008e7a:	461c      	movlt	r4, r3
 8008e7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e80:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008e84:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e8c:	eb07 0609 	add.w	r6, r7, r9
 8008e90:	42b3      	cmp	r3, r6
 8008e92:	bfb8      	it	lt
 8008e94:	3101      	addlt	r1, #1
 8008e96:	f7ff ff08 	bl	8008caa <_Balloc>
 8008e9a:	f100 0514 	add.w	r5, r0, #20
 8008e9e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008ea2:	462b      	mov	r3, r5
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	4573      	cmp	r3, lr
 8008ea8:	d316      	bcc.n	8008ed8 <__multiply+0x74>
 8008eaa:	f104 0214 	add.w	r2, r4, #20
 8008eae:	f108 0114 	add.w	r1, r8, #20
 8008eb2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008eb6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	9b00      	ldr	r3, [sp, #0]
 8008ebe:	9201      	str	r2, [sp, #4]
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d80c      	bhi.n	8008ede <__multiply+0x7a>
 8008ec4:	2e00      	cmp	r6, #0
 8008ec6:	dd03      	ble.n	8008ed0 <__multiply+0x6c>
 8008ec8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d05d      	beq.n	8008f8c <__multiply+0x128>
 8008ed0:	6106      	str	r6, [r0, #16]
 8008ed2:	b003      	add	sp, #12
 8008ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed8:	f843 2b04 	str.w	r2, [r3], #4
 8008edc:	e7e3      	b.n	8008ea6 <__multiply+0x42>
 8008ede:	f8b2 b000 	ldrh.w	fp, [r2]
 8008ee2:	f1bb 0f00 	cmp.w	fp, #0
 8008ee6:	d023      	beq.n	8008f30 <__multiply+0xcc>
 8008ee8:	4689      	mov	r9, r1
 8008eea:	46ac      	mov	ip, r5
 8008eec:	f04f 0800 	mov.w	r8, #0
 8008ef0:	f859 4b04 	ldr.w	r4, [r9], #4
 8008ef4:	f8dc a000 	ldr.w	sl, [ip]
 8008ef8:	b2a3      	uxth	r3, r4
 8008efa:	fa1f fa8a 	uxth.w	sl, sl
 8008efe:	fb0b a303 	mla	r3, fp, r3, sl
 8008f02:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f06:	f8dc 4000 	ldr.w	r4, [ip]
 8008f0a:	4443      	add	r3, r8
 8008f0c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008f10:	fb0b 840a 	mla	r4, fp, sl, r8
 8008f14:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008f18:	46e2      	mov	sl, ip
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008f20:	454f      	cmp	r7, r9
 8008f22:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008f26:	f84a 3b04 	str.w	r3, [sl], #4
 8008f2a:	d82b      	bhi.n	8008f84 <__multiply+0x120>
 8008f2c:	f8cc 8004 	str.w	r8, [ip, #4]
 8008f30:	9b01      	ldr	r3, [sp, #4]
 8008f32:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008f36:	3204      	adds	r2, #4
 8008f38:	f1ba 0f00 	cmp.w	sl, #0
 8008f3c:	d020      	beq.n	8008f80 <__multiply+0x11c>
 8008f3e:	682b      	ldr	r3, [r5, #0]
 8008f40:	4689      	mov	r9, r1
 8008f42:	46a8      	mov	r8, r5
 8008f44:	f04f 0b00 	mov.w	fp, #0
 8008f48:	f8b9 c000 	ldrh.w	ip, [r9]
 8008f4c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008f50:	fb0a 440c 	mla	r4, sl, ip, r4
 8008f54:	445c      	add	r4, fp
 8008f56:	46c4      	mov	ip, r8
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008f5e:	f84c 3b04 	str.w	r3, [ip], #4
 8008f62:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f66:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008f6a:	0c1b      	lsrs	r3, r3, #16
 8008f6c:	fb0a b303 	mla	r3, sl, r3, fp
 8008f70:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008f74:	454f      	cmp	r7, r9
 8008f76:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008f7a:	d805      	bhi.n	8008f88 <__multiply+0x124>
 8008f7c:	f8c8 3004 	str.w	r3, [r8, #4]
 8008f80:	3504      	adds	r5, #4
 8008f82:	e79b      	b.n	8008ebc <__multiply+0x58>
 8008f84:	46d4      	mov	ip, sl
 8008f86:	e7b3      	b.n	8008ef0 <__multiply+0x8c>
 8008f88:	46e0      	mov	r8, ip
 8008f8a:	e7dd      	b.n	8008f48 <__multiply+0xe4>
 8008f8c:	3e01      	subs	r6, #1
 8008f8e:	e799      	b.n	8008ec4 <__multiply+0x60>

08008f90 <__pow5mult>:
 8008f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f94:	4615      	mov	r5, r2
 8008f96:	f012 0203 	ands.w	r2, r2, #3
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	460f      	mov	r7, r1
 8008f9e:	d007      	beq.n	8008fb0 <__pow5mult+0x20>
 8008fa0:	3a01      	subs	r2, #1
 8008fa2:	4c21      	ldr	r4, [pc, #132]	; (8009028 <__pow5mult+0x98>)
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008faa:	f7ff fec9 	bl	8008d40 <__multadd>
 8008fae:	4607      	mov	r7, r0
 8008fb0:	10ad      	asrs	r5, r5, #2
 8008fb2:	d035      	beq.n	8009020 <__pow5mult+0x90>
 8008fb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008fb6:	b93c      	cbnz	r4, 8008fc8 <__pow5mult+0x38>
 8008fb8:	2010      	movs	r0, #16
 8008fba:	f7ff fe63 	bl	8008c84 <malloc>
 8008fbe:	6270      	str	r0, [r6, #36]	; 0x24
 8008fc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fc4:	6004      	str	r4, [r0, #0]
 8008fc6:	60c4      	str	r4, [r0, #12]
 8008fc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008fcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fd0:	b94c      	cbnz	r4, 8008fe6 <__pow5mult+0x56>
 8008fd2:	f240 2171 	movw	r1, #625	; 0x271
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f7ff ff3b 	bl	8008e52 <__i2b>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	6003      	str	r3, [r0, #0]
 8008fe6:	f04f 0800 	mov.w	r8, #0
 8008fea:	07eb      	lsls	r3, r5, #31
 8008fec:	d50a      	bpl.n	8009004 <__pow5mult+0x74>
 8008fee:	4639      	mov	r1, r7
 8008ff0:	4622      	mov	r2, r4
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7ff ff36 	bl	8008e64 <__multiply>
 8008ff8:	4639      	mov	r1, r7
 8008ffa:	4681      	mov	r9, r0
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f7ff fe88 	bl	8008d12 <_Bfree>
 8009002:	464f      	mov	r7, r9
 8009004:	106d      	asrs	r5, r5, #1
 8009006:	d00b      	beq.n	8009020 <__pow5mult+0x90>
 8009008:	6820      	ldr	r0, [r4, #0]
 800900a:	b938      	cbnz	r0, 800901c <__pow5mult+0x8c>
 800900c:	4622      	mov	r2, r4
 800900e:	4621      	mov	r1, r4
 8009010:	4630      	mov	r0, r6
 8009012:	f7ff ff27 	bl	8008e64 <__multiply>
 8009016:	6020      	str	r0, [r4, #0]
 8009018:	f8c0 8000 	str.w	r8, [r0]
 800901c:	4604      	mov	r4, r0
 800901e:	e7e4      	b.n	8008fea <__pow5mult+0x5a>
 8009020:	4638      	mov	r0, r7
 8009022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009026:	bf00      	nop
 8009028:	080098e8 	.word	0x080098e8

0800902c <__lshift>:
 800902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009030:	460c      	mov	r4, r1
 8009032:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009036:	6923      	ldr	r3, [r4, #16]
 8009038:	6849      	ldr	r1, [r1, #4]
 800903a:	eb0a 0903 	add.w	r9, sl, r3
 800903e:	68a3      	ldr	r3, [r4, #8]
 8009040:	4607      	mov	r7, r0
 8009042:	4616      	mov	r6, r2
 8009044:	f109 0501 	add.w	r5, r9, #1
 8009048:	42ab      	cmp	r3, r5
 800904a:	db32      	blt.n	80090b2 <__lshift+0x86>
 800904c:	4638      	mov	r0, r7
 800904e:	f7ff fe2c 	bl	8008caa <_Balloc>
 8009052:	2300      	movs	r3, #0
 8009054:	4680      	mov	r8, r0
 8009056:	f100 0114 	add.w	r1, r0, #20
 800905a:	461a      	mov	r2, r3
 800905c:	4553      	cmp	r3, sl
 800905e:	db2b      	blt.n	80090b8 <__lshift+0x8c>
 8009060:	6920      	ldr	r0, [r4, #16]
 8009062:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009066:	f104 0314 	add.w	r3, r4, #20
 800906a:	f016 021f 	ands.w	r2, r6, #31
 800906e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009072:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009076:	d025      	beq.n	80090c4 <__lshift+0x98>
 8009078:	f1c2 0e20 	rsb	lr, r2, #32
 800907c:	2000      	movs	r0, #0
 800907e:	681e      	ldr	r6, [r3, #0]
 8009080:	468a      	mov	sl, r1
 8009082:	4096      	lsls	r6, r2
 8009084:	4330      	orrs	r0, r6
 8009086:	f84a 0b04 	str.w	r0, [sl], #4
 800908a:	f853 0b04 	ldr.w	r0, [r3], #4
 800908e:	459c      	cmp	ip, r3
 8009090:	fa20 f00e 	lsr.w	r0, r0, lr
 8009094:	d814      	bhi.n	80090c0 <__lshift+0x94>
 8009096:	6048      	str	r0, [r1, #4]
 8009098:	b108      	cbz	r0, 800909e <__lshift+0x72>
 800909a:	f109 0502 	add.w	r5, r9, #2
 800909e:	3d01      	subs	r5, #1
 80090a0:	4638      	mov	r0, r7
 80090a2:	f8c8 5010 	str.w	r5, [r8, #16]
 80090a6:	4621      	mov	r1, r4
 80090a8:	f7ff fe33 	bl	8008d12 <_Bfree>
 80090ac:	4640      	mov	r0, r8
 80090ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b2:	3101      	adds	r1, #1
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	e7c7      	b.n	8009048 <__lshift+0x1c>
 80090b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80090bc:	3301      	adds	r3, #1
 80090be:	e7cd      	b.n	800905c <__lshift+0x30>
 80090c0:	4651      	mov	r1, sl
 80090c2:	e7dc      	b.n	800907e <__lshift+0x52>
 80090c4:	3904      	subs	r1, #4
 80090c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80090ce:	459c      	cmp	ip, r3
 80090d0:	d8f9      	bhi.n	80090c6 <__lshift+0x9a>
 80090d2:	e7e4      	b.n	800909e <__lshift+0x72>

080090d4 <__mcmp>:
 80090d4:	6903      	ldr	r3, [r0, #16]
 80090d6:	690a      	ldr	r2, [r1, #16]
 80090d8:	1a9b      	subs	r3, r3, r2
 80090da:	b530      	push	{r4, r5, lr}
 80090dc:	d10c      	bne.n	80090f8 <__mcmp+0x24>
 80090de:	0092      	lsls	r2, r2, #2
 80090e0:	3014      	adds	r0, #20
 80090e2:	3114      	adds	r1, #20
 80090e4:	1884      	adds	r4, r0, r2
 80090e6:	4411      	add	r1, r2
 80090e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090f0:	4295      	cmp	r5, r2
 80090f2:	d003      	beq.n	80090fc <__mcmp+0x28>
 80090f4:	d305      	bcc.n	8009102 <__mcmp+0x2e>
 80090f6:	2301      	movs	r3, #1
 80090f8:	4618      	mov	r0, r3
 80090fa:	bd30      	pop	{r4, r5, pc}
 80090fc:	42a0      	cmp	r0, r4
 80090fe:	d3f3      	bcc.n	80090e8 <__mcmp+0x14>
 8009100:	e7fa      	b.n	80090f8 <__mcmp+0x24>
 8009102:	f04f 33ff 	mov.w	r3, #4294967295
 8009106:	e7f7      	b.n	80090f8 <__mcmp+0x24>

08009108 <__mdiff>:
 8009108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800910c:	460d      	mov	r5, r1
 800910e:	4607      	mov	r7, r0
 8009110:	4611      	mov	r1, r2
 8009112:	4628      	mov	r0, r5
 8009114:	4614      	mov	r4, r2
 8009116:	f7ff ffdd 	bl	80090d4 <__mcmp>
 800911a:	1e06      	subs	r6, r0, #0
 800911c:	d108      	bne.n	8009130 <__mdiff+0x28>
 800911e:	4631      	mov	r1, r6
 8009120:	4638      	mov	r0, r7
 8009122:	f7ff fdc2 	bl	8008caa <_Balloc>
 8009126:	2301      	movs	r3, #1
 8009128:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800912c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009130:	bfa4      	itt	ge
 8009132:	4623      	movge	r3, r4
 8009134:	462c      	movge	r4, r5
 8009136:	4638      	mov	r0, r7
 8009138:	6861      	ldr	r1, [r4, #4]
 800913a:	bfa6      	itte	ge
 800913c:	461d      	movge	r5, r3
 800913e:	2600      	movge	r6, #0
 8009140:	2601      	movlt	r6, #1
 8009142:	f7ff fdb2 	bl	8008caa <_Balloc>
 8009146:	692b      	ldr	r3, [r5, #16]
 8009148:	60c6      	str	r6, [r0, #12]
 800914a:	6926      	ldr	r6, [r4, #16]
 800914c:	f105 0914 	add.w	r9, r5, #20
 8009150:	f104 0214 	add.w	r2, r4, #20
 8009154:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009158:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800915c:	f100 0514 	add.w	r5, r0, #20
 8009160:	f04f 0e00 	mov.w	lr, #0
 8009164:	f852 ab04 	ldr.w	sl, [r2], #4
 8009168:	f859 4b04 	ldr.w	r4, [r9], #4
 800916c:	fa1e f18a 	uxtah	r1, lr, sl
 8009170:	b2a3      	uxth	r3, r4
 8009172:	1ac9      	subs	r1, r1, r3
 8009174:	0c23      	lsrs	r3, r4, #16
 8009176:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800917a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800917e:	b289      	uxth	r1, r1
 8009180:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009184:	45c8      	cmp	r8, r9
 8009186:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800918a:	4694      	mov	ip, r2
 800918c:	f845 3b04 	str.w	r3, [r5], #4
 8009190:	d8e8      	bhi.n	8009164 <__mdiff+0x5c>
 8009192:	45bc      	cmp	ip, r7
 8009194:	d304      	bcc.n	80091a0 <__mdiff+0x98>
 8009196:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800919a:	b183      	cbz	r3, 80091be <__mdiff+0xb6>
 800919c:	6106      	str	r6, [r0, #16]
 800919e:	e7c5      	b.n	800912c <__mdiff+0x24>
 80091a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80091a4:	fa1e f381 	uxtah	r3, lr, r1
 80091a8:	141a      	asrs	r2, r3, #16
 80091aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80091b8:	f845 3b04 	str.w	r3, [r5], #4
 80091bc:	e7e9      	b.n	8009192 <__mdiff+0x8a>
 80091be:	3e01      	subs	r6, #1
 80091c0:	e7e9      	b.n	8009196 <__mdiff+0x8e>

080091c2 <__d2b>:
 80091c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091c6:	460e      	mov	r6, r1
 80091c8:	2101      	movs	r1, #1
 80091ca:	ec59 8b10 	vmov	r8, r9, d0
 80091ce:	4615      	mov	r5, r2
 80091d0:	f7ff fd6b 	bl	8008caa <_Balloc>
 80091d4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80091d8:	4607      	mov	r7, r0
 80091da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091de:	bb34      	cbnz	r4, 800922e <__d2b+0x6c>
 80091e0:	9301      	str	r3, [sp, #4]
 80091e2:	f1b8 0300 	subs.w	r3, r8, #0
 80091e6:	d027      	beq.n	8009238 <__d2b+0x76>
 80091e8:	a802      	add	r0, sp, #8
 80091ea:	f840 3d08 	str.w	r3, [r0, #-8]!
 80091ee:	f7ff fe01 	bl	8008df4 <__lo0bits>
 80091f2:	9900      	ldr	r1, [sp, #0]
 80091f4:	b1f0      	cbz	r0, 8009234 <__d2b+0x72>
 80091f6:	9a01      	ldr	r2, [sp, #4]
 80091f8:	f1c0 0320 	rsb	r3, r0, #32
 80091fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009200:	430b      	orrs	r3, r1
 8009202:	40c2      	lsrs	r2, r0
 8009204:	617b      	str	r3, [r7, #20]
 8009206:	9201      	str	r2, [sp, #4]
 8009208:	9b01      	ldr	r3, [sp, #4]
 800920a:	61bb      	str	r3, [r7, #24]
 800920c:	2b00      	cmp	r3, #0
 800920e:	bf14      	ite	ne
 8009210:	2102      	movne	r1, #2
 8009212:	2101      	moveq	r1, #1
 8009214:	6139      	str	r1, [r7, #16]
 8009216:	b1c4      	cbz	r4, 800924a <__d2b+0x88>
 8009218:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800921c:	4404      	add	r4, r0
 800921e:	6034      	str	r4, [r6, #0]
 8009220:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009224:	6028      	str	r0, [r5, #0]
 8009226:	4638      	mov	r0, r7
 8009228:	b003      	add	sp, #12
 800922a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800922e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009232:	e7d5      	b.n	80091e0 <__d2b+0x1e>
 8009234:	6179      	str	r1, [r7, #20]
 8009236:	e7e7      	b.n	8009208 <__d2b+0x46>
 8009238:	a801      	add	r0, sp, #4
 800923a:	f7ff fddb 	bl	8008df4 <__lo0bits>
 800923e:	9b01      	ldr	r3, [sp, #4]
 8009240:	617b      	str	r3, [r7, #20]
 8009242:	2101      	movs	r1, #1
 8009244:	6139      	str	r1, [r7, #16]
 8009246:	3020      	adds	r0, #32
 8009248:	e7e5      	b.n	8009216 <__d2b+0x54>
 800924a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800924e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009252:	6030      	str	r0, [r6, #0]
 8009254:	6918      	ldr	r0, [r3, #16]
 8009256:	f7ff fdae 	bl	8008db6 <__hi0bits>
 800925a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800925e:	e7e1      	b.n	8009224 <__d2b+0x62>

08009260 <_calloc_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	fb02 f401 	mul.w	r4, r2, r1
 8009266:	4621      	mov	r1, r4
 8009268:	f000 f856 	bl	8009318 <_malloc_r>
 800926c:	4605      	mov	r5, r0
 800926e:	b118      	cbz	r0, 8009278 <_calloc_r+0x18>
 8009270:	4622      	mov	r2, r4
 8009272:	2100      	movs	r1, #0
 8009274:	f7fe fa2e 	bl	80076d4 <memset>
 8009278:	4628      	mov	r0, r5
 800927a:	bd38      	pop	{r3, r4, r5, pc}

0800927c <_free_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4605      	mov	r5, r0
 8009280:	2900      	cmp	r1, #0
 8009282:	d045      	beq.n	8009310 <_free_r+0x94>
 8009284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009288:	1f0c      	subs	r4, r1, #4
 800928a:	2b00      	cmp	r3, #0
 800928c:	bfb8      	it	lt
 800928e:	18e4      	addlt	r4, r4, r3
 8009290:	f000 fa29 	bl	80096e6 <__malloc_lock>
 8009294:	4a1f      	ldr	r2, [pc, #124]	; (8009314 <_free_r+0x98>)
 8009296:	6813      	ldr	r3, [r2, #0]
 8009298:	4610      	mov	r0, r2
 800929a:	b933      	cbnz	r3, 80092aa <_free_r+0x2e>
 800929c:	6063      	str	r3, [r4, #4]
 800929e:	6014      	str	r4, [r2, #0]
 80092a0:	4628      	mov	r0, r5
 80092a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092a6:	f000 ba1f 	b.w	80096e8 <__malloc_unlock>
 80092aa:	42a3      	cmp	r3, r4
 80092ac:	d90c      	bls.n	80092c8 <_free_r+0x4c>
 80092ae:	6821      	ldr	r1, [r4, #0]
 80092b0:	1862      	adds	r2, r4, r1
 80092b2:	4293      	cmp	r3, r2
 80092b4:	bf04      	itt	eq
 80092b6:	681a      	ldreq	r2, [r3, #0]
 80092b8:	685b      	ldreq	r3, [r3, #4]
 80092ba:	6063      	str	r3, [r4, #4]
 80092bc:	bf04      	itt	eq
 80092be:	1852      	addeq	r2, r2, r1
 80092c0:	6022      	streq	r2, [r4, #0]
 80092c2:	6004      	str	r4, [r0, #0]
 80092c4:	e7ec      	b.n	80092a0 <_free_r+0x24>
 80092c6:	4613      	mov	r3, r2
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	b10a      	cbz	r2, 80092d0 <_free_r+0x54>
 80092cc:	42a2      	cmp	r2, r4
 80092ce:	d9fa      	bls.n	80092c6 <_free_r+0x4a>
 80092d0:	6819      	ldr	r1, [r3, #0]
 80092d2:	1858      	adds	r0, r3, r1
 80092d4:	42a0      	cmp	r0, r4
 80092d6:	d10b      	bne.n	80092f0 <_free_r+0x74>
 80092d8:	6820      	ldr	r0, [r4, #0]
 80092da:	4401      	add	r1, r0
 80092dc:	1858      	adds	r0, r3, r1
 80092de:	4282      	cmp	r2, r0
 80092e0:	6019      	str	r1, [r3, #0]
 80092e2:	d1dd      	bne.n	80092a0 <_free_r+0x24>
 80092e4:	6810      	ldr	r0, [r2, #0]
 80092e6:	6852      	ldr	r2, [r2, #4]
 80092e8:	605a      	str	r2, [r3, #4]
 80092ea:	4401      	add	r1, r0
 80092ec:	6019      	str	r1, [r3, #0]
 80092ee:	e7d7      	b.n	80092a0 <_free_r+0x24>
 80092f0:	d902      	bls.n	80092f8 <_free_r+0x7c>
 80092f2:	230c      	movs	r3, #12
 80092f4:	602b      	str	r3, [r5, #0]
 80092f6:	e7d3      	b.n	80092a0 <_free_r+0x24>
 80092f8:	6820      	ldr	r0, [r4, #0]
 80092fa:	1821      	adds	r1, r4, r0
 80092fc:	428a      	cmp	r2, r1
 80092fe:	bf04      	itt	eq
 8009300:	6811      	ldreq	r1, [r2, #0]
 8009302:	6852      	ldreq	r2, [r2, #4]
 8009304:	6062      	str	r2, [r4, #4]
 8009306:	bf04      	itt	eq
 8009308:	1809      	addeq	r1, r1, r0
 800930a:	6021      	streq	r1, [r4, #0]
 800930c:	605c      	str	r4, [r3, #4]
 800930e:	e7c7      	b.n	80092a0 <_free_r+0x24>
 8009310:	bd38      	pop	{r3, r4, r5, pc}
 8009312:	bf00      	nop
 8009314:	20000204 	.word	0x20000204

08009318 <_malloc_r>:
 8009318:	b570      	push	{r4, r5, r6, lr}
 800931a:	1ccd      	adds	r5, r1, #3
 800931c:	f025 0503 	bic.w	r5, r5, #3
 8009320:	3508      	adds	r5, #8
 8009322:	2d0c      	cmp	r5, #12
 8009324:	bf38      	it	cc
 8009326:	250c      	movcc	r5, #12
 8009328:	2d00      	cmp	r5, #0
 800932a:	4606      	mov	r6, r0
 800932c:	db01      	blt.n	8009332 <_malloc_r+0x1a>
 800932e:	42a9      	cmp	r1, r5
 8009330:	d903      	bls.n	800933a <_malloc_r+0x22>
 8009332:	230c      	movs	r3, #12
 8009334:	6033      	str	r3, [r6, #0]
 8009336:	2000      	movs	r0, #0
 8009338:	bd70      	pop	{r4, r5, r6, pc}
 800933a:	f000 f9d4 	bl	80096e6 <__malloc_lock>
 800933e:	4a21      	ldr	r2, [pc, #132]	; (80093c4 <_malloc_r+0xac>)
 8009340:	6814      	ldr	r4, [r2, #0]
 8009342:	4621      	mov	r1, r4
 8009344:	b991      	cbnz	r1, 800936c <_malloc_r+0x54>
 8009346:	4c20      	ldr	r4, [pc, #128]	; (80093c8 <_malloc_r+0xb0>)
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	b91b      	cbnz	r3, 8009354 <_malloc_r+0x3c>
 800934c:	4630      	mov	r0, r6
 800934e:	f000 f98f 	bl	8009670 <_sbrk_r>
 8009352:	6020      	str	r0, [r4, #0]
 8009354:	4629      	mov	r1, r5
 8009356:	4630      	mov	r0, r6
 8009358:	f000 f98a 	bl	8009670 <_sbrk_r>
 800935c:	1c43      	adds	r3, r0, #1
 800935e:	d124      	bne.n	80093aa <_malloc_r+0x92>
 8009360:	230c      	movs	r3, #12
 8009362:	6033      	str	r3, [r6, #0]
 8009364:	4630      	mov	r0, r6
 8009366:	f000 f9bf 	bl	80096e8 <__malloc_unlock>
 800936a:	e7e4      	b.n	8009336 <_malloc_r+0x1e>
 800936c:	680b      	ldr	r3, [r1, #0]
 800936e:	1b5b      	subs	r3, r3, r5
 8009370:	d418      	bmi.n	80093a4 <_malloc_r+0x8c>
 8009372:	2b0b      	cmp	r3, #11
 8009374:	d90f      	bls.n	8009396 <_malloc_r+0x7e>
 8009376:	600b      	str	r3, [r1, #0]
 8009378:	50cd      	str	r5, [r1, r3]
 800937a:	18cc      	adds	r4, r1, r3
 800937c:	4630      	mov	r0, r6
 800937e:	f000 f9b3 	bl	80096e8 <__malloc_unlock>
 8009382:	f104 000b 	add.w	r0, r4, #11
 8009386:	1d23      	adds	r3, r4, #4
 8009388:	f020 0007 	bic.w	r0, r0, #7
 800938c:	1ac3      	subs	r3, r0, r3
 800938e:	d0d3      	beq.n	8009338 <_malloc_r+0x20>
 8009390:	425a      	negs	r2, r3
 8009392:	50e2      	str	r2, [r4, r3]
 8009394:	e7d0      	b.n	8009338 <_malloc_r+0x20>
 8009396:	428c      	cmp	r4, r1
 8009398:	684b      	ldr	r3, [r1, #4]
 800939a:	bf16      	itet	ne
 800939c:	6063      	strne	r3, [r4, #4]
 800939e:	6013      	streq	r3, [r2, #0]
 80093a0:	460c      	movne	r4, r1
 80093a2:	e7eb      	b.n	800937c <_malloc_r+0x64>
 80093a4:	460c      	mov	r4, r1
 80093a6:	6849      	ldr	r1, [r1, #4]
 80093a8:	e7cc      	b.n	8009344 <_malloc_r+0x2c>
 80093aa:	1cc4      	adds	r4, r0, #3
 80093ac:	f024 0403 	bic.w	r4, r4, #3
 80093b0:	42a0      	cmp	r0, r4
 80093b2:	d005      	beq.n	80093c0 <_malloc_r+0xa8>
 80093b4:	1a21      	subs	r1, r4, r0
 80093b6:	4630      	mov	r0, r6
 80093b8:	f000 f95a 	bl	8009670 <_sbrk_r>
 80093bc:	3001      	adds	r0, #1
 80093be:	d0cf      	beq.n	8009360 <_malloc_r+0x48>
 80093c0:	6025      	str	r5, [r4, #0]
 80093c2:	e7db      	b.n	800937c <_malloc_r+0x64>
 80093c4:	20000204 	.word	0x20000204
 80093c8:	20000208 	.word	0x20000208

080093cc <__ssputs_r>:
 80093cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d0:	688e      	ldr	r6, [r1, #8]
 80093d2:	429e      	cmp	r6, r3
 80093d4:	4682      	mov	sl, r0
 80093d6:	460c      	mov	r4, r1
 80093d8:	4690      	mov	r8, r2
 80093da:	4699      	mov	r9, r3
 80093dc:	d837      	bhi.n	800944e <__ssputs_r+0x82>
 80093de:	898a      	ldrh	r2, [r1, #12]
 80093e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093e4:	d031      	beq.n	800944a <__ssputs_r+0x7e>
 80093e6:	6825      	ldr	r5, [r4, #0]
 80093e8:	6909      	ldr	r1, [r1, #16]
 80093ea:	1a6f      	subs	r7, r5, r1
 80093ec:	6965      	ldr	r5, [r4, #20]
 80093ee:	2302      	movs	r3, #2
 80093f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80093f8:	f109 0301 	add.w	r3, r9, #1
 80093fc:	443b      	add	r3, r7
 80093fe:	429d      	cmp	r5, r3
 8009400:	bf38      	it	cc
 8009402:	461d      	movcc	r5, r3
 8009404:	0553      	lsls	r3, r2, #21
 8009406:	d530      	bpl.n	800946a <__ssputs_r+0x9e>
 8009408:	4629      	mov	r1, r5
 800940a:	f7ff ff85 	bl	8009318 <_malloc_r>
 800940e:	4606      	mov	r6, r0
 8009410:	b950      	cbnz	r0, 8009428 <__ssputs_r+0x5c>
 8009412:	230c      	movs	r3, #12
 8009414:	f8ca 3000 	str.w	r3, [sl]
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	f04f 30ff 	mov.w	r0, #4294967295
 8009424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009428:	463a      	mov	r2, r7
 800942a:	6921      	ldr	r1, [r4, #16]
 800942c:	f7ff fc32 	bl	8008c94 <memcpy>
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800943a:	81a3      	strh	r3, [r4, #12]
 800943c:	6126      	str	r6, [r4, #16]
 800943e:	6165      	str	r5, [r4, #20]
 8009440:	443e      	add	r6, r7
 8009442:	1bed      	subs	r5, r5, r7
 8009444:	6026      	str	r6, [r4, #0]
 8009446:	60a5      	str	r5, [r4, #8]
 8009448:	464e      	mov	r6, r9
 800944a:	454e      	cmp	r6, r9
 800944c:	d900      	bls.n	8009450 <__ssputs_r+0x84>
 800944e:	464e      	mov	r6, r9
 8009450:	4632      	mov	r2, r6
 8009452:	4641      	mov	r1, r8
 8009454:	6820      	ldr	r0, [r4, #0]
 8009456:	f000 f92d 	bl	80096b4 <memmove>
 800945a:	68a3      	ldr	r3, [r4, #8]
 800945c:	1b9b      	subs	r3, r3, r6
 800945e:	60a3      	str	r3, [r4, #8]
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	441e      	add	r6, r3
 8009464:	6026      	str	r6, [r4, #0]
 8009466:	2000      	movs	r0, #0
 8009468:	e7dc      	b.n	8009424 <__ssputs_r+0x58>
 800946a:	462a      	mov	r2, r5
 800946c:	f000 f93d 	bl	80096ea <_realloc_r>
 8009470:	4606      	mov	r6, r0
 8009472:	2800      	cmp	r0, #0
 8009474:	d1e2      	bne.n	800943c <__ssputs_r+0x70>
 8009476:	6921      	ldr	r1, [r4, #16]
 8009478:	4650      	mov	r0, sl
 800947a:	f7ff feff 	bl	800927c <_free_r>
 800947e:	e7c8      	b.n	8009412 <__ssputs_r+0x46>

08009480 <_svfiprintf_r>:
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009484:	461d      	mov	r5, r3
 8009486:	898b      	ldrh	r3, [r1, #12]
 8009488:	061f      	lsls	r7, r3, #24
 800948a:	b09d      	sub	sp, #116	; 0x74
 800948c:	4680      	mov	r8, r0
 800948e:	460c      	mov	r4, r1
 8009490:	4616      	mov	r6, r2
 8009492:	d50f      	bpl.n	80094b4 <_svfiprintf_r+0x34>
 8009494:	690b      	ldr	r3, [r1, #16]
 8009496:	b96b      	cbnz	r3, 80094b4 <_svfiprintf_r+0x34>
 8009498:	2140      	movs	r1, #64	; 0x40
 800949a:	f7ff ff3d 	bl	8009318 <_malloc_r>
 800949e:	6020      	str	r0, [r4, #0]
 80094a0:	6120      	str	r0, [r4, #16]
 80094a2:	b928      	cbnz	r0, 80094b0 <_svfiprintf_r+0x30>
 80094a4:	230c      	movs	r3, #12
 80094a6:	f8c8 3000 	str.w	r3, [r8]
 80094aa:	f04f 30ff 	mov.w	r0, #4294967295
 80094ae:	e0c8      	b.n	8009642 <_svfiprintf_r+0x1c2>
 80094b0:	2340      	movs	r3, #64	; 0x40
 80094b2:	6163      	str	r3, [r4, #20]
 80094b4:	2300      	movs	r3, #0
 80094b6:	9309      	str	r3, [sp, #36]	; 0x24
 80094b8:	2320      	movs	r3, #32
 80094ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094be:	2330      	movs	r3, #48	; 0x30
 80094c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094c4:	9503      	str	r5, [sp, #12]
 80094c6:	f04f 0b01 	mov.w	fp, #1
 80094ca:	4637      	mov	r7, r6
 80094cc:	463d      	mov	r5, r7
 80094ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80094d2:	b10b      	cbz	r3, 80094d8 <_svfiprintf_r+0x58>
 80094d4:	2b25      	cmp	r3, #37	; 0x25
 80094d6:	d13e      	bne.n	8009556 <_svfiprintf_r+0xd6>
 80094d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80094dc:	d00b      	beq.n	80094f6 <_svfiprintf_r+0x76>
 80094de:	4653      	mov	r3, sl
 80094e0:	4632      	mov	r2, r6
 80094e2:	4621      	mov	r1, r4
 80094e4:	4640      	mov	r0, r8
 80094e6:	f7ff ff71 	bl	80093cc <__ssputs_r>
 80094ea:	3001      	adds	r0, #1
 80094ec:	f000 80a4 	beq.w	8009638 <_svfiprintf_r+0x1b8>
 80094f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f2:	4453      	add	r3, sl
 80094f4:	9309      	str	r3, [sp, #36]	; 0x24
 80094f6:	783b      	ldrb	r3, [r7, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 809d 	beq.w	8009638 <_svfiprintf_r+0x1b8>
 80094fe:	2300      	movs	r3, #0
 8009500:	f04f 32ff 	mov.w	r2, #4294967295
 8009504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009508:	9304      	str	r3, [sp, #16]
 800950a:	9307      	str	r3, [sp, #28]
 800950c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009510:	931a      	str	r3, [sp, #104]	; 0x68
 8009512:	462f      	mov	r7, r5
 8009514:	2205      	movs	r2, #5
 8009516:	f817 1b01 	ldrb.w	r1, [r7], #1
 800951a:	4850      	ldr	r0, [pc, #320]	; (800965c <_svfiprintf_r+0x1dc>)
 800951c:	f7f6 fe80 	bl	8000220 <memchr>
 8009520:	9b04      	ldr	r3, [sp, #16]
 8009522:	b9d0      	cbnz	r0, 800955a <_svfiprintf_r+0xda>
 8009524:	06d9      	lsls	r1, r3, #27
 8009526:	bf44      	itt	mi
 8009528:	2220      	movmi	r2, #32
 800952a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800952e:	071a      	lsls	r2, r3, #28
 8009530:	bf44      	itt	mi
 8009532:	222b      	movmi	r2, #43	; 0x2b
 8009534:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009538:	782a      	ldrb	r2, [r5, #0]
 800953a:	2a2a      	cmp	r2, #42	; 0x2a
 800953c:	d015      	beq.n	800956a <_svfiprintf_r+0xea>
 800953e:	9a07      	ldr	r2, [sp, #28]
 8009540:	462f      	mov	r7, r5
 8009542:	2000      	movs	r0, #0
 8009544:	250a      	movs	r5, #10
 8009546:	4639      	mov	r1, r7
 8009548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800954c:	3b30      	subs	r3, #48	; 0x30
 800954e:	2b09      	cmp	r3, #9
 8009550:	d94d      	bls.n	80095ee <_svfiprintf_r+0x16e>
 8009552:	b1b8      	cbz	r0, 8009584 <_svfiprintf_r+0x104>
 8009554:	e00f      	b.n	8009576 <_svfiprintf_r+0xf6>
 8009556:	462f      	mov	r7, r5
 8009558:	e7b8      	b.n	80094cc <_svfiprintf_r+0x4c>
 800955a:	4a40      	ldr	r2, [pc, #256]	; (800965c <_svfiprintf_r+0x1dc>)
 800955c:	1a80      	subs	r0, r0, r2
 800955e:	fa0b f000 	lsl.w	r0, fp, r0
 8009562:	4318      	orrs	r0, r3
 8009564:	9004      	str	r0, [sp, #16]
 8009566:	463d      	mov	r5, r7
 8009568:	e7d3      	b.n	8009512 <_svfiprintf_r+0x92>
 800956a:	9a03      	ldr	r2, [sp, #12]
 800956c:	1d11      	adds	r1, r2, #4
 800956e:	6812      	ldr	r2, [r2, #0]
 8009570:	9103      	str	r1, [sp, #12]
 8009572:	2a00      	cmp	r2, #0
 8009574:	db01      	blt.n	800957a <_svfiprintf_r+0xfa>
 8009576:	9207      	str	r2, [sp, #28]
 8009578:	e004      	b.n	8009584 <_svfiprintf_r+0x104>
 800957a:	4252      	negs	r2, r2
 800957c:	f043 0302 	orr.w	r3, r3, #2
 8009580:	9207      	str	r2, [sp, #28]
 8009582:	9304      	str	r3, [sp, #16]
 8009584:	783b      	ldrb	r3, [r7, #0]
 8009586:	2b2e      	cmp	r3, #46	; 0x2e
 8009588:	d10c      	bne.n	80095a4 <_svfiprintf_r+0x124>
 800958a:	787b      	ldrb	r3, [r7, #1]
 800958c:	2b2a      	cmp	r3, #42	; 0x2a
 800958e:	d133      	bne.n	80095f8 <_svfiprintf_r+0x178>
 8009590:	9b03      	ldr	r3, [sp, #12]
 8009592:	1d1a      	adds	r2, r3, #4
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	9203      	str	r2, [sp, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	bfb8      	it	lt
 800959c:	f04f 33ff 	movlt.w	r3, #4294967295
 80095a0:	3702      	adds	r7, #2
 80095a2:	9305      	str	r3, [sp, #20]
 80095a4:	4d2e      	ldr	r5, [pc, #184]	; (8009660 <_svfiprintf_r+0x1e0>)
 80095a6:	7839      	ldrb	r1, [r7, #0]
 80095a8:	2203      	movs	r2, #3
 80095aa:	4628      	mov	r0, r5
 80095ac:	f7f6 fe38 	bl	8000220 <memchr>
 80095b0:	b138      	cbz	r0, 80095c2 <_svfiprintf_r+0x142>
 80095b2:	2340      	movs	r3, #64	; 0x40
 80095b4:	1b40      	subs	r0, r0, r5
 80095b6:	fa03 f000 	lsl.w	r0, r3, r0
 80095ba:	9b04      	ldr	r3, [sp, #16]
 80095bc:	4303      	orrs	r3, r0
 80095be:	3701      	adds	r7, #1
 80095c0:	9304      	str	r3, [sp, #16]
 80095c2:	7839      	ldrb	r1, [r7, #0]
 80095c4:	4827      	ldr	r0, [pc, #156]	; (8009664 <_svfiprintf_r+0x1e4>)
 80095c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095ca:	2206      	movs	r2, #6
 80095cc:	1c7e      	adds	r6, r7, #1
 80095ce:	f7f6 fe27 	bl	8000220 <memchr>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d038      	beq.n	8009648 <_svfiprintf_r+0x1c8>
 80095d6:	4b24      	ldr	r3, [pc, #144]	; (8009668 <_svfiprintf_r+0x1e8>)
 80095d8:	bb13      	cbnz	r3, 8009620 <_svfiprintf_r+0x1a0>
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	3307      	adds	r3, #7
 80095de:	f023 0307 	bic.w	r3, r3, #7
 80095e2:	3308      	adds	r3, #8
 80095e4:	9303      	str	r3, [sp, #12]
 80095e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e8:	444b      	add	r3, r9
 80095ea:	9309      	str	r3, [sp, #36]	; 0x24
 80095ec:	e76d      	b.n	80094ca <_svfiprintf_r+0x4a>
 80095ee:	fb05 3202 	mla	r2, r5, r2, r3
 80095f2:	2001      	movs	r0, #1
 80095f4:	460f      	mov	r7, r1
 80095f6:	e7a6      	b.n	8009546 <_svfiprintf_r+0xc6>
 80095f8:	2300      	movs	r3, #0
 80095fa:	3701      	adds	r7, #1
 80095fc:	9305      	str	r3, [sp, #20]
 80095fe:	4619      	mov	r1, r3
 8009600:	250a      	movs	r5, #10
 8009602:	4638      	mov	r0, r7
 8009604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009608:	3a30      	subs	r2, #48	; 0x30
 800960a:	2a09      	cmp	r2, #9
 800960c:	d903      	bls.n	8009616 <_svfiprintf_r+0x196>
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0c8      	beq.n	80095a4 <_svfiprintf_r+0x124>
 8009612:	9105      	str	r1, [sp, #20]
 8009614:	e7c6      	b.n	80095a4 <_svfiprintf_r+0x124>
 8009616:	fb05 2101 	mla	r1, r5, r1, r2
 800961a:	2301      	movs	r3, #1
 800961c:	4607      	mov	r7, r0
 800961e:	e7f0      	b.n	8009602 <_svfiprintf_r+0x182>
 8009620:	ab03      	add	r3, sp, #12
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	4622      	mov	r2, r4
 8009626:	4b11      	ldr	r3, [pc, #68]	; (800966c <_svfiprintf_r+0x1ec>)
 8009628:	a904      	add	r1, sp, #16
 800962a:	4640      	mov	r0, r8
 800962c:	f7fe f8ee 	bl	800780c <_printf_float>
 8009630:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009634:	4681      	mov	r9, r0
 8009636:	d1d6      	bne.n	80095e6 <_svfiprintf_r+0x166>
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	065b      	lsls	r3, r3, #25
 800963c:	f53f af35 	bmi.w	80094aa <_svfiprintf_r+0x2a>
 8009640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009642:	b01d      	add	sp, #116	; 0x74
 8009644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009648:	ab03      	add	r3, sp, #12
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	4622      	mov	r2, r4
 800964e:	4b07      	ldr	r3, [pc, #28]	; (800966c <_svfiprintf_r+0x1ec>)
 8009650:	a904      	add	r1, sp, #16
 8009652:	4640      	mov	r0, r8
 8009654:	f7fe fb90 	bl	8007d78 <_printf_i>
 8009658:	e7ea      	b.n	8009630 <_svfiprintf_r+0x1b0>
 800965a:	bf00      	nop
 800965c:	080098f4 	.word	0x080098f4
 8009660:	080098fa 	.word	0x080098fa
 8009664:	080098fe 	.word	0x080098fe
 8009668:	0800780d 	.word	0x0800780d
 800966c:	080093cd 	.word	0x080093cd

08009670 <_sbrk_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4c06      	ldr	r4, [pc, #24]	; (800968c <_sbrk_r+0x1c>)
 8009674:	2300      	movs	r3, #0
 8009676:	4605      	mov	r5, r0
 8009678:	4608      	mov	r0, r1
 800967a:	6023      	str	r3, [r4, #0]
 800967c:	f7fd fd70 	bl	8007160 <_sbrk>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_sbrk_r+0x1a>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	b103      	cbz	r3, 800968a <_sbrk_r+0x1a>
 8009688:	602b      	str	r3, [r5, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	20000774 	.word	0x20000774

08009690 <__ascii_mbtowc>:
 8009690:	b082      	sub	sp, #8
 8009692:	b901      	cbnz	r1, 8009696 <__ascii_mbtowc+0x6>
 8009694:	a901      	add	r1, sp, #4
 8009696:	b142      	cbz	r2, 80096aa <__ascii_mbtowc+0x1a>
 8009698:	b14b      	cbz	r3, 80096ae <__ascii_mbtowc+0x1e>
 800969a:	7813      	ldrb	r3, [r2, #0]
 800969c:	600b      	str	r3, [r1, #0]
 800969e:	7812      	ldrb	r2, [r2, #0]
 80096a0:	1c10      	adds	r0, r2, #0
 80096a2:	bf18      	it	ne
 80096a4:	2001      	movne	r0, #1
 80096a6:	b002      	add	sp, #8
 80096a8:	4770      	bx	lr
 80096aa:	4610      	mov	r0, r2
 80096ac:	e7fb      	b.n	80096a6 <__ascii_mbtowc+0x16>
 80096ae:	f06f 0001 	mvn.w	r0, #1
 80096b2:	e7f8      	b.n	80096a6 <__ascii_mbtowc+0x16>

080096b4 <memmove>:
 80096b4:	4288      	cmp	r0, r1
 80096b6:	b510      	push	{r4, lr}
 80096b8:	eb01 0302 	add.w	r3, r1, r2
 80096bc:	d807      	bhi.n	80096ce <memmove+0x1a>
 80096be:	1e42      	subs	r2, r0, #1
 80096c0:	4299      	cmp	r1, r3
 80096c2:	d00a      	beq.n	80096da <memmove+0x26>
 80096c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80096cc:	e7f8      	b.n	80096c0 <memmove+0xc>
 80096ce:	4283      	cmp	r3, r0
 80096d0:	d9f5      	bls.n	80096be <memmove+0xa>
 80096d2:	1881      	adds	r1, r0, r2
 80096d4:	1ad2      	subs	r2, r2, r3
 80096d6:	42d3      	cmn	r3, r2
 80096d8:	d100      	bne.n	80096dc <memmove+0x28>
 80096da:	bd10      	pop	{r4, pc}
 80096dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80096e4:	e7f7      	b.n	80096d6 <memmove+0x22>

080096e6 <__malloc_lock>:
 80096e6:	4770      	bx	lr

080096e8 <__malloc_unlock>:
 80096e8:	4770      	bx	lr

080096ea <_realloc_r>:
 80096ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ec:	4607      	mov	r7, r0
 80096ee:	4614      	mov	r4, r2
 80096f0:	460e      	mov	r6, r1
 80096f2:	b921      	cbnz	r1, 80096fe <_realloc_r+0x14>
 80096f4:	4611      	mov	r1, r2
 80096f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096fa:	f7ff be0d 	b.w	8009318 <_malloc_r>
 80096fe:	b922      	cbnz	r2, 800970a <_realloc_r+0x20>
 8009700:	f7ff fdbc 	bl	800927c <_free_r>
 8009704:	4625      	mov	r5, r4
 8009706:	4628      	mov	r0, r5
 8009708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800970a:	f000 f821 	bl	8009750 <_malloc_usable_size_r>
 800970e:	42a0      	cmp	r0, r4
 8009710:	d20f      	bcs.n	8009732 <_realloc_r+0x48>
 8009712:	4621      	mov	r1, r4
 8009714:	4638      	mov	r0, r7
 8009716:	f7ff fdff 	bl	8009318 <_malloc_r>
 800971a:	4605      	mov	r5, r0
 800971c:	2800      	cmp	r0, #0
 800971e:	d0f2      	beq.n	8009706 <_realloc_r+0x1c>
 8009720:	4631      	mov	r1, r6
 8009722:	4622      	mov	r2, r4
 8009724:	f7ff fab6 	bl	8008c94 <memcpy>
 8009728:	4631      	mov	r1, r6
 800972a:	4638      	mov	r0, r7
 800972c:	f7ff fda6 	bl	800927c <_free_r>
 8009730:	e7e9      	b.n	8009706 <_realloc_r+0x1c>
 8009732:	4635      	mov	r5, r6
 8009734:	e7e7      	b.n	8009706 <_realloc_r+0x1c>

08009736 <__ascii_wctomb>:
 8009736:	b149      	cbz	r1, 800974c <__ascii_wctomb+0x16>
 8009738:	2aff      	cmp	r2, #255	; 0xff
 800973a:	bf85      	ittet	hi
 800973c:	238a      	movhi	r3, #138	; 0x8a
 800973e:	6003      	strhi	r3, [r0, #0]
 8009740:	700a      	strbls	r2, [r1, #0]
 8009742:	f04f 30ff 	movhi.w	r0, #4294967295
 8009746:	bf98      	it	ls
 8009748:	2001      	movls	r0, #1
 800974a:	4770      	bx	lr
 800974c:	4608      	mov	r0, r1
 800974e:	4770      	bx	lr

08009750 <_malloc_usable_size_r>:
 8009750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009754:	1f18      	subs	r0, r3, #4
 8009756:	2b00      	cmp	r3, #0
 8009758:	bfbc      	itt	lt
 800975a:	580b      	ldrlt	r3, [r1, r0]
 800975c:	18c0      	addlt	r0, r0, r3
 800975e:	4770      	bx	lr

08009760 <_init>:
 8009760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009762:	bf00      	nop
 8009764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009766:	bc08      	pop	{r3}
 8009768:	469e      	mov	lr, r3
 800976a:	4770      	bx	lr

0800976c <_fini>:
 800976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976e:	bf00      	nop
 8009770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009772:	bc08      	pop	{r3}
 8009774:	469e      	mov	lr, r3
 8009776:	4770      	bx	lr
